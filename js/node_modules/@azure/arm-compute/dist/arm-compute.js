/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmCompute = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var RestorePointCollectionSourceProperties = {
        serializedName: "RestorePointCollectionSourceProperties",
        type: {
            name: "Composite",
            className: "RestorePointCollectionSourceProperties",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiEntityReference = {
        serializedName: "ApiEntityReference",
        type: {
            name: "Composite",
            className: "ApiEntityReference",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareProfile = {
        serializedName: "HardwareProfile",
        type: {
            name: "Composite",
            className: "HardwareProfile",
            modelProperties: {
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultSecretReference = {
        serializedName: "KeyVaultSecretReference",
        type: {
            name: "Composite",
            className: "KeyVaultSecretReference",
            modelProperties: {
                secretUrl: {
                    required: true,
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                },
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var KeyVaultKeyReference = {
        serializedName: "KeyVaultKeyReference",
        type: {
            name: "Composite",
            className: "KeyVaultKeyReference",
            modelProperties: {
                keyUrl: {
                    required: true,
                    serializedName: "keyUrl",
                    type: {
                        name: "String"
                    }
                },
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var DiskEncryptionSettings = {
        serializedName: "DiskEncryptionSettings",
        type: {
            name: "Composite",
            className: "DiskEncryptionSettings",
            modelProperties: {
                diskEncryptionKey: {
                    serializedName: "diskEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                },
                keyEncryptionKey: {
                    serializedName: "keyEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultKeyReference"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DiskEncryptionSetParameters = {
        serializedName: "DiskEncryptionSetParameters",
        type: {
            name: "Composite",
            className: "DiskEncryptionSetParameters",
            modelProperties: __assign({}, SubResource.type.modelProperties)
        }
    };
    var ManagedDiskParameters = {
        serializedName: "ManagedDiskParameters",
        type: {
            name: "Composite",
            className: "ManagedDiskParameters",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }, diskEncryptionSet: {
                    serializedName: "diskEncryptionSet",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSetParameters"
                    }
                } })
        }
    };
    var RestorePointSourceVMOSDisk = {
        serializedName: "RestorePointSourceVMOSDisk",
        type: {
            name: "Composite",
            className: "RestorePointSourceVMOSDisk",
            modelProperties: {
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSettings"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                },
                diskRestorePoint: {
                    serializedName: "diskRestorePoint",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }
            }
        }
    };
    var RestorePointSourceVMDataDisk = {
        serializedName: "RestorePointSourceVMDataDisk",
        type: {
            name: "Composite",
            className: "RestorePointSourceVMDataDisk",
            modelProperties: {
                lun: {
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                },
                diskRestorePoint: {
                    serializedName: "diskRestorePoint",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }
            }
        }
    };
    var RestorePointSourceVMStorageProfile = {
        serializedName: "RestorePointSourceVMStorageProfile",
        type: {
            name: "Composite",
            className: "RestorePointSourceVMStorageProfile",
            modelProperties: {
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "RestorePointSourceVMOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePointSourceVMDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var AdditionalUnattendContent = {
        serializedName: "AdditionalUnattendContent",
        type: {
            name: "Composite",
            className: "AdditionalUnattendContent",
            modelProperties: {
                passName: {
                    serializedName: "passName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "OobeSystem"
                        ]
                    }
                },
                componentName: {
                    serializedName: "componentName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Microsoft-Windows-Shell-Setup"
                        ]
                    }
                },
                settingName: {
                    serializedName: "settingName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AutoLogon",
                            "FirstLogonCommands"
                        ]
                    }
                },
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatchSettings = {
        serializedName: "PatchSettings",
        type: {
            name: "Composite",
            className: "PatchSettings",
            modelProperties: {
                patchMode: {
                    serializedName: "patchMode",
                    type: {
                        name: "String"
                    }
                },
                enableHotpatching: {
                    serializedName: "enableHotpatching",
                    type: {
                        name: "Boolean"
                    }
                },
                assessmentMode: {
                    serializedName: "assessmentMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WinRMListener = {
        serializedName: "WinRMListener",
        type: {
            name: "Composite",
            className: "WinRMListener",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Http",
                            "Https"
                        ]
                    }
                },
                certificateUrl: {
                    serializedName: "certificateUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WinRMConfiguration = {
        serializedName: "WinRMConfiguration",
        type: {
            name: "Composite",
            className: "WinRMConfiguration",
            modelProperties: {
                listeners: {
                    serializedName: "listeners",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WinRMListener"
                            }
                        }
                    }
                }
            }
        }
    };
    var WindowsConfiguration = {
        serializedName: "WindowsConfiguration",
        type: {
            name: "Composite",
            className: "WindowsConfiguration",
            modelProperties: {
                provisionVMAgent: {
                    serializedName: "provisionVMAgent",
                    type: {
                        name: "Boolean"
                    }
                },
                enableAutomaticUpdates: {
                    serializedName: "enableAutomaticUpdates",
                    type: {
                        name: "Boolean"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                additionalUnattendContent: {
                    serializedName: "additionalUnattendContent",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdditionalUnattendContent"
                            }
                        }
                    }
                },
                patchSettings: {
                    serializedName: "patchSettings",
                    type: {
                        name: "Composite",
                        className: "PatchSettings"
                    }
                },
                winRM: {
                    serializedName: "winRM",
                    type: {
                        name: "Composite",
                        className: "WinRMConfiguration"
                    }
                }
            }
        }
    };
    var SshPublicKey = {
        serializedName: "SshPublicKey",
        type: {
            name: "Composite",
            className: "SshPublicKey",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                keyData: {
                    serializedName: "keyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshConfiguration = {
        serializedName: "SshConfiguration",
        type: {
            name: "Composite",
            className: "SshConfiguration",
            modelProperties: {
                publicKeys: {
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var LinuxPatchSettings = {
        serializedName: "LinuxPatchSettings",
        type: {
            name: "Composite",
            className: "LinuxPatchSettings",
            modelProperties: {
                patchMode: {
                    serializedName: "patchMode",
                    type: {
                        name: "String"
                    }
                },
                assessmentMode: {
                    serializedName: "assessmentMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinuxConfiguration = {
        serializedName: "LinuxConfiguration",
        type: {
            name: "Composite",
            className: "LinuxConfiguration",
            modelProperties: {
                disablePasswordAuthentication: {
                    serializedName: "disablePasswordAuthentication",
                    type: {
                        name: "Boolean"
                    }
                },
                ssh: {
                    serializedName: "ssh",
                    type: {
                        name: "Composite",
                        className: "SshConfiguration"
                    }
                },
                provisionVMAgent: {
                    serializedName: "provisionVMAgent",
                    type: {
                        name: "Boolean"
                    }
                },
                patchSettings: {
                    serializedName: "patchSettings",
                    type: {
                        name: "Composite",
                        className: "LinuxPatchSettings"
                    }
                }
            }
        }
    };
    var VaultCertificate = {
        serializedName: "VaultCertificate",
        type: {
            name: "Composite",
            className: "VaultCertificate",
            modelProperties: {
                certificateUrl: {
                    serializedName: "certificateUrl",
                    type: {
                        name: "String"
                    }
                },
                certificateStore: {
                    serializedName: "certificateStore",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultSecretGroup = {
        serializedName: "VaultSecretGroup",
        type: {
            name: "Composite",
            className: "VaultSecretGroup",
            modelProperties: {
                sourceVault: {
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                vaultCertificates: {
                    serializedName: "vaultCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultCertificate"
                            }
                        }
                    }
                }
            }
        }
    };
    var OSProfile = {
        serializedName: "OSProfile",
        type: {
            name: "Composite",
            className: "OSProfile",
            modelProperties: {
                computerName: {
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                adminUsername: {
                    serializedName: "adminUsername",
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    serializedName: "adminPassword",
                    type: {
                        name: "String"
                    }
                },
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                },
                allowExtensionOperations: {
                    serializedName: "allowExtensionOperations",
                    type: {
                        name: "Boolean"
                    }
                },
                requireGuestProvisionSignal: {
                    serializedName: "requireGuestProvisionSignal",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var BootDiagnostics = {
        serializedName: "BootDiagnostics",
        type: {
            name: "Composite",
            className: "BootDiagnostics",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageUri: {
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticsProfile = {
        serializedName: "DiagnosticsProfile",
        type: {
            name: "Composite",
            className: "DiagnosticsProfile",
            modelProperties: {
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnostics"
                    }
                }
            }
        }
    };
    var UefiSettings = {
        serializedName: "UefiSettings",
        type: {
            name: "Composite",
            className: "UefiSettings",
            modelProperties: {
                secureBootEnabled: {
                    serializedName: "secureBootEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                vTpmEnabled: {
                    serializedName: "vTpmEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SecurityProfile = {
        serializedName: "SecurityProfile",
        type: {
            name: "Composite",
            className: "SecurityProfile",
            modelProperties: {
                uefiSettings: {
                    serializedName: "uefiSettings",
                    type: {
                        name: "Composite",
                        className: "UefiSettings"
                    }
                },
                encryptionAtHost: {
                    serializedName: "encryptionAtHost",
                    type: {
                        name: "Boolean"
                    }
                },
                securityType: {
                    serializedName: "securityType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePointSourceMetadata = {
        serializedName: "RestorePointSourceMetadata",
        type: {
            name: "Composite",
            className: "RestorePointSourceMetadata",
            modelProperties: {
                hardwareProfile: {
                    serializedName: "hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "RestorePointSourceVMStorageProfile"
                    }
                },
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                },
                diagnosticsProfile: {
                    serializedName: "diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                },
                securityProfile: {
                    serializedName: "securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePointProvisioningDetails = {
        serializedName: "RestorePointProvisioningDetails",
        type: {
            name: "Composite",
            className: "RestorePointProvisioningDetails",
            modelProperties: {
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                totalUsedSizeInBytes: {
                    serializedName: "totalUsedSizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "Number"
                    }
                },
                statusMessage: {
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePoint = {
        serializedName: "RestorePoint",
        type: {
            name: "Composite",
            className: "RestorePoint",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { excludeDisks: {
                    serializedName: "properties.excludeDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiEntityReference"
                            }
                        }
                    }
                }, sourceMetadata: {
                    readOnly: true,
                    serializedName: "properties.sourceMetadata",
                    type: {
                        name: "Composite",
                        className: "RestorePointSourceMetadata"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, consistencyMode: {
                    readOnly: true,
                    serializedName: "properties.consistencyMode",
                    type: {
                        name: "String"
                    }
                }, provisioningDetails: {
                    readOnly: true,
                    serializedName: "properties.provisioningDetails",
                    type: {
                        name: "Composite",
                        className: "RestorePointProvisioningDetails"
                    }
                } })
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RestorePointCollection = {
        serializedName: "RestorePointCollection",
        type: {
            name: "Composite",
            className: "RestorePointCollection",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { source: {
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "RestorePointCollectionSourceProperties"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, restorePointCollectionId: {
                    readOnly: true,
                    serializedName: "properties.restorePointCollectionId",
                    type: {
                        name: "String"
                    }
                }, restorePoints: {
                    readOnly: true,
                    serializedName: "properties.restorePoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePoint"
                            }
                        }
                    }
                } })
        }
    };
    var UpdateResource = {
        serializedName: "UpdateResource",
        type: {
            name: "Composite",
            className: "UpdateResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RestorePointCollectionUpdate = {
        serializedName: "RestorePointCollectionUpdate",
        type: {
            name: "Composite",
            className: "RestorePointCollectionUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { source: {
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "RestorePointCollectionSourceProperties"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, restorePointCollectionId: {
                    readOnly: true,
                    serializedName: "properties.restorePointCollectionId",
                    type: {
                        name: "String"
                    }
                }, restorePoints: {
                    readOnly: true,
                    serializedName: "properties.restorePoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePoint"
                            }
                        }
                    }
                } })
        }
    };
    var ComputeOperationValue = {
        serializedName: "ComputeOperationValue",
        type: {
            name: "Composite",
            className: "ComputeOperationValue",
            modelProperties: {
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "display.operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "display.resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "display.description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    readOnly: true,
                    serializedName: "display.provider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DisallowedConfiguration = {
        serializedName: "DisallowedConfiguration",
        type: {
            name: "Composite",
            className: "DisallowedConfiguration",
            modelProperties: {
                vmDiskType: {
                    serializedName: "vmDiskType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RetrieveBootDiagnosticsDataResult = {
        serializedName: "RetrieveBootDiagnosticsDataResult",
        type: {
            name: "Composite",
            className: "RetrieveBootDiagnosticsDataResult",
            modelProperties: {
                consoleScreenshotBlobUri: {
                    readOnly: true,
                    serializedName: "consoleScreenshotBlobUri",
                    type: {
                        name: "String"
                    }
                },
                serialConsoleLogBlobUri: {
                    readOnly: true,
                    serializedName: "serialConsoleLogBlobUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceViewStatus = {
        serializedName: "InstanceViewStatus",
        type: {
            name: "Composite",
            className: "InstanceViewStatus",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                level: {
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Info",
                            "Warning",
                            "Error"
                        ]
                    }
                },
                displayStatus: {
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AvailabilitySet = {
        serializedName: "AvailabilitySet",
        type: {
            name: "Composite",
            className: "AvailabilitySet",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { platformUpdateDomainCount: {
                    serializedName: "properties.platformUpdateDomainCount",
                    type: {
                        name: "Number"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, virtualMachines: {
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, statuses: {
                    readOnly: true,
                    serializedName: "properties.statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var AvailabilitySetUpdate = {
        serializedName: "AvailabilitySetUpdate",
        type: {
            name: "Composite",
            className: "AvailabilitySetUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { platformUpdateDomainCount: {
                    serializedName: "properties.platformUpdateDomainCount",
                    type: {
                        name: "Number"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, virtualMachines: {
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, statuses: {
                    readOnly: true,
                    serializedName: "properties.statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var SubResourceWithColocationStatus = {
        serializedName: "SubResourceWithColocationStatus",
        type: {
            name: "Composite",
            className: "SubResourceWithColocationStatus",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { colocationStatus: {
                    serializedName: "colocationStatus",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                } })
        }
    };
    var ProximityPlacementGroup = {
        serializedName: "ProximityPlacementGroup",
        type: {
            name: "Composite",
            className: "ProximityPlacementGroup",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { proximityPlacementGroupType: {
                    serializedName: "properties.proximityPlacementGroupType",
                    type: {
                        name: "String"
                    }
                }, virtualMachines: {
                    readOnly: true,
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceWithColocationStatus"
                            }
                        }
                    }
                }, virtualMachineScaleSets: {
                    readOnly: true,
                    serializedName: "properties.virtualMachineScaleSets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceWithColocationStatus"
                            }
                        }
                    }
                }, availabilitySets: {
                    readOnly: true,
                    serializedName: "properties.availabilitySets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceWithColocationStatus"
                            }
                        }
                    }
                }, colocationStatus: {
                    serializedName: "properties.colocationStatus",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                } })
        }
    };
    var ProximityPlacementGroupUpdate = {
        serializedName: "ProximityPlacementGroupUpdate",
        type: {
            name: "Composite",
            className: "ProximityPlacementGroupUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties)
        }
    };
    var DedicatedHostInstanceView = {
        serializedName: "DedicatedHostInstanceView",
        type: {
            name: "Composite",
            className: "DedicatedHostInstanceView",
            modelProperties: {
                assetId: {
                    readOnly: true,
                    serializedName: "assetId",
                    type: {
                        name: "String"
                    }
                },
                availableCapacity: {
                    serializedName: "availableCapacity",
                    type: {
                        name: "Composite",
                        className: "DedicatedHostAvailableCapacity"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var DedicatedHostInstanceViewWithName = {
        serializedName: "DedicatedHostInstanceViewWithName",
        type: {
            name: "Composite",
            className: "DedicatedHostInstanceViewWithName",
            modelProperties: __assign(__assign({}, DedicatedHostInstanceView.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DedicatedHostGroupInstanceView = {
        serializedName: "DedicatedHostGroupInstanceView",
        type: {
            name: "Composite",
            className: "DedicatedHostGroupInstanceView",
            modelProperties: {
                hosts: {
                    serializedName: "hosts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DedicatedHostInstanceViewWithName"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubResourceReadOnly = {
        serializedName: "SubResourceReadOnly",
        type: {
            name: "Composite",
            className: "SubResourceReadOnly",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DedicatedHostGroup = {
        serializedName: "DedicatedHostGroup",
        type: {
            name: "Composite",
            className: "DedicatedHostGroup",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { platformFaultDomainCount: {
                    required: true,
                    serializedName: "properties.platformFaultDomainCount",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, hosts: {
                    readOnly: true,
                    serializedName: "properties.hosts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "DedicatedHostGroupInstanceView"
                    }
                }, supportAutomaticPlacement: {
                    serializedName: "properties.supportAutomaticPlacement",
                    type: {
                        name: "Boolean"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DedicatedHostGroupUpdate = {
        serializedName: "DedicatedHostGroupUpdate",
        type: {
            name: "Composite",
            className: "DedicatedHostGroupUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { platformFaultDomainCount: {
                    required: true,
                    serializedName: "properties.platformFaultDomainCount",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, hosts: {
                    readOnly: true,
                    serializedName: "properties.hosts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "DedicatedHostGroupInstanceView"
                    }
                }, supportAutomaticPlacement: {
                    serializedName: "properties.supportAutomaticPlacement",
                    type: {
                        name: "Boolean"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DedicatedHostAllocatableVM = {
        serializedName: "DedicatedHostAllocatableVM",
        type: {
            name: "Composite",
            className: "DedicatedHostAllocatableVM",
            modelProperties: {
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DedicatedHostAvailableCapacity = {
        serializedName: "DedicatedHostAvailableCapacity",
        type: {
            name: "Composite",
            className: "DedicatedHostAvailableCapacity",
            modelProperties: {
                allocatableVMs: {
                    serializedName: "allocatableVMs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DedicatedHostAllocatableVM"
                            }
                        }
                    }
                }
            }
        }
    };
    var DedicatedHost = {
        serializedName: "DedicatedHost",
        type: {
            name: "Composite",
            className: "DedicatedHost",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { platformFaultDomain: {
                    serializedName: "properties.platformFaultDomain",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, autoReplaceOnFailure: {
                    serializedName: "properties.autoReplaceOnFailure",
                    type: {
                        name: "Boolean"
                    }
                }, hostId: {
                    readOnly: true,
                    serializedName: "properties.hostId",
                    type: {
                        name: "String"
                    }
                }, virtualMachines: {
                    readOnly: true,
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Windows_Server_Hybrid",
                            "Windows_Server_Perpetual"
                        ]
                    }
                }, provisioningTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "DedicatedHostInstanceView"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var DedicatedHostUpdate = {
        serializedName: "DedicatedHostUpdate",
        type: {
            name: "Composite",
            className: "DedicatedHostUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { platformFaultDomain: {
                    serializedName: "properties.platformFaultDomain",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, autoReplaceOnFailure: {
                    serializedName: "properties.autoReplaceOnFailure",
                    type: {
                        name: "Boolean"
                    }
                }, hostId: {
                    readOnly: true,
                    serializedName: "properties.hostId",
                    type: {
                        name: "String"
                    }
                }, virtualMachines: {
                    readOnly: true,
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Windows_Server_Hybrid",
                            "Windows_Server_Perpetual"
                        ]
                    }
                }, provisioningTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "DedicatedHostInstanceView"
                    }
                } })
        }
    };
    var CapacityReservationInstanceView = {
        serializedName: "CapacityReservationInstanceView",
        type: {
            name: "Composite",
            className: "CapacityReservationInstanceView",
            modelProperties: {
                utilizationInfo: {
                    serializedName: "utilizationInfo",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationUtilization"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var CapacityReservationInstanceViewWithName = {
        serializedName: "CapacityReservationInstanceViewWithName",
        type: {
            name: "Composite",
            className: "CapacityReservationInstanceViewWithName",
            modelProperties: __assign(__assign({}, CapacityReservationInstanceView.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CapacityReservationGroupInstanceView = {
        serializedName: "CapacityReservationGroupInstanceView",
        type: {
            name: "Composite",
            className: "CapacityReservationGroupInstanceView",
            modelProperties: {
                capacityReservations: {
                    readOnly: true,
                    serializedName: "capacityReservations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CapacityReservationInstanceViewWithName"
                            }
                        }
                    }
                }
            }
        }
    };
    var CapacityReservationGroup = {
        serializedName: "CapacityReservationGroup",
        type: {
            name: "Composite",
            className: "CapacityReservationGroup",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { capacityReservations: {
                    readOnly: true,
                    serializedName: "properties.capacityReservations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, virtualMachinesAssociated: {
                    readOnly: true,
                    serializedName: "properties.virtualMachinesAssociated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationGroupInstanceView"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var CapacityReservationGroupUpdate = {
        serializedName: "CapacityReservationGroupUpdate",
        type: {
            name: "Composite",
            className: "CapacityReservationGroupUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { capacityReservations: {
                    readOnly: true,
                    serializedName: "properties.capacityReservations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, virtualMachinesAssociated: {
                    readOnly: true,
                    serializedName: "properties.virtualMachinesAssociated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationGroupInstanceView"
                    }
                } })
        }
    };
    var CapacityReservationUtilization = {
        serializedName: "CapacityReservationUtilization",
        type: {
            name: "Composite",
            className: "CapacityReservationUtilization",
            modelProperties: {
                virtualMachinesAllocated: {
                    readOnly: true,
                    serializedName: "virtualMachinesAllocated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }
            }
        }
    };
    var CapacityReservation = {
        serializedName: "CapacityReservation",
        type: {
            name: "Composite",
            className: "CapacityReservation",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { reservationId: {
                    readOnly: true,
                    serializedName: "properties.reservationId",
                    type: {
                        name: "String"
                    }
                }, virtualMachinesAssociated: {
                    readOnly: true,
                    serializedName: "properties.virtualMachinesAssociated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, provisioningTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationInstanceView"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var CapacityReservationUpdate = {
        serializedName: "CapacityReservationUpdate",
        type: {
            name: "Composite",
            className: "CapacityReservationUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { reservationId: {
                    readOnly: true,
                    serializedName: "properties.reservationId",
                    type: {
                        name: "String"
                    }
                }, virtualMachinesAssociated: {
                    readOnly: true,
                    serializedName: "properties.virtualMachinesAssociated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResourceReadOnly"
                            }
                        }
                    }
                }, provisioningTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationInstanceView"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var SshPublicKeyGenerateKeyPairResult = {
        serializedName: "SshPublicKeyGenerateKeyPairResult",
        type: {
            name: "Composite",
            className: "SshPublicKeyGenerateKeyPairResult",
            modelProperties: {
                privateKey: {
                    required: true,
                    serializedName: "privateKey",
                    type: {
                        name: "String"
                    }
                },
                publicKey: {
                    required: true,
                    serializedName: "publicKey",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshPublicKeyResource = {
        serializedName: "SshPublicKeyResource",
        type: {
            name: "Composite",
            className: "SshPublicKeyResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { publicKey: {
                    serializedName: "properties.publicKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SshPublicKeyUpdateResource = {
        serializedName: "SshPublicKeyUpdateResource",
        type: {
            name: "Composite",
            className: "SshPublicKeyUpdateResource",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { publicKey: {
                    serializedName: "properties.publicKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineSize = {
        serializedName: "VirtualMachineSize",
        type: {
            name: "Composite",
            className: "VirtualMachineSize",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                numberOfCores: {
                    serializedName: "numberOfCores",
                    type: {
                        name: "Number"
                    }
                },
                osDiskSizeInMB: {
                    serializedName: "osDiskSizeInMB",
                    type: {
                        name: "Number"
                    }
                },
                resourceDiskSizeInMB: {
                    serializedName: "resourceDiskSizeInMB",
                    type: {
                        name: "Number"
                    }
                },
                memoryInMB: {
                    serializedName: "memoryInMB",
                    type: {
                        name: "Number"
                    }
                },
                maxDataDiskCount: {
                    serializedName: "maxDataDiskCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineExtensionImage = {
        serializedName: "VirtualMachineExtensionImage",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionImage",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { operatingSystem: {
                    required: true,
                    serializedName: "properties.operatingSystem",
                    type: {
                        name: "String"
                    }
                }, computeRole: {
                    required: true,
                    serializedName: "properties.computeRole",
                    type: {
                        name: "String"
                    }
                }, handlerSchema: {
                    required: true,
                    serializedName: "properties.handlerSchema",
                    type: {
                        name: "String"
                    }
                }, vmScaleSetEnabled: {
                    serializedName: "properties.vmScaleSetEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, supportsMultipleExtensions: {
                    serializedName: "properties.supportsMultipleExtensions",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ExtendedLocation = {
        serializedName: "ExtendedLocation",
        type: {
            name: "Composite",
            className: "ExtendedLocation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineImageResource = {
        serializedName: "VirtualMachineImageResource",
        type: {
            name: "Composite",
            className: "VirtualMachineImageResource",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                } })
        }
    };
    var VirtualMachineExtensionInstanceView = {
        serializedName: "VirtualMachineExtensionInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionInstanceView",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                typeHandlerVersion: {
                    serializedName: "typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                },
                substatuses: {
                    serializedName: "substatuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineExtension = {
        serializedName: "VirtualMachineExtension",
        type: {
            name: "Composite",
            className: "VirtualMachineExtension",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, virtualMachineExtensionType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineExtensionInstanceView"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetVMExtension = {
        serializedName: "VirtualMachineScaleSetVMExtension",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMExtension",
            modelProperties: __assign(__assign({}, SubResourceReadOnly.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type1: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineExtensionInstanceView"
                    }
                } })
        }
    };
    var VirtualMachineExtensionUpdate = {
        serializedName: "VirtualMachineExtensionUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetVMExtensionUpdate = {
        serializedName: "VirtualMachineScaleSetVMExtensionUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMExtensionUpdate",
            modelProperties: __assign(__assign({}, SubResourceReadOnly.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type1: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var VirtualMachineExtensionsListResult = {
        serializedName: "VirtualMachineExtensionsListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionsListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMExtensionsListResult = {
        serializedName: "VirtualMachineScaleSetVMExtensionsListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMExtensionsListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetVMExtension"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineSoftwarePatchProperties = {
        serializedName: "VirtualMachineSoftwarePatchProperties",
        type: {
            name: "Composite",
            className: "VirtualMachineSoftwarePatchProperties",
            modelProperties: {
                patchId: {
                    readOnly: true,
                    serializedName: "patchId",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                kbId: {
                    readOnly: true,
                    serializedName: "kbId",
                    type: {
                        name: "String"
                    }
                },
                classifications: {
                    readOnly: true,
                    serializedName: "classifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                rebootBehavior: {
                    readOnly: true,
                    serializedName: "rebootBehavior",
                    type: {
                        name: "String"
                    }
                },
                activityId: {
                    readOnly: true,
                    serializedName: "activityId",
                    type: {
                        name: "String"
                    }
                },
                publishedDate: {
                    readOnly: true,
                    serializedName: "publishedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedDateTime: {
                    readOnly: true,
                    serializedName: "lastModifiedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                assessmentState: {
                    readOnly: true,
                    serializedName: "assessmentState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiErrorBase = {
        serializedName: "ApiErrorBase",
        type: {
            name: "Composite",
            className: "ApiErrorBase",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InnerError = {
        serializedName: "InnerError",
        type: {
            name: "Composite",
            className: "InnerError",
            modelProperties: {
                exceptiontype: {
                    serializedName: "exceptiontype",
                    type: {
                        name: "String"
                    }
                },
                errordetail: {
                    serializedName: "errordetail",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiError = {
        serializedName: "ApiError",
        type: {
            name: "Composite",
            className: "ApiError",
            modelProperties: {
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiErrorBase"
                            }
                        }
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineAssessPatchesResult = {
        serializedName: "VirtualMachineAssessPatchesResult",
        type: {
            name: "Composite",
            className: "VirtualMachineAssessPatchesResult",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                assessmentActivityId: {
                    readOnly: true,
                    serializedName: "assessmentActivityId",
                    type: {
                        name: "String"
                    }
                },
                rebootPending: {
                    readOnly: true,
                    serializedName: "rebootPending",
                    type: {
                        name: "Boolean"
                    }
                },
                criticalAndSecurityPatchCount: {
                    readOnly: true,
                    serializedName: "criticalAndSecurityPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                otherPatchCount: {
                    readOnly: true,
                    serializedName: "otherPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                startDateTime: {
                    readOnly: true,
                    serializedName: "startDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                availablePatches: {
                    readOnly: true,
                    serializedName: "availablePatches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineSoftwarePatchProperties"
                            }
                        }
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var WindowsParameters = {
        serializedName: "WindowsParameters",
        type: {
            name: "Composite",
            className: "WindowsParameters",
            modelProperties: {
                classificationsToInclude: {
                    serializedName: "classificationsToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                kbNumbersToInclude: {
                    serializedName: "kbNumbersToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                kbNumbersToExclude: {
                    serializedName: "kbNumbersToExclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                excludeKbsRequiringReboot: {
                    serializedName: "excludeKbsRequiringReboot",
                    type: {
                        name: "Boolean"
                    }
                },
                maxPatchPublishDate: {
                    serializedName: "maxPatchPublishDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var LinuxParameters = {
        serializedName: "LinuxParameters",
        type: {
            name: "Composite",
            className: "LinuxParameters",
            modelProperties: {
                classificationsToInclude: {
                    serializedName: "classificationsToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                packageNameMasksToInclude: {
                    serializedName: "packageNameMasksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                packageNameMasksToExclude: {
                    serializedName: "packageNameMasksToExclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                maintenanceRunId: {
                    serializedName: "maintenanceRunId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineInstallPatchesParameters = {
        serializedName: "VirtualMachineInstallPatchesParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineInstallPatchesParameters",
            modelProperties: {
                maximumDuration: {
                    required: true,
                    serializedName: "maximumDuration",
                    type: {
                        name: "String"
                    }
                },
                rebootSetting: {
                    required: true,
                    serializedName: "rebootSetting",
                    type: {
                        name: "String"
                    }
                },
                windowsParameters: {
                    serializedName: "windowsParameters",
                    type: {
                        name: "Composite",
                        className: "WindowsParameters"
                    }
                },
                linuxParameters: {
                    serializedName: "linuxParameters",
                    type: {
                        name: "Composite",
                        className: "LinuxParameters"
                    }
                }
            }
        }
    };
    var PatchInstallationDetail = {
        serializedName: "PatchInstallationDetail",
        type: {
            name: "Composite",
            className: "PatchInstallationDetail",
            modelProperties: {
                patchId: {
                    readOnly: true,
                    serializedName: "patchId",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                kbId: {
                    readOnly: true,
                    serializedName: "kbId",
                    type: {
                        name: "String"
                    }
                },
                classifications: {
                    readOnly: true,
                    serializedName: "classifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                installationState: {
                    readOnly: true,
                    serializedName: "installationState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineInstallPatchesResult = {
        serializedName: "VirtualMachineInstallPatchesResult",
        type: {
            name: "Composite",
            className: "VirtualMachineInstallPatchesResult",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                installationActivityId: {
                    readOnly: true,
                    serializedName: "installationActivityId",
                    type: {
                        name: "String"
                    }
                },
                rebootStatus: {
                    readOnly: true,
                    serializedName: "rebootStatus",
                    type: {
                        name: "String"
                    }
                },
                maintenanceWindowExceeded: {
                    readOnly: true,
                    serializedName: "maintenanceWindowExceeded",
                    type: {
                        name: "Boolean"
                    }
                },
                excludedPatchCount: {
                    readOnly: true,
                    serializedName: "excludedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                notSelectedPatchCount: {
                    readOnly: true,
                    serializedName: "notSelectedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                pendingPatchCount: {
                    readOnly: true,
                    serializedName: "pendingPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                installedPatchCount: {
                    readOnly: true,
                    serializedName: "installedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                failedPatchCount: {
                    readOnly: true,
                    serializedName: "failedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                patches: {
                    readOnly: true,
                    serializedName: "patches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatchInstallationDetail"
                            }
                        }
                    }
                },
                startDateTime: {
                    readOnly: true,
                    serializedName: "startDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var PurchasePlan = {
        serializedName: "PurchasePlan",
        type: {
            name: "Composite",
            className: "PurchasePlan",
            modelProperties: {
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    required: true,
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDiskImage = {
        serializedName: "OSDiskImage",
        type: {
            name: "Composite",
            className: "OSDiskImage",
            modelProperties: {
                operatingSystem: {
                    required: true,
                    serializedName: "operatingSystem",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }
            }
        }
    };
    var DataDiskImage = {
        serializedName: "DataDiskImage",
        type: {
            name: "Composite",
            className: "DataDiskImage",
            modelProperties: {
                lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AutomaticOSUpgradeProperties = {
        serializedName: "AutomaticOSUpgradeProperties",
        type: {
            name: "Composite",
            className: "AutomaticOSUpgradeProperties",
            modelProperties: {
                automaticOSUpgradeSupported: {
                    required: true,
                    serializedName: "automaticOSUpgradeSupported",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineImageFeature = {
        serializedName: "VirtualMachineImageFeature",
        type: {
            name: "Composite",
            className: "VirtualMachineImageFeature",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineImage = {
        serializedName: "VirtualMachineImage",
        type: {
            name: "Composite",
            className: "VirtualMachineImage",
            modelProperties: __assign(__assign({}, VirtualMachineImageResource.type.modelProperties), { plan: {
                    serializedName: "properties.plan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, osDiskImage: {
                    serializedName: "properties.osDiskImage",
                    type: {
                        name: "Composite",
                        className: "OSDiskImage"
                    }
                }, dataDiskImages: {
                    serializedName: "properties.dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDiskImage"
                            }
                        }
                    }
                }, automaticOSUpgradeProperties: {
                    serializedName: "properties.automaticOSUpgradeProperties",
                    type: {
                        name: "Composite",
                        className: "AutomaticOSUpgradeProperties"
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, disallowed: {
                    serializedName: "properties.disallowed",
                    type: {
                        name: "Composite",
                        className: "DisallowedConfiguration"
                    }
                }, features: {
                    serializedName: "properties.features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageFeature"
                            }
                        }
                    }
                } })
        }
    };
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    required: true,
                    isConstant: true,
                    serializedName: "unit",
                    defaultValue: 'Count',
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    required: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    required: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var VirtualMachineReimageParameters = {
        serializedName: "VirtualMachineReimageParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineReimageParameters",
            modelProperties: {
                tempDisk: {
                    serializedName: "tempDisk",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineCaptureParameters = {
        serializedName: "VirtualMachineCaptureParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineCaptureParameters",
            modelProperties: {
                vhdPrefix: {
                    required: true,
                    serializedName: "vhdPrefix",
                    type: {
                        name: "String"
                    }
                },
                destinationContainerName: {
                    required: true,
                    serializedName: "destinationContainerName",
                    type: {
                        name: "String"
                    }
                },
                overwriteVhds: {
                    required: true,
                    serializedName: "overwriteVhds",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineCaptureResult = {
        serializedName: "VirtualMachineCaptureResult",
        type: {
            name: "Composite",
            className: "VirtualMachineCaptureResult",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { schema: {
                    readOnly: true,
                    serializedName: "$schema",
                    type: {
                        name: "String"
                    }
                }, contentVersion: {
                    readOnly: true,
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                }, parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var Plan = {
        serializedName: "Plan",
        type: {
            name: "Composite",
            className: "Plan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageReference = {
        serializedName: "ImageReference",
        type: {
            name: "Composite",
            className: "ImageReference",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                }, offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }, exactVersion: {
                    readOnly: true,
                    serializedName: "exactVersion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualHardDisk = {
        serializedName: "VirtualHardDisk",
        type: {
            name: "Composite",
            className: "VirtualHardDisk",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiffDiskSettings = {
        serializedName: "DiffDiskSettings",
        type: {
            name: "Composite",
            className: "DiffDiskSettings",
            modelProperties: {
                option: {
                    serializedName: "option",
                    type: {
                        name: "String"
                    }
                },
                placement: {
                    serializedName: "placement",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDisk = {
        serializedName: "OSDisk",
        type: {
            name: "Composite",
            className: "OSDisk",
            modelProperties: {
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSettings"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                vhd: {
                    serializedName: "vhd",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                diffDiskSettings: {
                    serializedName: "diffDiskSettings",
                    type: {
                        name: "Composite",
                        className: "DiffDiskSettings"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                },
                deleteOption: {
                    serializedName: "deleteOption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataDisk = {
        serializedName: "DataDisk",
        type: {
            name: "Composite",
            className: "DataDisk",
            modelProperties: {
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                vhd: {
                    serializedName: "vhd",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                },
                toBeDetached: {
                    serializedName: "toBeDetached",
                    type: {
                        name: "Boolean"
                    }
                },
                diskIOPSReadWrite: {
                    readOnly: true,
                    serializedName: "diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                diskMBpsReadWrite: {
                    readOnly: true,
                    serializedName: "diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                detachOption: {
                    serializedName: "detachOption",
                    type: {
                        name: "String"
                    }
                },
                deleteOption: {
                    serializedName: "deleteOption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapacityReservationProfile = {
        serializedName: "CapacityReservationProfile",
        type: {
            name: "Composite",
            className: "CapacityReservationProfile",
            modelProperties: {
                capacityReservationGroup: {
                    serializedName: "capacityReservationGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "OSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var AdditionalCapabilities = {
        serializedName: "AdditionalCapabilities",
        type: {
            name: "Composite",
            className: "AdditionalCapabilities",
            modelProperties: {
                ultraSSDEnabled: {
                    serializedName: "ultraSSDEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AutomaticRepairsPolicy = {
        serializedName: "AutomaticRepairsPolicy",
        type: {
            name: "Composite",
            className: "AutomaticRepairsPolicy",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                gracePeriod: {
                    serializedName: "gracePeriod",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceReference = {
        serializedName: "NetworkInterfaceReference",
        type: {
            name: "Composite",
            className: "NetworkInterfaceReference",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineIpTag = {
        serializedName: "VirtualMachineIpTag",
        type: {
            name: "Composite",
            className: "VirtualMachineIpTag",
            modelProperties: {
                ipTagType: {
                    serializedName: "ipTagType",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachinePublicIPAddressDnsSettingsConfiguration = {
        serializedName: "VirtualMachinePublicIPAddressDnsSettingsConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachinePublicIPAddressDnsSettingsConfiguration",
            modelProperties: {
                domainNameLabel: {
                    required: true,
                    serializedName: "domainNameLabel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPAddressSku = {
        serializedName: "PublicIPAddressSku",
        type: {
            name: "Composite",
            className: "PublicIPAddressSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachinePublicIPAddressConfiguration = {
        serializedName: "VirtualMachinePublicIPAddressConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachinePublicIPAddressConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachinePublicIPAddressDnsSettingsConfiguration"
                    }
                },
                ipTags: {
                    serializedName: "properties.ipTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineIpTag"
                            }
                        }
                    }
                },
                publicIPPrefix: {
                    serializedName: "properties.publicIPPrefix",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                publicIPAddressVersion: {
                    serializedName: "properties.publicIPAddressVersion",
                    type: {
                        name: "String"
                    }
                },
                publicIPAllocationMethod: {
                    serializedName: "properties.publicIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddressSku"
                    }
                }
            }
        }
    };
    var VirtualMachineNetworkInterfaceIPConfiguration = {
        serializedName: "VirtualMachineNetworkInterfaceIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineNetworkInterfaceIPConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                },
                publicIPAddressConfiguration: {
                    serializedName: "properties.publicIPAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachinePublicIPAddressConfiguration"
                    }
                },
                privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                },
                applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                },
                applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                },
                loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineNetworkInterfaceDnsSettingsConfiguration = {
        serializedName: "VirtualMachineNetworkInterfaceDnsSettingsConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineNetworkInterfaceDnsSettingsConfiguration",
            modelProperties: {
                dnsServers: {
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineNetworkInterfaceConfiguration = {
        serializedName: "VirtualMachineNetworkInterfaceConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineNetworkInterfaceConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                },
                deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                },
                enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                },
                enableFpga: {
                    serializedName: "properties.enableFpga",
                    type: {
                        name: "Boolean"
                    }
                },
                enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                },
                networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineNetworkInterfaceDnsSettingsConfiguration"
                    }
                },
                ipConfigurations: {
                    required: true,
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineNetworkInterfaceIPConfiguration"
                            }
                        }
                    }
                },
                dscpConfiguration: {
                    serializedName: "properties.dscpConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                networkInterfaces: {
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceReference"
                            }
                        }
                    }
                },
                networkApiVersion: {
                    serializedName: "networkApiVersion",
                    type: {
                        name: "String"
                    }
                },
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineNetworkInterfaceConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var BillingProfile = {
        serializedName: "BillingProfile",
        type: {
            name: "Composite",
            className: "BillingProfile",
            modelProperties: {
                maxPrice: {
                    serializedName: "maxPrice",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineExtensionHandlerInstanceView = {
        serializedName: "VirtualMachineExtensionHandlerInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionHandlerInstanceView",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                typeHandlerVersion: {
                    serializedName: "typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var VirtualMachineAgentInstanceView = {
        serializedName: "VirtualMachineAgentInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineAgentInstanceView",
            modelProperties: {
                vmAgentVersion: {
                    serializedName: "vmAgentVersion",
                    type: {
                        name: "String"
                    }
                },
                extensionHandlers: {
                    serializedName: "extensionHandlers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionHandlerInstanceView"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var DiskInstanceView = {
        serializedName: "DiskInstanceView",
        type: {
            name: "Composite",
            className: "DiskInstanceView",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskEncryptionSettings"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var BootDiagnosticsInstanceView = {
        serializedName: "BootDiagnosticsInstanceView",
        type: {
            name: "Composite",
            className: "BootDiagnosticsInstanceView",
            modelProperties: {
                consoleScreenshotBlobUri: {
                    readOnly: true,
                    serializedName: "consoleScreenshotBlobUri",
                    type: {
                        name: "String"
                    }
                },
                serialConsoleLogBlobUri: {
                    readOnly: true,
                    serializedName: "serialConsoleLogBlobUri",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var VirtualMachineIdentityUserAssignedIdentitiesValue = {
        serializedName: "VirtualMachineIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "VirtualMachineIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineIdentity = {
        serializedName: "VirtualMachineIdentity",
        type: {
            name: "Composite",
            className: "VirtualMachineIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var MaintenanceRedeployStatus = {
        serializedName: "MaintenanceRedeployStatus",
        type: {
            name: "Composite",
            className: "MaintenanceRedeployStatus",
            modelProperties: {
                isCustomerInitiatedMaintenanceAllowed: {
                    serializedName: "isCustomerInitiatedMaintenanceAllowed",
                    type: {
                        name: "Boolean"
                    }
                },
                preMaintenanceWindowStartTime: {
                    serializedName: "preMaintenanceWindowStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                preMaintenanceWindowEndTime: {
                    serializedName: "preMaintenanceWindowEndTime",
                    type: {
                        name: "DateTime"
                    }
                },
                maintenanceWindowStartTime: {
                    serializedName: "maintenanceWindowStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                maintenanceWindowEndTime: {
                    serializedName: "maintenanceWindowEndTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastOperationResultCode: {
                    serializedName: "lastOperationResultCode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "RetryLater",
                            "MaintenanceAborted",
                            "MaintenanceCompleted"
                        ]
                    }
                },
                lastOperationMessage: {
                    serializedName: "lastOperationMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineHealthStatus = {
        serializedName: "VirtualMachineHealthStatus",
        type: {
            name: "Composite",
            className: "VirtualMachineHealthStatus",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var AvailablePatchSummary = {
        serializedName: "AvailablePatchSummary",
        type: {
            name: "Composite",
            className: "AvailablePatchSummary",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                assessmentActivityId: {
                    readOnly: true,
                    serializedName: "assessmentActivityId",
                    type: {
                        name: "String"
                    }
                },
                rebootPending: {
                    readOnly: true,
                    serializedName: "rebootPending",
                    type: {
                        name: "Boolean"
                    }
                },
                criticalAndSecurityPatchCount: {
                    readOnly: true,
                    serializedName: "criticalAndSecurityPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                otherPatchCount: {
                    readOnly: true,
                    serializedName: "otherPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var LastPatchInstallationSummary = {
        serializedName: "LastPatchInstallationSummary",
        type: {
            name: "Composite",
            className: "LastPatchInstallationSummary",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                installationActivityId: {
                    readOnly: true,
                    serializedName: "installationActivityId",
                    type: {
                        name: "String"
                    }
                },
                maintenanceWindowExceeded: {
                    readOnly: true,
                    serializedName: "maintenanceWindowExceeded",
                    type: {
                        name: "Boolean"
                    }
                },
                notSelectedPatchCount: {
                    readOnly: true,
                    serializedName: "notSelectedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                excludedPatchCount: {
                    readOnly: true,
                    serializedName: "excludedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                pendingPatchCount: {
                    readOnly: true,
                    serializedName: "pendingPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                installedPatchCount: {
                    readOnly: true,
                    serializedName: "installedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                failedPatchCount: {
                    readOnly: true,
                    serializedName: "failedPatchCount",
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var VirtualMachinePatchStatus = {
        serializedName: "VirtualMachinePatchStatus",
        type: {
            name: "Composite",
            className: "VirtualMachinePatchStatus",
            modelProperties: {
                availablePatchSummary: {
                    serializedName: "availablePatchSummary",
                    type: {
                        name: "Composite",
                        className: "AvailablePatchSummary"
                    }
                },
                lastPatchInstallationSummary: {
                    serializedName: "lastPatchInstallationSummary",
                    type: {
                        name: "Composite",
                        className: "LastPatchInstallationSummary"
                    }
                },
                configurationStatuses: {
                    readOnly: true,
                    serializedName: "configurationStatuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineInstanceView = {
        serializedName: "VirtualMachineInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineInstanceView",
            modelProperties: {
                platformUpdateDomain: {
                    serializedName: "platformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                },
                platformFaultDomain: {
                    serializedName: "platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                },
                computerName: {
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                osName: {
                    serializedName: "osName",
                    type: {
                        name: "String"
                    }
                },
                osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                },
                hyperVGeneration: {
                    serializedName: "hyperVGeneration",
                    type: {
                        name: "String"
                    }
                },
                rdpThumbPrint: {
                    serializedName: "rdpThumbPrint",
                    type: {
                        name: "String"
                    }
                },
                vmAgent: {
                    serializedName: "vmAgent",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineAgentInstanceView"
                    }
                },
                maintenanceRedeployStatus: {
                    serializedName: "maintenanceRedeployStatus",
                    type: {
                        name: "Composite",
                        className: "MaintenanceRedeployStatus"
                    }
                },
                disks: {
                    serializedName: "disks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskInstanceView"
                            }
                        }
                    }
                },
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionInstanceView"
                            }
                        }
                    }
                },
                vmHealth: {
                    readOnly: true,
                    serializedName: "vmHealth",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineHealthStatus"
                    }
                },
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnosticsInstanceView"
                    }
                },
                assignedHost: {
                    readOnly: true,
                    serializedName: "assignedHost",
                    type: {
                        name: "String"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                patchStatus: {
                    serializedName: "patchStatus",
                    type: {
                        name: "Composite",
                        className: "VirtualMachinePatchStatus"
                    }
                }
            }
        }
    };
    var TerminateNotificationProfile = {
        serializedName: "TerminateNotificationProfile",
        type: {
            name: "Composite",
            className: "TerminateNotificationProfile",
            modelProperties: {
                notBeforeTimeout: {
                    serializedName: "notBeforeTimeout",
                    type: {
                        name: "String"
                    }
                },
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ScheduledEventsProfile = {
        serializedName: "ScheduledEventsProfile",
        type: {
            name: "Composite",
            className: "ScheduledEventsProfile",
            modelProperties: {
                terminateNotificationProfile: {
                    serializedName: "terminateNotificationProfile",
                    type: {
                        name: "Composite",
                        className: "TerminateNotificationProfile"
                    }
                }
            }
        }
    };
    var VirtualMachine = {
        serializedName: "VirtualMachine",
        type: {
            name: "Composite",
            className: "VirtualMachine",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, securityProfile: {
                    serializedName: "properties.securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, virtualMachineScaleSet: {
                    serializedName: "properties.virtualMachineScaleSet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "String"
                    }
                }, evictionPolicy: {
                    serializedName: "properties.evictionPolicy",
                    type: {
                        name: "String"
                    }
                }, billingProfile: {
                    serializedName: "properties.billingProfile",
                    type: {
                        name: "Composite",
                        className: "BillingProfile"
                    }
                }, host: {
                    serializedName: "properties.host",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, hostGroup: {
                    serializedName: "properties.hostGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineInstanceView"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, extensionsTimeBudget: {
                    serializedName: "properties.extensionsTimeBudget",
                    type: {
                        name: "String"
                    }
                }, platformFaultDomain: {
                    serializedName: "properties.platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                }, scheduledEventsProfile: {
                    serializedName: "properties.scheduledEventsProfile",
                    type: {
                        name: "Composite",
                        className: "ScheduledEventsProfile"
                    }
                }, userData: {
                    serializedName: "properties.userData",
                    type: {
                        name: "String"
                    }
                }, capacityReservation: {
                    serializedName: "properties.capacityReservation",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationProfile"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                } })
        }
    };
    var VirtualMachineUpdate = {
        serializedName: "VirtualMachineUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, securityProfile: {
                    serializedName: "properties.securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, virtualMachineScaleSet: {
                    serializedName: "properties.virtualMachineScaleSet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "String"
                    }
                }, evictionPolicy: {
                    serializedName: "properties.evictionPolicy",
                    type: {
                        name: "String"
                    }
                }, billingProfile: {
                    serializedName: "properties.billingProfile",
                    type: {
                        name: "Composite",
                        className: "BillingProfile"
                    }
                }, host: {
                    serializedName: "properties.host",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, hostGroup: {
                    serializedName: "properties.hostGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineInstanceView"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, extensionsTimeBudget: {
                    serializedName: "properties.extensionsTimeBudget",
                    type: {
                        name: "String"
                    }
                }, platformFaultDomain: {
                    serializedName: "properties.platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                }, scheduledEventsProfile: {
                    serializedName: "properties.scheduledEventsProfile",
                    type: {
                        name: "Composite",
                        className: "ScheduledEventsProfile"
                    }
                }, userData: {
                    serializedName: "properties.userData",
                    type: {
                        name: "String"
                    }
                }, capacityReservation: {
                    serializedName: "properties.capacityReservation",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationProfile"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AutomaticOSUpgradePolicy = {
        serializedName: "AutomaticOSUpgradePolicy",
        type: {
            name: "Composite",
            className: "AutomaticOSUpgradePolicy",
            modelProperties: {
                enableAutomaticOSUpgrade: {
                    serializedName: "enableAutomaticOSUpgrade",
                    type: {
                        name: "Boolean"
                    }
                },
                disableAutomaticRollback: {
                    serializedName: "disableAutomaticRollback",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RollingUpgradePolicy = {
        serializedName: "RollingUpgradePolicy",
        type: {
            name: "Composite",
            className: "RollingUpgradePolicy",
            modelProperties: {
                maxBatchInstancePercent: {
                    serializedName: "maxBatchInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 5
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxUnhealthyInstancePercent: {
                    serializedName: "maxUnhealthyInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 5
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxUnhealthyUpgradedInstancePercent: {
                    serializedName: "maxUnhealthyUpgradedInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                pauseTimeBetweenBatches: {
                    serializedName: "pauseTimeBetweenBatches",
                    type: {
                        name: "String"
                    }
                },
                enableCrossZoneUpgrade: {
                    serializedName: "enableCrossZoneUpgrade",
                    type: {
                        name: "Boolean"
                    }
                },
                prioritizeUnhealthyInstances: {
                    serializedName: "prioritizeUnhealthyInstances",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var UpgradePolicy = {
        serializedName: "UpgradePolicy",
        type: {
            name: "Composite",
            className: "UpgradePolicy",
            modelProperties: {
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "Manual",
                            "Rolling"
                        ]
                    }
                },
                rollingUpgradePolicy: {
                    serializedName: "rollingUpgradePolicy",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradePolicy"
                    }
                },
                automaticOSUpgradePolicy: {
                    serializedName: "automaticOSUpgradePolicy",
                    type: {
                        name: "Composite",
                        className: "AutomaticOSUpgradePolicy"
                    }
                }
            }
        }
    };
    var ScaleInPolicy = {
        serializedName: "ScaleInPolicy",
        type: {
            name: "Composite",
            className: "ScaleInPolicy",
            modelProperties: {
                rules: {
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SpotRestorePolicy = {
        serializedName: "SpotRestorePolicy",
        type: {
            name: "Composite",
            className: "SpotRestorePolicy",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                restoreTimeout: {
                    serializedName: "restoreTimeout",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDisk = {
        serializedName: "ImageDisk",
        type: {
            name: "Composite",
            className: "ImageDisk",
            modelProperties: {
                snapshot: {
                    serializedName: "snapshot",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                blobUri: {
                    serializedName: "blobUri",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                },
                diskEncryptionSet: {
                    serializedName: "diskEncryptionSet",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSetParameters"
                    }
                }
            }
        }
    };
    var ImageOSDisk = {
        serializedName: "ImageOSDisk",
        type: {
            name: "Composite",
            className: "ImageOSDisk",
            modelProperties: __assign(__assign({}, ImageDisk.type.modelProperties), { osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, osState: {
                    required: true,
                    serializedName: "osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                } })
        }
    };
    var ImageDataDisk = {
        serializedName: "ImageDataDisk",
        type: {
            name: "Composite",
            className: "ImageDataDisk",
            modelProperties: __assign(__assign({}, ImageDisk.type.modelProperties), { lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ImageStorageProfile = {
        serializedName: "ImageStorageProfile",
        type: {
            name: "Composite",
            className: "ImageStorageProfile",
            modelProperties: {
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "ImageOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageDataDisk"
                            }
                        }
                    }
                },
                zoneResilient: {
                    serializedName: "zoneResilient",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Image = {
        serializedName: "Image",
        type: {
            name: "Composite",
            className: "Image",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { sourceVirtualMachine: {
                    serializedName: "properties.sourceVirtualMachine",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "ImageStorageProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                } })
        }
    };
    var ImageUpdate = {
        serializedName: "ImageUpdate",
        type: {
            name: "Composite",
            className: "ImageUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { sourceVirtualMachine: {
                    serializedName: "properties.sourceVirtualMachine",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "ImageStorageProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue = {
        serializedName: "VirtualMachineScaleSetIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIdentity = {
        serializedName: "VirtualMachineScaleSetIdentity",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetOSProfile = {
        serializedName: "VirtualMachineScaleSetOSProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetOSProfile",
            modelProperties: {
                computerNamePrefix: {
                    serializedName: "computerNamePrefix",
                    type: {
                        name: "String"
                    }
                },
                adminUsername: {
                    serializedName: "adminUsername",
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    serializedName: "adminPassword",
                    type: {
                        name: "String"
                    }
                },
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateOSProfile = {
        serializedName: "VirtualMachineScaleSetUpdateOSProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateOSProfile",
            modelProperties: {
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetManagedDiskParameters = {
        serializedName: "VirtualMachineScaleSetManagedDiskParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetManagedDiskParameters",
            modelProperties: {
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                },
                diskEncryptionSet: {
                    serializedName: "diskEncryptionSet",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSetParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetOSDisk = {
        serializedName: "VirtualMachineScaleSetOSDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetOSDisk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diffDiskSettings: {
                    serializedName: "diffDiskSettings",
                    type: {
                        name: "Composite",
                        className: "DiffDiskSettings"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                vhdContainers: {
                    serializedName: "vhdContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateOSDisk = {
        serializedName: "VirtualMachineScaleSetUpdateOSDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateOSDisk",
            modelProperties: {
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                vhdContainers: {
                    serializedName: "vhdContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetDataDisk = {
        serializedName: "VirtualMachineScaleSetDataDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetDataDisk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                },
                diskIOPSReadWrite: {
                    serializedName: "diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                diskMBpsReadWrite: {
                    serializedName: "diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetStorageProfile = {
        serializedName: "VirtualMachineScaleSetStorageProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetStorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateStorageProfile = {
        serializedName: "VirtualMachineScaleSetUpdateStorageProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateStorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings = {
        serializedName: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings",
            modelProperties: {
                domainNameLabel: {
                    required: true,
                    serializedName: "domainNameLabel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIpTag = {
        serializedName: "VirtualMachineScaleSetIpTag",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIpTag",
            modelProperties: {
                ipTagType: {
                    serializedName: "ipTagType",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetPublicIPAddressConfiguration = {
        serializedName: "VirtualMachineScaleSetPublicIPAddressConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetPublicIPAddressConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"
                    }
                },
                ipTags: {
                    serializedName: "properties.ipTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIpTag"
                            }
                        }
                    }
                },
                publicIPPrefix: {
                    serializedName: "properties.publicIPPrefix",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                publicIPAddressVersion: {
                    serializedName: "properties.publicIPAddressVersion",
                    type: {
                        name: "String"
                    }
                },
                deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddressSku"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdatePublicIPAddressConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"
                    }
                },
                deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIPConfiguration = {
        serializedName: "VirtualMachineScaleSetIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIPConfiguration",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, publicIPAddressConfiguration: {
                    serializedName: "properties.publicIPAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfiguration"
                    }
                }, privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerInboundNatPools: {
                    serializedName: "properties.loadBalancerInboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdateIPConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdateIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateIPConfiguration",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, publicIPAddressConfiguration: {
                    serializedName: "properties.publicIPAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration"
                    }
                }, privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerInboundNatPools: {
                    serializedName: "properties.loadBalancerInboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetNetworkConfigurationDnsSettings = {
        serializedName: "VirtualMachineScaleSetNetworkConfigurationDnsSettings",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings",
            modelProperties: {
                dnsServers: {
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetNetworkConfiguration = {
        serializedName: "VirtualMachineScaleSetNetworkConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkConfiguration",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                }, enableFpga: {
                    serializedName: "properties.enableFpga",
                    type: {
                        name: "Boolean"
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings"
                    }
                }, ipConfigurations: {
                    required: true,
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIPConfiguration"
                            }
                        }
                    }
                }, enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                }, deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdateNetworkConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdateNetworkConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateNetworkConfiguration",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                }, enableFpga: {
                    serializedName: "properties.enableFpga",
                    type: {
                        name: "Boolean"
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings"
                    }
                }, ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetUpdateIPConfiguration"
                            }
                        }
                    }
                }, enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                }, deleteOption: {
                    serializedName: "properties.deleteOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetNetworkProfile = {
        serializedName: "VirtualMachineScaleSetNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkProfile",
            modelProperties: {
                healthProbe: {
                    serializedName: "healthProbe",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                },
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetNetworkConfiguration"
                            }
                        }
                    }
                },
                networkApiVersion: {
                    serializedName: "networkApiVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateNetworkProfile = {
        serializedName: "VirtualMachineScaleSetUpdateNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateNetworkProfile",
            modelProperties: {
                healthProbe: {
                    serializedName: "healthProbe",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                },
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetUpdateNetworkConfiguration"
                            }
                        }
                    }
                },
                networkApiVersion: {
                    serializedName: "networkApiVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetExtension = {
        serializedName: "VirtualMachineScaleSetExtension",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtension",
            modelProperties: __assign(__assign({}, SubResourceReadOnly.type.modelProperties), { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type1: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisionAfterExtensions: {
                    serializedName: "properties.provisionAfterExtensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetExtensionUpdate = {
        serializedName: "VirtualMachineScaleSetExtensionUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtensionUpdate",
            modelProperties: __assign(__assign({}, SubResourceReadOnly.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type1: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticUpgrade: {
                    serializedName: "properties.enableAutomaticUpgrade",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisionAfterExtensions: {
                    serializedName: "properties.provisionAfterExtensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetExtensionProfile = {
        serializedName: "VirtualMachineScaleSetExtensionProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtensionProfile",
            modelProperties: {
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetExtension"
                            }
                        }
                    }
                },
                extensionsTimeBudget: {
                    serializedName: "extensionsTimeBudget",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMProfile = {
        serializedName: "VirtualMachineScaleSetVMProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMProfile",
            modelProperties: {
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetOSProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetStorageProfile"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkProfile"
                    }
                },
                securityProfile: {
                    serializedName: "securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                },
                diagnosticsProfile: {
                    serializedName: "diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                },
                extensionProfile: {
                    serializedName: "extensionProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetExtensionProfile"
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "String"
                    }
                },
                evictionPolicy: {
                    serializedName: "evictionPolicy",
                    type: {
                        name: "String"
                    }
                },
                billingProfile: {
                    serializedName: "billingProfile",
                    type: {
                        name: "Composite",
                        className: "BillingProfile"
                    }
                },
                scheduledEventsProfile: {
                    serializedName: "scheduledEventsProfile",
                    type: {
                        name: "Composite",
                        className: "ScheduledEventsProfile"
                    }
                },
                userData: {
                    serializedName: "userData",
                    type: {
                        name: "String"
                    }
                },
                capacityReservation: {
                    serializedName: "capacityReservation",
                    type: {
                        name: "Composite",
                        className: "CapacityReservationProfile"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateVMProfile = {
        serializedName: "VirtualMachineScaleSetUpdateVMProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateVMProfile",
            modelProperties: {
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateOSProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateStorageProfile"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateNetworkProfile"
                    }
                },
                securityProfile: {
                    serializedName: "securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                },
                diagnosticsProfile: {
                    serializedName: "diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                },
                extensionProfile: {
                    serializedName: "extensionProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetExtensionProfile"
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                billingProfile: {
                    serializedName: "billingProfile",
                    type: {
                        name: "Composite",
                        className: "BillingProfile"
                    }
                },
                scheduledEventsProfile: {
                    serializedName: "scheduledEventsProfile",
                    type: {
                        name: "Composite",
                        className: "ScheduledEventsProfile"
                    }
                },
                userData: {
                    serializedName: "userData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSet = {
        serializedName: "VirtualMachineScaleSet",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSet",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, upgradePolicy: {
                    serializedName: "properties.upgradePolicy",
                    type: {
                        name: "Composite",
                        className: "UpgradePolicy"
                    }
                }, automaticRepairsPolicy: {
                    serializedName: "properties.automaticRepairsPolicy",
                    type: {
                        name: "Composite",
                        className: "AutomaticRepairsPolicy"
                    }
                }, virtualMachineProfile: {
                    serializedName: "properties.virtualMachineProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, overprovision: {
                    serializedName: "properties.overprovision",
                    type: {
                        name: "Boolean"
                    }
                }, doNotRunExtensionsOnOverprovisionedVMs: {
                    serializedName: "properties.doNotRunExtensionsOnOverprovisionedVMs",
                    type: {
                        name: "Boolean"
                    }
                }, uniqueId: {
                    readOnly: true,
                    serializedName: "properties.uniqueId",
                    type: {
                        name: "String"
                    }
                }, singlePlacementGroup: {
                    serializedName: "properties.singlePlacementGroup",
                    type: {
                        name: "Boolean"
                    }
                }, zoneBalance: {
                    serializedName: "properties.zoneBalance",
                    type: {
                        name: "Boolean"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, hostGroup: {
                    serializedName: "properties.hostGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, scaleInPolicy: {
                    serializedName: "properties.scaleInPolicy",
                    type: {
                        name: "Composite",
                        className: "ScaleInPolicy"
                    }
                }, orchestrationMode: {
                    serializedName: "properties.orchestrationMode",
                    type: {
                        name: "String"
                    }
                }, spotRestorePolicy: {
                    serializedName: "properties.spotRestorePolicy",
                    type: {
                        name: "Composite",
                        className: "SpotRestorePolicy"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetVMReimageParameters = {
        serializedName: "VirtualMachineScaleSetVMReimageParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMReimageParameters",
            modelProperties: __assign({}, VirtualMachineReimageParameters.type.modelProperties)
        }
    };
    var VirtualMachineScaleSetReimageParameters = {
        serializedName: "VirtualMachineScaleSetReimageParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetReimageParameters",
            modelProperties: __assign(__assign({}, VirtualMachineScaleSetVMReimageParameters.type.modelProperties), { instanceIds: {
                    serializedName: "instanceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdate = {
        serializedName: "VirtualMachineScaleSetUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, upgradePolicy: {
                    serializedName: "properties.upgradePolicy",
                    type: {
                        name: "Composite",
                        className: "UpgradePolicy"
                    }
                }, automaticRepairsPolicy: {
                    serializedName: "properties.automaticRepairsPolicy",
                    type: {
                        name: "Composite",
                        className: "AutomaticRepairsPolicy"
                    }
                }, virtualMachineProfile: {
                    serializedName: "properties.virtualMachineProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateVMProfile"
                    }
                }, overprovision: {
                    serializedName: "properties.overprovision",
                    type: {
                        name: "Boolean"
                    }
                }, doNotRunExtensionsOnOverprovisionedVMs: {
                    serializedName: "properties.doNotRunExtensionsOnOverprovisionedVMs",
                    type: {
                        name: "Boolean"
                    }
                }, singlePlacementGroup: {
                    serializedName: "properties.singlePlacementGroup",
                    type: {
                        name: "Boolean"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, scaleInPolicy: {
                    serializedName: "properties.scaleInPolicy",
                    type: {
                        name: "Composite",
                        className: "ScaleInPolicy"
                    }
                }, proximityPlacementGroup: {
                    serializedName: "properties.proximityPlacementGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetIdentity"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetVMInstanceIDs = {
        serializedName: "VirtualMachineScaleSetVMInstanceIDs",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceIDs",
            modelProperties: {
                instanceIds: {
                    serializedName: "instanceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMInstanceRequiredIDs = {
        serializedName: "VirtualMachineScaleSetVMInstanceRequiredIDs",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceRequiredIDs",
            modelProperties: {
                instanceIds: {
                    required: true,
                    serializedName: "instanceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineStatusCodeCount = {
        serializedName: "VirtualMachineStatusCodeCount",
        type: {
            name: "Composite",
            className: "VirtualMachineStatusCodeCount",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetInstanceViewStatusesSummary = {
        serializedName: "VirtualMachineScaleSetInstanceViewStatusesSummary",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetInstanceViewStatusesSummary",
            modelProperties: {
                statusesSummary: {
                    readOnly: true,
                    serializedName: "statusesSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineStatusCodeCount"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMExtensionsSummary = {
        serializedName: "VirtualMachineScaleSetVMExtensionsSummary",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMExtensionsSummary",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                statusesSummary: {
                    readOnly: true,
                    serializedName: "statusesSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineStatusCodeCount"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestrationServiceSummary = {
        serializedName: "OrchestrationServiceSummary",
        type: {
            name: "Composite",
            className: "OrchestrationServiceSummary",
            modelProperties: {
                serviceName: {
                    readOnly: true,
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                serviceState: {
                    readOnly: true,
                    serializedName: "serviceState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetInstanceView = {
        serializedName: "VirtualMachineScaleSetInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetInstanceView",
            modelProperties: {
                virtualMachine: {
                    readOnly: true,
                    serializedName: "virtualMachine",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetInstanceViewStatusesSummary"
                    }
                },
                extensions: {
                    readOnly: true,
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetVMExtensionsSummary"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                orchestrationServices: {
                    readOnly: true,
                    serializedName: "orchestrationServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrchestrationServiceSummary"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetSkuCapacity = {
        serializedName: "VirtualMachineScaleSetSkuCapacity",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                defaultCapacity: {
                    readOnly: true,
                    serializedName: "defaultCapacity",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "None"
                        ]
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetSku = {
        serializedName: "VirtualMachineScaleSetSku",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetSkuCapacity"
                    }
                }
            }
        }
    };
    var RollbackStatusInfo = {
        serializedName: "RollbackStatusInfo",
        type: {
            name: "Composite",
            className: "RollbackStatusInfo",
            modelProperties: {
                successfullyRolledbackInstanceCount: {
                    readOnly: true,
                    serializedName: "successfullyRolledbackInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                failedRolledbackInstanceCount: {
                    readOnly: true,
                    serializedName: "failedRolledbackInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                rollbackError: {
                    readOnly: true,
                    serializedName: "rollbackError",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoryStatus = {
        serializedName: "UpgradeOperationHistoryStatus",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoryStatus",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RollingForward",
                            "Cancelled",
                            "Completed",
                            "Faulted"
                        ]
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RollingUpgradeProgressInfo = {
        serializedName: "RollingUpgradeProgressInfo",
        type: {
            name: "Composite",
            className: "RollingUpgradeProgressInfo",
            modelProperties: {
                successfulInstanceCount: {
                    readOnly: true,
                    serializedName: "successfulInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                failedInstanceCount: {
                    readOnly: true,
                    serializedName: "failedInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                inProgressInstanceCount: {
                    readOnly: true,
                    serializedName: "inProgressInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                pendingInstanceCount: {
                    readOnly: true,
                    serializedName: "pendingInstanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoricalStatusInfoProperties = {
        serializedName: "UpgradeOperationHistoricalStatusInfoProperties",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoricalStatusInfoProperties",
            modelProperties: {
                runningStatus: {
                    readOnly: true,
                    serializedName: "runningStatus",
                    type: {
                        name: "Composite",
                        className: "UpgradeOperationHistoryStatus"
                    }
                },
                progress: {
                    readOnly: true,
                    serializedName: "progress",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeProgressInfo"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                },
                startedBy: {
                    readOnly: true,
                    serializedName: "startedBy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "User",
                            "Platform"
                        ]
                    }
                },
                targetImageReference: {
                    readOnly: true,
                    serializedName: "targetImageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                rollbackInfo: {
                    readOnly: true,
                    serializedName: "rollbackInfo",
                    type: {
                        name: "Composite",
                        className: "RollbackStatusInfo"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoricalStatusInfo = {
        serializedName: "UpgradeOperationHistoricalStatusInfo",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoricalStatusInfo",
            modelProperties: {
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpgradeOperationHistoricalStatusInfoProperties"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMInstanceView = {
        serializedName: "VirtualMachineScaleSetVMInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceView",
            modelProperties: {
                platformUpdateDomain: {
                    serializedName: "platformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                },
                platformFaultDomain: {
                    serializedName: "platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                },
                rdpThumbPrint: {
                    serializedName: "rdpThumbPrint",
                    type: {
                        name: "String"
                    }
                },
                vmAgent: {
                    serializedName: "vmAgent",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineAgentInstanceView"
                    }
                },
                maintenanceRedeployStatus: {
                    serializedName: "maintenanceRedeployStatus",
                    type: {
                        name: "Composite",
                        className: "MaintenanceRedeployStatus"
                    }
                },
                disks: {
                    serializedName: "disks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskInstanceView"
                            }
                        }
                    }
                },
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionInstanceView"
                            }
                        }
                    }
                },
                vmHealth: {
                    readOnly: true,
                    serializedName: "vmHealth",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineHealthStatus"
                    }
                },
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnosticsInstanceView"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                assignedHost: {
                    readOnly: true,
                    serializedName: "assignedHost",
                    type: {
                        name: "String"
                    }
                },
                placementGroupId: {
                    serializedName: "placementGroupId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMNetworkProfileConfiguration = {
        serializedName: "VirtualMachineScaleSetVMNetworkProfileConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMNetworkProfileConfiguration",
            modelProperties: {
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetNetworkConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMProtectionPolicy = {
        serializedName: "VirtualMachineScaleSetVMProtectionPolicy",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMProtectionPolicy",
            modelProperties: {
                protectFromScaleIn: {
                    serializedName: "protectFromScaleIn",
                    type: {
                        name: "Boolean"
                    }
                },
                protectFromScaleSetActions: {
                    serializedName: "protectFromScaleSetActions",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVM = {
        serializedName: "VirtualMachineScaleSetVM",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVM",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { instanceId: {
                    readOnly: true,
                    serializedName: "instanceId",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, latestModelApplied: {
                    readOnly: true,
                    serializedName: "properties.latestModelApplied",
                    type: {
                        name: "Boolean"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMInstanceView"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, securityProfile: {
                    serializedName: "properties.securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, networkProfileConfiguration: {
                    serializedName: "properties.networkProfileConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMNetworkProfileConfiguration"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, modelDefinitionApplied: {
                    readOnly: true,
                    serializedName: "properties.modelDefinitionApplied",
                    type: {
                        name: "String"
                    }
                }, protectionPolicy: {
                    serializedName: "properties.protectionPolicy",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMProtectionPolicy"
                    }
                }, userData: {
                    serializedName: "properties.userData",
                    type: {
                        name: "String"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }, zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var RollingUpgradeRunningStatus = {
        serializedName: "RollingUpgradeRunningStatus",
        type: {
            name: "Composite",
            className: "RollingUpgradeRunningStatus",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RollingForward",
                            "Cancelled",
                            "Completed",
                            "Faulted"
                        ]
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastAction: {
                    readOnly: true,
                    serializedName: "lastAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Start",
                            "Cancel"
                        ]
                    }
                },
                lastActionTime: {
                    readOnly: true,
                    serializedName: "lastActionTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RollingUpgradeStatusInfo = {
        serializedName: "RollingUpgradeStatusInfo",
        type: {
            name: "Composite",
            className: "RollingUpgradeStatusInfo",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { policy: {
                    readOnly: true,
                    serializedName: "properties.policy",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradePolicy"
                    }
                }, runningStatus: {
                    readOnly: true,
                    serializedName: "properties.runningStatus",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeRunningStatus"
                    }
                }, progress: {
                    readOnly: true,
                    serializedName: "properties.progress",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeProgressInfo"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                } })
        }
    };
    var RecoveryWalkResponse = {
        serializedName: "RecoveryWalkResponse",
        type: {
            name: "Composite",
            className: "RecoveryWalkResponse",
            modelProperties: {
                walkPerformed: {
                    readOnly: true,
                    serializedName: "walkPerformed",
                    type: {
                        name: "Boolean"
                    }
                },
                nextPlatformUpdateDomain: {
                    readOnly: true,
                    serializedName: "nextPlatformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LogAnalyticsInputBase = {
        serializedName: "LogAnalyticsInputBase",
        type: {
            name: "Composite",
            className: "LogAnalyticsInputBase",
            modelProperties: {
                blobContainerSasUri: {
                    required: true,
                    serializedName: "blobContainerSasUri",
                    type: {
                        name: "String"
                    }
                },
                fromTime: {
                    required: true,
                    serializedName: "fromTime",
                    type: {
                        name: "DateTime"
                    }
                },
                toTime: {
                    required: true,
                    serializedName: "toTime",
                    type: {
                        name: "DateTime"
                    }
                },
                groupByThrottlePolicy: {
                    serializedName: "groupByThrottlePolicy",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByOperationName: {
                    serializedName: "groupByOperationName",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByResourceName: {
                    serializedName: "groupByResourceName",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByClientApplicationId: {
                    serializedName: "groupByClientApplicationId",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByUserAgent: {
                    serializedName: "groupByUserAgent",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RequestRateByIntervalInput = {
        serializedName: "RequestRateByIntervalInput",
        type: {
            name: "Composite",
            className: "RequestRateByIntervalInput",
            modelProperties: __assign(__assign({}, LogAnalyticsInputBase.type.modelProperties), { intervalLength: {
                    required: true,
                    serializedName: "intervalLength",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ThreeMins",
                            "FiveMins",
                            "ThirtyMins",
                            "SixtyMins"
                        ]
                    }
                } })
        }
    };
    var ThrottledRequestsInput = {
        serializedName: "ThrottledRequestsInput",
        type: {
            name: "Composite",
            className: "ThrottledRequestsInput",
            modelProperties: __assign({}, LogAnalyticsInputBase.type.modelProperties)
        }
    };
    var LogAnalyticsOutput = {
        serializedName: "LogAnalyticsOutput",
        type: {
            name: "Composite",
            className: "LogAnalyticsOutput",
            modelProperties: {
                output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogAnalyticsOperationResult = {
        serializedName: "LogAnalyticsOperationResult",
        type: {
            name: "Composite",
            className: "LogAnalyticsOperationResult",
            modelProperties: {
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "LogAnalyticsOutput"
                    }
                }
            }
        }
    };
    var VMScaleSetConvertToSinglePlacementGroupInput = {
        serializedName: "VMScaleSetConvertToSinglePlacementGroupInput",
        type: {
            name: "Composite",
            className: "VMScaleSetConvertToSinglePlacementGroupInput",
            modelProperties: {
                activePlacementGroupId: {
                    serializedName: "activePlacementGroupId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OrchestrationServiceStateInput = {
        serializedName: "OrchestrationServiceStateInput",
        type: {
            name: "Composite",
            className: "OrchestrationServiceStateInput",
            modelProperties: {
                serviceName: {
                    required: true,
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandInputParameter = {
        serializedName: "RunCommandInputParameter",
        type: {
            name: "Composite",
            className: "RunCommandInputParameter",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandInput = {
        serializedName: "RunCommandInput",
        type: {
            name: "Composite",
            className: "RunCommandInput",
            modelProperties: {
                commandId: {
                    required: true,
                    serializedName: "commandId",
                    type: {
                        name: "String"
                    }
                },
                script: {
                    serializedName: "script",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunCommandParameterDefinition = {
        serializedName: "RunCommandParameterDefinition",
        type: {
            name: "Composite",
            className: "RunCommandParameterDefinition",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                },
                required: {
                    serializedName: "required",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RunCommandDocumentBase = {
        serializedName: "RunCommandDocumentBase",
        type: {
            name: "Composite",
            className: "RunCommandDocumentBase",
            modelProperties: {
                schema: {
                    required: true,
                    serializedName: "$schema",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                label: {
                    required: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    required: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandDocument = {
        serializedName: "RunCommandDocument",
        type: {
            name: "Composite",
            className: "RunCommandDocument",
            modelProperties: __assign(__assign({}, RunCommandDocumentBase.type.modelProperties), { script: {
                    required: true,
                    serializedName: "script",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandParameterDefinition"
                            }
                        }
                    }
                } })
        }
    };
    var RunCommandResult = {
        serializedName: "RunCommandResult",
        type: {
            name: "Composite",
            className: "RunCommandResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineRunCommandInstanceView = {
        serializedName: "VirtualMachineRunCommandInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineRunCommandInstanceView",
            modelProperties: {
                executionState: {
                    serializedName: "executionState",
                    type: {
                        name: "String"
                    }
                },
                executionMessage: {
                    serializedName: "executionMessage",
                    type: {
                        name: "String"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                output: {
                    serializedName: "output",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineRunCommandScriptSource = {
        serializedName: "VirtualMachineRunCommandScriptSource",
        type: {
            name: "Composite",
            className: "VirtualMachineRunCommandScriptSource",
            modelProperties: {
                script: {
                    serializedName: "script",
                    type: {
                        name: "String"
                    }
                },
                scriptUri: {
                    serializedName: "scriptUri",
                    type: {
                        name: "String"
                    }
                },
                commandId: {
                    serializedName: "commandId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineRunCommand = {
        serializedName: "VirtualMachineRunCommand",
        type: {
            name: "Composite",
            className: "VirtualMachineRunCommand",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { source: {
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineRunCommandScriptSource"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }, protectedParameters: {
                    serializedName: "properties.protectedParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }, asyncExecution: {
                    serializedName: "properties.asyncExecution",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, runAsUser: {
                    serializedName: "properties.runAsUser",
                    type: {
                        name: "String"
                    }
                }, runAsPassword: {
                    serializedName: "properties.runAsPassword",
                    type: {
                        name: "String"
                    }
                }, timeoutInSeconds: {
                    serializedName: "properties.timeoutInSeconds",
                    type: {
                        name: "Number"
                    }
                }, outputBlobUri: {
                    serializedName: "properties.outputBlobUri",
                    type: {
                        name: "String"
                    }
                }, errorBlobUri: {
                    serializedName: "properties.errorBlobUri",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineRunCommandInstanceView"
                    }
                } })
        }
    };
    var VirtualMachineRunCommandUpdate = {
        serializedName: "VirtualMachineRunCommandUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineRunCommandUpdate",
            modelProperties: __assign(__assign({}, UpdateResource.type.modelProperties), { source: {
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineRunCommandScriptSource"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }, protectedParameters: {
                    serializedName: "properties.protectedParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }, asyncExecution: {
                    serializedName: "properties.asyncExecution",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, runAsUser: {
                    serializedName: "properties.runAsUser",
                    type: {
                        name: "String"
                    }
                }, runAsPassword: {
                    serializedName: "properties.runAsPassword",
                    type: {
                        name: "String"
                    }
                }, timeoutInSeconds: {
                    serializedName: "properties.timeoutInSeconds",
                    type: {
                        name: "Number"
                    }
                }, outputBlobUri: {
                    serializedName: "properties.outputBlobUri",
                    type: {
                        name: "String"
                    }
                }, errorBlobUri: {
                    serializedName: "properties.errorBlobUri",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineRunCommandInstanceView"
                    }
                } })
        }
    };
    var ResourceSkuCapacity = {
        serializedName: "ResourceSkuCapacity",
        type: {
            name: "Composite",
            className: "ResourceSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "Manual",
                            "None"
                        ]
                    }
                }
            }
        }
    };
    var ResourceSkuCosts = {
        serializedName: "ResourceSkuCosts",
        type: {
            name: "Composite",
            className: "ResourceSkuCosts",
            modelProperties: {
                meterID: {
                    readOnly: true,
                    serializedName: "meterID",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    readOnly: true,
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                extendedUnit: {
                    readOnly: true,
                    serializedName: "extendedUnit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapabilities = {
        serializedName: "ResourceSkuCapabilities",
        type: {
            name: "Composite",
            className: "ResourceSkuCapabilities",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuZoneDetails = {
        serializedName: "ResourceSkuZoneDetails",
        type: {
            name: "Composite",
            className: "ResourceSkuZoneDetails",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCapabilities"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictionInfo = {
        serializedName: "ResourceSkuRestrictionInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictionInfo",
            modelProperties: {
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictions = {
        serializedName: "ResourceSkuRestrictions",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictions",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Location",
                            "Zone"
                        ]
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                restrictionInfo: {
                    readOnly: true,
                    serializedName: "restrictionInfo",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuRestrictionInfo"
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "QuotaId",
                            "NotAvailableForSubscription"
                        ]
                    }
                }
            }
        }
    };
    var ResourceSkuLocationInfo = {
        serializedName: "ResourceSkuLocationInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuLocationInfo",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zoneDetails: {
                    readOnly: true,
                    serializedName: "zoneDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuZoneDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    readOnly: true,
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    readOnly: true,
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuCapacity"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locationInfo: {
                    readOnly: true,
                    serializedName: "locationInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuLocationInfo"
                            }
                        }
                    }
                },
                apiVersions: {
                    readOnly: true,
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                costs: {
                    readOnly: true,
                    serializedName: "costs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCosts"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCapabilities"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProxyOnlyResource = {
        serializedName: "ProxyOnlyResource",
        type: {
            name: "Composite",
            className: "ProxyOnlyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskSku = {
        serializedName: "DiskSku",
        type: {
            name: "Composite",
            className: "DiskSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDiskReference = {
        serializedName: "ImageDiskReference",
        type: {
            name: "Composite",
            className: "ImageDiskReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lun: {
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreationData = {
        serializedName: "CreationData",
        type: {
            name: "Composite",
            className: "CreationData",
            modelProperties: {
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageDiskReference"
                    }
                },
                galleryImageReference: {
                    serializedName: "galleryImageReference",
                    type: {
                        name: "Composite",
                        className: "ImageDiskReference"
                    }
                },
                sourceUri: {
                    serializedName: "sourceUri",
                    type: {
                        name: "String"
                    }
                },
                sourceResourceId: {
                    serializedName: "sourceResourceId",
                    type: {
                        name: "String"
                    }
                },
                sourceUniqueId: {
                    readOnly: true,
                    serializedName: "sourceUniqueId",
                    type: {
                        name: "String"
                    }
                },
                uploadSizeBytes: {
                    serializedName: "uploadSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                logicalSectorSize: {
                    serializedName: "logicalSectorSize",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SourceVault = {
        serializedName: "SourceVault",
        type: {
            name: "Composite",
            className: "SourceVault",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultAndSecretReference = {
        serializedName: "KeyVaultAndSecretReference",
        type: {
            name: "Composite",
            className: "KeyVaultAndSecretReference",
            modelProperties: {
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SourceVault"
                    }
                },
                secretUrl: {
                    required: true,
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultAndKeyReference = {
        serializedName: "KeyVaultAndKeyReference",
        type: {
            name: "Composite",
            className: "KeyVaultAndKeyReference",
            modelProperties: {
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SourceVault"
                    }
                },
                keyUrl: {
                    required: true,
                    serializedName: "keyUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionSettingsElement = {
        serializedName: "EncryptionSettingsElement",
        type: {
            name: "Composite",
            className: "EncryptionSettingsElement",
            modelProperties: {
                diskEncryptionKey: {
                    serializedName: "diskEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultAndSecretReference"
                    }
                },
                keyEncryptionKey: {
                    serializedName: "keyEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultAndKeyReference"
                    }
                }
            }
        }
    };
    var EncryptionSettingsCollection = {
        serializedName: "EncryptionSettingsCollection",
        type: {
            name: "Composite",
            className: "EncryptionSettingsCollection",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EncryptionSettingsElement"
                            }
                        }
                    }
                },
                encryptionSettingsVersion: {
                    serializedName: "encryptionSettingsVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Encryption = {
        serializedName: "Encryption",
        type: {
            name: "Composite",
            className: "Encryption",
            modelProperties: {
                diskEncryptionSetId: {
                    serializedName: "diskEncryptionSetId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ShareInfoElement = {
        serializedName: "ShareInfoElement",
        type: {
            name: "Composite",
            className: "ShareInfoElement",
            modelProperties: {
                vmUri: {
                    readOnly: true,
                    serializedName: "vmUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PropertyUpdatesInProgress = {
        serializedName: "PropertyUpdatesInProgress",
        type: {
            name: "Composite",
            className: "PropertyUpdatesInProgress",
            modelProperties: {
                targetTier: {
                    serializedName: "targetTier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskSecurityProfile = {
        serializedName: "DiskSecurityProfile",
        type: {
            name: "Composite",
            className: "DiskSecurityProfile",
            modelProperties: {
                securityType: {
                    serializedName: "securityType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Disk = {
        serializedName: "Disk",
        type: {
            name: "Composite",
            className: "Disk",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, managedByExtended: {
                    readOnly: true,
                    serializedName: "managedByExtended",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "DiskSku"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                }, timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, creationData: {
                    required: true,
                    serializedName: "properties.creationData",
                    type: {
                        name: "Composite",
                        className: "CreationData"
                    }
                }, diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                }, diskSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.diskSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, uniqueId: {
                    readOnly: true,
                    serializedName: "properties.uniqueId",
                    type: {
                        name: "String"
                    }
                }, encryptionSettingsCollection: {
                    serializedName: "properties.encryptionSettingsCollection",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettingsCollection"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, diskIOPSReadWrite: {
                    serializedName: "properties.diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                }, diskMBpsReadWrite: {
                    serializedName: "properties.diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                }, diskIOPSReadOnly: {
                    serializedName: "properties.diskIOPSReadOnly",
                    type: {
                        name: "Number"
                    }
                }, diskMBpsReadOnly: {
                    serializedName: "properties.diskMBpsReadOnly",
                    type: {
                        name: "Number"
                    }
                }, diskState: {
                    serializedName: "properties.diskState",
                    type: {
                        name: "String"
                    }
                }, encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                }, maxShares: {
                    serializedName: "properties.maxShares",
                    type: {
                        name: "Number"
                    }
                }, shareInfo: {
                    readOnly: true,
                    serializedName: "properties.shareInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ShareInfoElement"
                            }
                        }
                    }
                }, networkAccessPolicy: {
                    serializedName: "properties.networkAccessPolicy",
                    type: {
                        name: "String"
                    }
                }, diskAccessId: {
                    serializedName: "properties.diskAccessId",
                    type: {
                        name: "String"
                    }
                }, tier: {
                    serializedName: "properties.tier",
                    type: {
                        name: "String"
                    }
                }, burstingEnabled: {
                    serializedName: "properties.burstingEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, propertyUpdatesInProgress: {
                    readOnly: true,
                    serializedName: "properties.propertyUpdatesInProgress",
                    type: {
                        name: "Composite",
                        className: "PropertyUpdatesInProgress"
                    }
                }, supportsHibernation: {
                    serializedName: "properties.supportsHibernation",
                    type: {
                        name: "Boolean"
                    }
                }, securityProfile: {
                    serializedName: "properties.securityProfile",
                    type: {
                        name: "Composite",
                        className: "DiskSecurityProfile"
                    }
                } })
        }
    };
    var DiskUpdate = {
        serializedName: "DiskUpdate",
        type: {
            name: "Composite",
            className: "DiskUpdate",
            modelProperties: {
                osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                encryptionSettingsCollection: {
                    serializedName: "properties.encryptionSettingsCollection",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettingsCollection"
                    }
                },
                diskIOPSReadWrite: {
                    serializedName: "properties.diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                diskMBpsReadWrite: {
                    serializedName: "properties.diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                diskIOPSReadOnly: {
                    serializedName: "properties.diskIOPSReadOnly",
                    type: {
                        name: "Number"
                    }
                },
                diskMBpsReadOnly: {
                    serializedName: "properties.diskMBpsReadOnly",
                    type: {
                        name: "Number"
                    }
                },
                maxShares: {
                    serializedName: "properties.maxShares",
                    type: {
                        name: "Number"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                networkAccessPolicy: {
                    serializedName: "properties.networkAccessPolicy",
                    type: {
                        name: "String"
                    }
                },
                diskAccessId: {
                    serializedName: "properties.diskAccessId",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "properties.tier",
                    type: {
                        name: "String"
                    }
                },
                burstingEnabled: {
                    serializedName: "properties.burstingEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                },
                propertyUpdatesInProgress: {
                    readOnly: true,
                    serializedName: "properties.propertyUpdatesInProgress",
                    type: {
                        name: "Composite",
                        className: "PropertyUpdatesInProgress"
                    }
                },
                supportsHibernation: {
                    serializedName: "properties.supportsHibernation",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "DiskSku"
                    }
                }
            }
        }
    };
    var SnapshotSku = {
        serializedName: "SnapshotSku",
        type: {
            name: "Composite",
            className: "SnapshotSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyForDiskEncryptionSet = {
        serializedName: "KeyForDiskEncryptionSet",
        type: {
            name: "Composite",
            className: "KeyForDiskEncryptionSet",
            modelProperties: {
                sourceVault: {
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SourceVault"
                    }
                },
                keyUrl: {
                    required: true,
                    serializedName: "keyUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GrantAccessData = {
        serializedName: "GrantAccessData",
        type: {
            name: "Composite",
            className: "GrantAccessData",
            modelProperties: {
                access: {
                    required: true,
                    serializedName: "access",
                    type: {
                        name: "String"
                    }
                },
                durationInSeconds: {
                    required: true,
                    serializedName: "durationInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AccessUri = {
        serializedName: "AccessUri",
        type: {
            name: "Composite",
            className: "AccessUri",
            modelProperties: {
                accessSAS: {
                    readOnly: true,
                    serializedName: "accessSAS",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Snapshot = {
        serializedName: "Snapshot",
        type: {
            name: "Composite",
            className: "Snapshot",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SnapshotSku"
                    }
                }, extendedLocation: {
                    serializedName: "extendedLocation",
                    type: {
                        name: "Composite",
                        className: "ExtendedLocation"
                    }
                }, timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, creationData: {
                    required: true,
                    serializedName: "properties.creationData",
                    type: {
                        name: "Composite",
                        className: "CreationData"
                    }
                }, diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                }, diskSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.diskSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, diskState: {
                    serializedName: "properties.diskState",
                    type: {
                        name: "String"
                    }
                }, uniqueId: {
                    readOnly: true,
                    serializedName: "properties.uniqueId",
                    type: {
                        name: "String"
                    }
                }, encryptionSettingsCollection: {
                    serializedName: "properties.encryptionSettingsCollection",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettingsCollection"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, incremental: {
                    serializedName: "properties.incremental",
                    type: {
                        name: "Boolean"
                    }
                }, encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                }, networkAccessPolicy: {
                    serializedName: "properties.networkAccessPolicy",
                    type: {
                        name: "String"
                    }
                }, diskAccessId: {
                    serializedName: "properties.diskAccessId",
                    type: {
                        name: "String"
                    }
                }, supportsHibernation: {
                    serializedName: "properties.supportsHibernation",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var SnapshotUpdate = {
        serializedName: "SnapshotUpdate",
        type: {
            name: "Composite",
            className: "SnapshotUpdate",
            modelProperties: {
                osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                encryptionSettingsCollection: {
                    serializedName: "properties.encryptionSettingsCollection",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettingsCollection"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                networkAccessPolicy: {
                    serializedName: "properties.networkAccessPolicy",
                    type: {
                        name: "String"
                    }
                },
                diskAccessId: {
                    serializedName: "properties.diskAccessId",
                    type: {
                        name: "String"
                    }
                },
                supportsHibernation: {
                    serializedName: "properties.supportsHibernation",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SnapshotSku"
                    }
                }
            }
        }
    };
    var EncryptionSetIdentity = {
        serializedName: "EncryptionSetIdentity",
        type: {
            name: "Composite",
            className: "EncryptionSetIdentity",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskEncryptionSet = {
        serializedName: "DiskEncryptionSet",
        type: {
            name: "Composite",
            className: "DiskEncryptionSet",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "EncryptionSetIdentity"
                    }
                }, encryptionType: {
                    serializedName: "properties.encryptionType",
                    type: {
                        name: "String"
                    }
                }, activeKey: {
                    serializedName: "properties.activeKey",
                    type: {
                        name: "Composite",
                        className: "KeyForDiskEncryptionSet"
                    }
                }, previousKeys: {
                    readOnly: true,
                    serializedName: "properties.previousKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyForDiskEncryptionSet"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, rotationToLatestKeyVersionEnabled: {
                    serializedName: "properties.rotationToLatestKeyVersionEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, lastKeyRotationTimestamp: {
                    readOnly: true,
                    serializedName: "properties.lastKeyRotationTimestamp",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var DiskEncryptionSetUpdate = {
        serializedName: "DiskEncryptionSetUpdate",
        type: {
            name: "Composite",
            className: "DiskEncryptionSetUpdate",
            modelProperties: {
                encryptionType: {
                    serializedName: "properties.encryptionType",
                    type: {
                        name: "String"
                    }
                },
                activeKey: {
                    serializedName: "properties.activeKey",
                    type: {
                        name: "Composite",
                        className: "KeyForDiskEncryptionSet"
                    }
                },
                rotationToLatestKeyVersionEnabled: {
                    serializedName: "properties.rotationToLatestKeyVersionEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "EncryptionSetIdentity"
                    }
                }
            }
        }
    };
    var PrivateEndpoint = {
        serializedName: "PrivateEndpoint",
        type: {
            name: "Composite",
            className: "PrivateEndpoint",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkServiceConnectionState = {
        serializedName: "PrivateLinkServiceConnectionState",
        type: {
            name: "Composite",
            className: "PrivateLinkServiceConnectionState",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                actionsRequired: {
                    serializedName: "actionsRequired",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnection = {
        serializedName: "PrivateEndpointConnection",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnection",
            modelProperties: {
                privateEndpoint: {
                    readOnly: true,
                    serializedName: "properties.privateEndpoint",
                    type: {
                        name: "Composite",
                        className: "PrivateEndpoint"
                    }
                },
                privateLinkServiceConnectionState: {
                    required: true,
                    serializedName: "properties.privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkServiceConnectionState"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskAccess = {
        serializedName: "DiskAccess",
        type: {
            name: "Composite",
            className: "DiskAccess",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { privateEndpointConnections: {
                    readOnly: true,
                    serializedName: "properties.privateEndpointConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var DiskAccessUpdate = {
        serializedName: "DiskAccessUpdate",
        type: {
            name: "Composite",
            className: "DiskAccessUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateLinkResource = {
        serializedName: "PrivateLinkResource",
        type: {
            name: "Composite",
            className: "PrivateLinkResource",
            modelProperties: {
                groupId: {
                    readOnly: true,
                    serializedName: "properties.groupId",
                    type: {
                        name: "String"
                    }
                },
                requiredMembers: {
                    readOnly: true,
                    serializedName: "properties.requiredMembers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                requiredZoneNames: {
                    serializedName: "properties.requiredZoneNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskRestorePoint = {
        serializedName: "DiskRestorePoint",
        type: {
            name: "Composite",
            className: "DiskRestorePoint",
            modelProperties: __assign(__assign({}, ProxyOnlyResource.type.modelProperties), { timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                }, sourceResourceId: {
                    readOnly: true,
                    serializedName: "properties.sourceResourceId",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    readOnly: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, familyId: {
                    readOnly: true,
                    serializedName: "properties.familyId",
                    type: {
                        name: "String"
                    }
                }, sourceUniqueId: {
                    readOnly: true,
                    serializedName: "properties.sourceUniqueId",
                    type: {
                        name: "String"
                    }
                }, encryption: {
                    readOnly: true,
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                }, supportsHibernation: {
                    serializedName: "properties.supportsHibernation",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var PrivateLinkResourceListResult = {
        serializedName: "PrivateLinkResourceListResult",
        type: {
            name: "Composite",
            className: "PrivateLinkResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateLinkResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var GalleryIdentifier = {
        serializedName: "GalleryIdentifier",
        type: {
            name: "Composite",
            className: "GalleryIdentifier",
            modelProperties: {
                uniqueName: {
                    readOnly: true,
                    serializedName: "uniqueName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharingProfileGroup = {
        serializedName: "SharingProfileGroup",
        type: {
            name: "Composite",
            className: "SharingProfileGroup",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                ids: {
                    serializedName: "ids",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SharingProfile = {
        serializedName: "SharingProfile",
        type: {
            name: "Composite",
            className: "SharingProfile",
            modelProperties: {
                permissions: {
                    serializedName: "permissions",
                    type: {
                        name: "String"
                    }
                },
                groups: {
                    readOnly: true,
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharingProfileGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var Gallery = {
        serializedName: "Gallery",
        type: {
            name: "Composite",
            className: "Gallery",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, identifier: {
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryIdentifier"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, sharingProfile: {
                    serializedName: "properties.sharingProfile",
                    type: {
                        name: "Composite",
                        className: "SharingProfile"
                    }
                } })
        }
    };
    var UpdateResourceDefinition = {
        serializedName: "UpdateResourceDefinition",
        type: {
            name: "Composite",
            className: "UpdateResourceDefinition",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GalleryUpdate = {
        serializedName: "GalleryUpdate",
        type: {
            name: "Composite",
            className: "GalleryUpdate",
            modelProperties: __assign(__assign({}, UpdateResourceDefinition.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, identifier: {
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryIdentifier"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, sharingProfile: {
                    serializedName: "properties.sharingProfile",
                    type: {
                        name: "Composite",
                        className: "SharingProfile"
                    }
                } })
        }
    };
    var GalleryApplication = {
        serializedName: "GalleryApplication",
        type: {
            name: "Composite",
            className: "GalleryApplication",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, eula: {
                    serializedName: "properties.eula",
                    type: {
                        name: "String"
                    }
                }, privacyStatementUri: {
                    serializedName: "properties.privacyStatementUri",
                    type: {
                        name: "String"
                    }
                }, releaseNoteUri: {
                    serializedName: "properties.releaseNoteUri",
                    type: {
                        name: "String"
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, supportedOSType: {
                    required: true,
                    serializedName: "properties.supportedOSType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                } })
        }
    };
    var GalleryApplicationUpdate = {
        serializedName: "GalleryApplicationUpdate",
        type: {
            name: "Composite",
            className: "GalleryApplicationUpdate",
            modelProperties: __assign(__assign({}, UpdateResourceDefinition.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, eula: {
                    serializedName: "properties.eula",
                    type: {
                        name: "String"
                    }
                }, privacyStatementUri: {
                    serializedName: "properties.privacyStatementUri",
                    type: {
                        name: "String"
                    }
                }, releaseNoteUri: {
                    serializedName: "properties.releaseNoteUri",
                    type: {
                        name: "String"
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, supportedOSType: {
                    required: true,
                    serializedName: "properties.supportedOSType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                } })
        }
    };
    var UserArtifactSource = {
        serializedName: "UserArtifactSource",
        type: {
            name: "Composite",
            className: "UserArtifactSource",
            modelProperties: {
                mediaLink: {
                    required: true,
                    serializedName: "mediaLink",
                    type: {
                        name: "String"
                    }
                },
                defaultConfigurationLink: {
                    serializedName: "defaultConfigurationLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserArtifactManage = {
        serializedName: "UserArtifactManage",
        type: {
            name: "Composite",
            className: "UserArtifactManage",
            modelProperties: {
                install: {
                    required: true,
                    serializedName: "install",
                    type: {
                        name: "String"
                    }
                },
                remove: {
                    required: true,
                    serializedName: "remove",
                    type: {
                        name: "String"
                    }
                },
                update: {
                    serializedName: "update",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryArtifactPublishingProfileBase = {
        serializedName: "GalleryArtifactPublishingProfileBase",
        type: {
            name: "Composite",
            className: "GalleryArtifactPublishingProfileBase",
            modelProperties: {
                targetRegions: {
                    serializedName: "targetRegions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TargetRegion"
                            }
                        }
                    }
                },
                replicaCount: {
                    serializedName: "replicaCount",
                    type: {
                        name: "Number"
                    }
                },
                excludeFromLatest: {
                    serializedName: "excludeFromLatest",
                    type: {
                        name: "Boolean"
                    }
                },
                publishedDate: {
                    readOnly: true,
                    serializedName: "publishedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                endOfLifeDate: {
                    serializedName: "endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryApplicationVersionPublishingProfile = {
        serializedName: "GalleryApplicationVersionPublishingProfile",
        type: {
            name: "Composite",
            className: "GalleryApplicationVersionPublishingProfile",
            modelProperties: __assign(__assign({}, GalleryArtifactPublishingProfileBase.type.modelProperties), { source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "UserArtifactSource"
                    }
                }, manageActions: {
                    serializedName: "manageActions",
                    type: {
                        name: "Composite",
                        className: "UserArtifactManage"
                    }
                }, enableHealthCheck: {
                    serializedName: "enableHealthCheck",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var RegionalReplicationStatus = {
        serializedName: "RegionalReplicationStatus",
        type: {
            name: "Composite",
            className: "RegionalReplicationStatus",
            modelProperties: {
                region: {
                    readOnly: true,
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                },
                progress: {
                    readOnly: true,
                    serializedName: "progress",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ReplicationStatus = {
        serializedName: "ReplicationStatus",
        type: {
            name: "Composite",
            className: "ReplicationStatus",
            modelProperties: {
                aggregatedState: {
                    readOnly: true,
                    serializedName: "aggregatedState",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    readOnly: true,
                    serializedName: "summary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegionalReplicationStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var GalleryApplicationVersion = {
        serializedName: "GalleryApplicationVersion",
        type: {
            name: "Composite",
            className: "GalleryApplicationVersion",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { publishingProfile: {
                    required: true,
                    serializedName: "properties.publishingProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryApplicationVersionPublishingProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, replicationStatus: {
                    readOnly: true,
                    serializedName: "properties.replicationStatus",
                    type: {
                        name: "Composite",
                        className: "ReplicationStatus"
                    }
                } })
        }
    };
    var GalleryApplicationVersionUpdate = {
        serializedName: "GalleryApplicationVersionUpdate",
        type: {
            name: "Composite",
            className: "GalleryApplicationVersionUpdate",
            modelProperties: __assign(__assign({}, UpdateResourceDefinition.type.modelProperties), { publishingProfile: {
                    required: true,
                    serializedName: "properties.publishingProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryApplicationVersionPublishingProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, replicationStatus: {
                    readOnly: true,
                    serializedName: "properties.replicationStatus",
                    type: {
                        name: "Composite",
                        className: "ReplicationStatus"
                    }
                } })
        }
    };
    var GalleryImageIdentifier = {
        serializedName: "GalleryImageIdentifier",
        type: {
            name: "Composite",
            className: "GalleryImageIdentifier",
            modelProperties: {
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    required: true,
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceRange = {
        serializedName: "ResourceRange",
        type: {
            name: "Composite",
            className: "ResourceRange",
            modelProperties: {
                min: {
                    serializedName: "min",
                    type: {
                        name: "Number"
                    }
                },
                max: {
                    serializedName: "max",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedMachineConfiguration = {
        serializedName: "RecommendedMachineConfiguration",
        type: {
            name: "Composite",
            className: "RecommendedMachineConfiguration",
            modelProperties: {
                vCPUs: {
                    serializedName: "vCPUs",
                    type: {
                        name: "Composite",
                        className: "ResourceRange"
                    }
                },
                memory: {
                    serializedName: "memory",
                    type: {
                        name: "Composite",
                        className: "ResourceRange"
                    }
                }
            }
        }
    };
    var Disallowed = {
        serializedName: "Disallowed",
        type: {
            name: "Composite",
            className: "Disallowed",
            modelProperties: {
                diskTypes: {
                    serializedName: "diskTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImagePurchasePlan = {
        serializedName: "ImagePurchasePlan",
        type: {
            name: "Composite",
            className: "ImagePurchasePlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageFeature = {
        serializedName: "GalleryImageFeature",
        type: {
            name: "Composite",
            className: "GalleryImageFeature",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImage = {
        serializedName: "GalleryImage",
        type: {
            name: "Composite",
            className: "GalleryImage",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, eula: {
                    serializedName: "properties.eula",
                    type: {
                        name: "String"
                    }
                }, privacyStatementUri: {
                    serializedName: "properties.privacyStatementUri",
                    type: {
                        name: "String"
                    }
                }, releaseNoteUri: {
                    serializedName: "properties.releaseNoteUri",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, osState: {
                    required: true,
                    serializedName: "properties.osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, identifier: {
                    required: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryImageIdentifier"
                    }
                }, recommended: {
                    serializedName: "properties.recommended",
                    type: {
                        name: "Composite",
                        className: "RecommendedMachineConfiguration"
                    }
                }, disallowed: {
                    serializedName: "properties.disallowed",
                    type: {
                        name: "Composite",
                        className: "Disallowed"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "ImagePurchasePlan"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, features: {
                    serializedName: "properties.features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImageFeature"
                            }
                        }
                    }
                } })
        }
    };
    var GalleryImageUpdate = {
        serializedName: "GalleryImageUpdate",
        type: {
            name: "Composite",
            className: "GalleryImageUpdate",
            modelProperties: __assign(__assign({}, UpdateResourceDefinition.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, eula: {
                    serializedName: "properties.eula",
                    type: {
                        name: "String"
                    }
                }, privacyStatementUri: {
                    serializedName: "properties.privacyStatementUri",
                    type: {
                        name: "String"
                    }
                }, releaseNoteUri: {
                    serializedName: "properties.releaseNoteUri",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, osState: {
                    required: true,
                    serializedName: "properties.osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, identifier: {
                    required: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryImageIdentifier"
                    }
                }, recommended: {
                    serializedName: "properties.recommended",
                    type: {
                        name: "Composite",
                        className: "RecommendedMachineConfiguration"
                    }
                }, disallowed: {
                    serializedName: "properties.disallowed",
                    type: {
                        name: "Composite",
                        className: "Disallowed"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "ImagePurchasePlan"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, features: {
                    serializedName: "properties.features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImageFeature"
                            }
                        }
                    }
                } })
        }
    };
    var GalleryImageVersionPublishingProfile = {
        serializedName: "GalleryImageVersionPublishingProfile",
        type: {
            name: "Composite",
            className: "GalleryImageVersionPublishingProfile",
            modelProperties: __assign({}, GalleryArtifactPublishingProfileBase.type.modelProperties)
        }
    };
    var GalleryArtifactVersionSource = {
        serializedName: "GalleryArtifactVersionSource",
        type: {
            name: "Composite",
            className: "GalleryArtifactVersionSource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryDiskImage = {
        serializedName: "GalleryDiskImage",
        type: {
            name: "Composite",
            className: "GalleryDiskImage",
            modelProperties: {
                sizeInGB: {
                    readOnly: true,
                    serializedName: "sizeInGB",
                    type: {
                        name: "Number"
                    }
                },
                hostCaching: {
                    serializedName: "hostCaching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "GalleryArtifactVersionSource"
                    }
                }
            }
        }
    };
    var GalleryOSDiskImage = {
        serializedName: "GalleryOSDiskImage",
        type: {
            name: "Composite",
            className: "GalleryOSDiskImage",
            modelProperties: __assign({}, GalleryDiskImage.type.modelProperties)
        }
    };
    var GalleryDataDiskImage = {
        serializedName: "GalleryDataDiskImage",
        type: {
            name: "Composite",
            className: "GalleryDataDiskImage",
            modelProperties: __assign(__assign({}, GalleryDiskImage.type.modelProperties), { lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var GalleryImageVersionStorageProfile = {
        serializedName: "GalleryImageVersionStorageProfile",
        type: {
            name: "Composite",
            className: "GalleryImageVersionStorageProfile",
            modelProperties: {
                source: {
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "GalleryArtifactVersionSource"
                    }
                },
                osDiskImage: {
                    serializedName: "osDiskImage",
                    type: {
                        name: "Composite",
                        className: "GalleryOSDiskImage"
                    }
                },
                dataDiskImages: {
                    serializedName: "dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryDataDiskImage"
                            }
                        }
                    }
                }
            }
        }
    };
    var GalleryImageVersion = {
        serializedName: "GalleryImageVersion",
        type: {
            name: "Composite",
            className: "GalleryImageVersion",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { publishingProfile: {
                    serializedName: "properties.publishingProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionPublishingProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, storageProfile: {
                    required: true,
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionStorageProfile"
                    }
                }, replicationStatus: {
                    readOnly: true,
                    serializedName: "properties.replicationStatus",
                    type: {
                        name: "Composite",
                        className: "ReplicationStatus"
                    }
                } })
        }
    };
    var GalleryImageVersionUpdate = {
        serializedName: "GalleryImageVersionUpdate",
        type: {
            name: "Composite",
            className: "GalleryImageVersionUpdate",
            modelProperties: __assign(__assign({}, UpdateResourceDefinition.type.modelProperties), { publishingProfile: {
                    serializedName: "properties.publishingProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionPublishingProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, storageProfile: {
                    required: true,
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionStorageProfile"
                    }
                }, replicationStatus: {
                    readOnly: true,
                    serializedName: "properties.replicationStatus",
                    type: {
                        name: "Composite",
                        className: "ReplicationStatus"
                    }
                } })
        }
    };
    var DiskImageEncryption = {
        serializedName: "DiskImageEncryption",
        type: {
            name: "Composite",
            className: "DiskImageEncryption",
            modelProperties: {
                diskEncryptionSetId: {
                    serializedName: "diskEncryptionSetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDiskImageEncryption = {
        serializedName: "OSDiskImageEncryption",
        type: {
            name: "Composite",
            className: "OSDiskImageEncryption",
            modelProperties: __assign({}, DiskImageEncryption.type.modelProperties)
        }
    };
    var DataDiskImageEncryption = {
        serializedName: "DataDiskImageEncryption",
        type: {
            name: "Composite",
            className: "DataDiskImageEncryption",
            modelProperties: __assign(__assign({}, DiskImageEncryption.type.modelProperties), { lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var EncryptionImages = {
        serializedName: "EncryptionImages",
        type: {
            name: "Composite",
            className: "EncryptionImages",
            modelProperties: {
                osDiskImage: {
                    serializedName: "osDiskImage",
                    type: {
                        name: "Composite",
                        className: "OSDiskImageEncryption"
                    }
                },
                dataDiskImages: {
                    serializedName: "dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDiskImageEncryption"
                            }
                        }
                    }
                }
            }
        }
    };
    var TargetRegion = {
        serializedName: "TargetRegion",
        type: {
            name: "Composite",
            className: "TargetRegion",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                regionalReplicaCount: {
                    serializedName: "regionalReplicaCount",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                },
                encryption: {
                    serializedName: "encryption",
                    type: {
                        name: "Composite",
                        className: "EncryptionImages"
                    }
                }
            }
        }
    };
    var ManagedArtifact = {
        serializedName: "ManagedArtifact",
        type: {
            name: "Composite",
            className: "ManagedArtifact",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryArtifactSource = {
        serializedName: "GalleryArtifactSource",
        type: {
            name: "Composite",
            className: "GalleryArtifactSource",
            modelProperties: {
                managedImage: {
                    required: true,
                    serializedName: "managedImage",
                    type: {
                        name: "Composite",
                        className: "ManagedArtifact"
                    }
                }
            }
        }
    };
    var SharingUpdate = {
        serializedName: "SharingUpdate",
        type: {
            name: "Composite",
            className: "SharingUpdate",
            modelProperties: {
                operationType: {
                    required: true,
                    serializedName: "operationType",
                    type: {
                        name: "String"
                    }
                },
                groups: {
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharingProfileGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var PirResource = {
        serializedName: "PirResource",
        type: {
            name: "Composite",
            className: "PirResource",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PirSharedGalleryResource = {
        serializedName: "PirSharedGalleryResource",
        type: {
            name: "Composite",
            className: "PirSharedGalleryResource",
            modelProperties: __assign(__assign({}, PirResource.type.modelProperties), { uniqueId: {
                    serializedName: "identifier.uniqueId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SharedGallery = {
        serializedName: "SharedGallery",
        type: {
            name: "Composite",
            className: "SharedGallery",
            modelProperties: __assign({}, PirSharedGalleryResource.type.modelProperties)
        }
    };
    var SharedGalleryImage = {
        serializedName: "SharedGalleryImage",
        type: {
            name: "Composite",
            className: "SharedGalleryImage",
            modelProperties: __assign(__assign({}, PirSharedGalleryResource.type.modelProperties), { osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, osState: {
                    required: true,
                    serializedName: "properties.osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, identifier: {
                    required: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryImageIdentifier"
                    }
                }, recommended: {
                    serializedName: "properties.recommended",
                    type: {
                        name: "Composite",
                        className: "RecommendedMachineConfiguration"
                    }
                }, disallowed: {
                    serializedName: "properties.disallowed",
                    type: {
                        name: "Composite",
                        className: "Disallowed"
                    }
                }, hyperVGeneration: {
                    serializedName: "properties.hyperVGeneration",
                    type: {
                        name: "String"
                    }
                }, features: {
                    serializedName: "properties.features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImageFeature"
                            }
                        }
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "ImagePurchasePlan"
                    }
                } })
        }
    };
    var SharedGalleryImageVersion = {
        serializedName: "SharedGalleryImageVersion",
        type: {
            name: "Composite",
            className: "SharedGalleryImageVersion",
            modelProperties: __assign(__assign({}, PirSharedGalleryResource.type.modelProperties), { publishedDate: {
                    serializedName: "properties.publishedDate",
                    type: {
                        name: "DateTime"
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var InstanceSku = {
        serializedName: "InstanceSku",
        type: {
            name: "Composite",
            className: "InstanceSku",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleInstanceNetworkProfile = {
        serializedName: "RoleInstanceNetworkProfile",
        type: {
            name: "Composite",
            className: "RoleInstanceNetworkProfile",
            modelProperties: {
                networkInterfaces: {
                    readOnly: true,
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceInstanceViewStatus = {
        serializedName: "ResourceInstanceViewStatus",
        type: {
            name: "Composite",
            className: "ResourceInstanceViewStatus",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                displayStatus: {
                    readOnly: true,
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    readOnly: true,
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                },
                level: {
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Info",
                            "Warning",
                            "Error"
                        ]
                    }
                }
            }
        }
    };
    var RoleInstanceInstanceView = {
        serializedName: "RoleInstanceInstanceView",
        type: {
            name: "Composite",
            className: "RoleInstanceInstanceView",
            modelProperties: {
                platformUpdateDomain: {
                    readOnly: true,
                    serializedName: "platformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                },
                platformFaultDomain: {
                    readOnly: true,
                    serializedName: "platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                },
                privateId: {
                    readOnly: true,
                    serializedName: "privateId",
                    type: {
                        name: "String"
                    }
                },
                statuses: {
                    readOnly: true,
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceInstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoleInstanceProperties = {
        serializedName: "RoleInstanceProperties",
        type: {
            name: "Composite",
            className: "RoleInstanceProperties",
            modelProperties: {
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "RoleInstanceNetworkProfile"
                    }
                },
                instanceView: {
                    serializedName: "instanceView",
                    type: {
                        name: "Composite",
                        className: "RoleInstanceInstanceView"
                    }
                }
            }
        }
    };
    var RoleInstance = {
        serializedName: "RoleInstance",
        type: {
            name: "Composite",
            className: "RoleInstance",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "InstanceSku"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RoleInstanceProperties"
                    }
                }
            }
        }
    };
    var CloudServiceRoleSku = {
        serializedName: "CloudServiceRoleSku",
        type: {
            name: "Composite",
            className: "CloudServiceRoleSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CloudServiceRoleProperties = {
        serializedName: "CloudServiceRoleProperties",
        type: {
            name: "Composite",
            className: "CloudServiceRoleProperties",
            modelProperties: {
                uniqueId: {
                    readOnly: true,
                    serializedName: "uniqueId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceRole = {
        serializedName: "CloudServiceRole",
        type: {
            name: "Composite",
            className: "CloudServiceRole",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "CloudServiceRoleSku"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CloudServiceRoleProperties"
                    }
                }
            }
        }
    };
    var CloudServiceRoleProfileProperties = {
        serializedName: "CloudServiceRoleProfileProperties",
        type: {
            name: "Composite",
            className: "CloudServiceRoleProfileProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "CloudServiceRoleSku"
                    }
                }
            }
        }
    };
    var CloudServiceRoleProfile = {
        serializedName: "CloudServiceRoleProfile",
        type: {
            name: "Composite",
            className: "CloudServiceRoleProfile",
            modelProperties: {
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudServiceRoleProfileProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudServiceVaultCertificate = {
        serializedName: "CloudServiceVaultCertificate",
        type: {
            name: "Composite",
            className: "CloudServiceVaultCertificate",
            modelProperties: {
                certificateUrl: {
                    serializedName: "certificateUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceVaultSecretGroup = {
        serializedName: "CloudServiceVaultSecretGroup",
        type: {
            name: "Composite",
            className: "CloudServiceVaultSecretGroup",
            modelProperties: {
                sourceVault: {
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                vaultCertificates: {
                    serializedName: "vaultCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudServiceVaultCertificate"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudServiceOsProfile = {
        serializedName: "CloudServiceOsProfile",
        type: {
            name: "Composite",
            className: "CloudServiceOsProfile",
            modelProperties: {
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudServiceVaultSecretGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var LoadBalancerFrontendIPConfigurationProperties = {
        serializedName: "LoadBalancerFrontendIPConfigurationProperties",
        type: {
            name: "Composite",
            className: "LoadBalancerFrontendIPConfigurationProperties",
            modelProperties: {
                publicIPAddress: {
                    serializedName: "publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                privateIPAddress: {
                    serializedName: "privateIPAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerFrontendIPConfiguration = {
        serializedName: "LoadBalancerFrontendIPConfiguration",
        type: {
            name: "Composite",
            className: "LoadBalancerFrontendIPConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "LoadBalancerFrontendIPConfigurationProperties"
                    }
                }
            }
        }
    };
    var LoadBalancerConfigurationProperties = {
        serializedName: "LoadBalancerConfigurationProperties",
        type: {
            name: "Composite",
            className: "LoadBalancerConfigurationProperties",
            modelProperties: {
                frontendIPConfigurations: {
                    required: true,
                    serializedName: "frontendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancerFrontendIPConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var LoadBalancerConfiguration = {
        serializedName: "LoadBalancerConfiguration",
        type: {
            name: "Composite",
            className: "LoadBalancerConfiguration",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "LoadBalancerConfigurationProperties"
                    }
                }
            }
        }
    };
    var CloudServiceNetworkProfile = {
        serializedName: "CloudServiceNetworkProfile",
        type: {
            name: "Composite",
            className: "CloudServiceNetworkProfile",
            modelProperties: {
                loadBalancerConfigurations: {
                    serializedName: "loadBalancerConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancerConfiguration"
                            }
                        }
                    }
                },
                swappableCloudService: {
                    serializedName: "swappableCloudService",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var CloudServiceVaultAndSecretReference = {
        serializedName: "CloudServiceVaultAndSecretReference",
        type: {
            name: "Composite",
            className: "CloudServiceVaultAndSecretReference",
            modelProperties: {
                sourceVault: {
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                secretUrl: {
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceExtensionProperties = {
        serializedName: "CloudServiceExtensionProperties",
        type: {
            name: "Composite",
            className: "CloudServiceExtensionProperties",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                typeHandlerVersion: {
                    serializedName: "typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                },
                autoUpgradeMinorVersion: {
                    serializedName: "autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                },
                settings: {
                    serializedName: "settings",
                    type: {
                        name: "String"
                    }
                },
                protectedSettings: {
                    serializedName: "protectedSettings",
                    type: {
                        name: "String"
                    }
                },
                protectedSettingsFromKeyVault: {
                    serializedName: "protectedSettingsFromKeyVault",
                    type: {
                        name: "Composite",
                        className: "CloudServiceVaultAndSecretReference"
                    }
                },
                forceUpdateTag: {
                    serializedName: "forceUpdateTag",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                rolesAppliedTo: {
                    serializedName: "rolesAppliedTo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Extension = {
        serializedName: "Extension",
        type: {
            name: "Composite",
            className: "Extension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CloudServiceExtensionProperties"
                    }
                }
            }
        }
    };
    var CloudServiceExtensionProfile = {
        serializedName: "CloudServiceExtensionProfile",
        type: {
            name: "Composite",
            className: "CloudServiceExtensionProfile",
            modelProperties: {
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Extension"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudServiceProperties = {
        serializedName: "CloudServiceProperties",
        type: {
            name: "Composite",
            className: "CloudServiceProperties",
            modelProperties: {
                packageUrl: {
                    serializedName: "packageUrl",
                    type: {
                        name: "String"
                    }
                },
                configuration: {
                    serializedName: "configuration",
                    type: {
                        name: "String"
                    }
                },
                configurationUrl: {
                    serializedName: "configurationUrl",
                    type: {
                        name: "String"
                    }
                },
                startCloudService: {
                    serializedName: "startCloudService",
                    type: {
                        name: "Boolean"
                    }
                },
                allowModelOverride: {
                    serializedName: "allowModelOverride",
                    type: {
                        name: "Boolean"
                    }
                },
                upgradeMode: {
                    serializedName: "upgradeMode",
                    type: {
                        name: "String"
                    }
                },
                roleProfile: {
                    serializedName: "roleProfile",
                    type: {
                        name: "Composite",
                        className: "CloudServiceRoleProfile"
                    }
                },
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "CloudServiceOsProfile"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "CloudServiceNetworkProfile"
                    }
                },
                extensionProfile: {
                    serializedName: "extensionProfile",
                    type: {
                        name: "Composite",
                        className: "CloudServiceExtensionProfile"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                uniqueId: {
                    readOnly: true,
                    serializedName: "uniqueId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudService = {
        serializedName: "CloudService",
        type: {
            name: "Composite",
            className: "CloudService",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CloudServiceProperties"
                    }
                }
            }
        }
    };
    var CloudServiceUpdate = {
        serializedName: "CloudServiceUpdate",
        type: {
            name: "Composite",
            className: "CloudServiceUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StatusCodeCount = {
        serializedName: "StatusCodeCount",
        type: {
            name: "Composite",
            className: "StatusCodeCount",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var InstanceViewStatusesSummary = {
        serializedName: "InstanceViewStatusesSummary",
        type: {
            name: "Composite",
            className: "InstanceViewStatusesSummary",
            modelProperties: {
                statusesSummary: {
                    readOnly: true,
                    serializedName: "statusesSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StatusCodeCount"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudServiceInstanceView = {
        serializedName: "CloudServiceInstanceView",
        type: {
            name: "Composite",
            className: "CloudServiceInstanceView",
            modelProperties: {
                roleInstance: {
                    serializedName: "roleInstance",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatusesSummary"
                    }
                },
                sdkVersion: {
                    readOnly: true,
                    serializedName: "sdkVersion",
                    type: {
                        name: "String"
                    }
                },
                privateIds: {
                    readOnly: true,
                    serializedName: "privateIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                statuses: {
                    readOnly: true,
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceInstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoleInstances = {
        serializedName: "RoleInstances",
        type: {
            name: "Composite",
            className: "RoleInstances",
            modelProperties: {
                roleInstances: {
                    required: true,
                    serializedName: "roleInstances",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateDomain = {
        serializedName: "UpdateDomain",
        type: {
            name: "Composite",
            className: "UpdateDomain",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSVersionProperties = {
        serializedName: "OSVersionProperties",
        type: {
            name: "Composite",
            className: "OSVersionProperties",
            modelProperties: {
                family: {
                    readOnly: true,
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                familyLabel: {
                    readOnly: true,
                    serializedName: "familyLabel",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    readOnly: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    readOnly: true,
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isActive: {
                    readOnly: true,
                    serializedName: "isActive",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var OSVersion = {
        serializedName: "OSVersion",
        type: {
            name: "Composite",
            className: "OSVersion",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "OSVersionProperties"
                    }
                }
            }
        }
    };
    var OSVersionPropertiesBase = {
        serializedName: "OSVersionPropertiesBase",
        type: {
            name: "Composite",
            className: "OSVersionPropertiesBase",
            modelProperties: {
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    readOnly: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    readOnly: true,
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isActive: {
                    readOnly: true,
                    serializedName: "isActive",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var OSFamilyProperties = {
        serializedName: "OSFamilyProperties",
        type: {
            name: "Composite",
            className: "OSFamilyProperties",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    readOnly: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                versions: {
                    readOnly: true,
                    serializedName: "versions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OSVersionPropertiesBase"
                            }
                        }
                    }
                }
            }
        }
    };
    var OSFamily = {
        serializedName: "OSFamily",
        type: {
            name: "Composite",
            className: "OSFamily",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "OSFamilyProperties"
                    }
                }
            }
        }
    };
    var ComputeOperationListResult = {
        serializedName: "ComputeOperationListResult",
        type: {
            name: "Composite",
            className: "ComputeOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeOperationValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailabilitySetListResult = {
        serializedName: "AvailabilitySetListResult",
        type: {
            name: "Composite",
            className: "AvailabilitySetListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailabilitySet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineSizeListResult = {
        serializedName: "VirtualMachineSizeListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineSizeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineSize"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProximityPlacementGroupListResult = {
        serializedName: "ProximityPlacementGroupListResult",
        type: {
            name: "Composite",
            className: "ProximityPlacementGroupListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProximityPlacementGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DedicatedHostGroupListResult = {
        serializedName: "DedicatedHostGroupListResult",
        type: {
            name: "Composite",
            className: "DedicatedHostGroupListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DedicatedHostGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DedicatedHostListResult = {
        serializedName: "DedicatedHostListResult",
        type: {
            name: "Composite",
            className: "DedicatedHostListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DedicatedHost"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshPublicKeysGroupListResult = {
        serializedName: "SshPublicKeysGroupListResult",
        type: {
            name: "Composite",
            className: "SshPublicKeysGroupListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SshPublicKeyResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListUsagesResult = {
        serializedName: "ListUsagesResult",
        type: {
            name: "Composite",
            className: "ListUsagesResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineListResult = {
        serializedName: "VirtualMachineListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachine"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListResult = {
        serializedName: "VirtualMachineScaleSetListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListWithLinkResult = {
        serializedName: "VirtualMachineScaleSetListWithLinkResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListWithLinkResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListSkusResult = {
        serializedName: "VirtualMachineScaleSetListSkusResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListOSUpgradeHistory = {
        serializedName: "VirtualMachineScaleSetListOSUpgradeHistory",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListOSUpgradeHistory",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpgradeOperationHistoricalStatusInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageListResult = {
        serializedName: "ImageListResult",
        type: {
            name: "Composite",
            className: "ImageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePointCollectionListResult = {
        serializedName: "RestorePointCollectionListResult",
        type: {
            name: "Composite",
            className: "RestorePointCollectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePointCollection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapacityReservationGroupListResult = {
        serializedName: "CapacityReservationGroupListResult",
        type: {
            name: "Composite",
            className: "CapacityReservationGroupListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CapacityReservationGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapacityReservationListResult = {
        serializedName: "CapacityReservationListResult",
        type: {
            name: "Composite",
            className: "CapacityReservationListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CapacityReservation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetExtensionListResult = {
        serializedName: "VirtualMachineScaleSetExtensionListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtensionListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetExtension"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMListResult = {
        serializedName: "VirtualMachineScaleSetVMListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetVM"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandListResult = {
        serializedName: "RunCommandListResult",
        type: {
            name: "Composite",
            className: "RunCommandListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandDocumentBase"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineRunCommandsListResult = {
        serializedName: "VirtualMachineRunCommandsListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineRunCommandsListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineRunCommand"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkusResult = {
        serializedName: "ResourceSkusResult",
        type: {
            name: "Composite",
            className: "ResourceSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskList = {
        serializedName: "DiskList",
        type: {
            name: "Composite",
            className: "DiskList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Disk"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotList = {
        serializedName: "SnapshotList",
        type: {
            name: "Composite",
            className: "SnapshotList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Snapshot"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskEncryptionSetList = {
        serializedName: "DiskEncryptionSetList",
        type: {
            name: "Composite",
            className: "DiskEncryptionSetList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskEncryptionSet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceUriList = {
        serializedName: "ResourceUriList",
        type: {
            name: "Composite",
            className: "ResourceUriList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskAccessList = {
        serializedName: "DiskAccessList",
        type: {
            name: "Composite",
            className: "DiskAccessList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskAccess"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnectionListResult = {
        serializedName: "PrivateEndpointConnectionListResult",
        type: {
            name: "Composite",
            className: "PrivateEndpointConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskRestorePointList = {
        serializedName: "DiskRestorePointList",
        type: {
            name: "Composite",
            className: "DiskRestorePointList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskRestorePoint"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryList = {
        serializedName: "GalleryList",
        type: {
            name: "Composite",
            className: "GalleryList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Gallery"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageList = {
        serializedName: "GalleryImageList",
        type: {
            name: "Composite",
            className: "GalleryImageList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageVersionList = {
        serializedName: "GalleryImageVersionList",
        type: {
            name: "Composite",
            className: "GalleryImageVersionList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImageVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryApplicationList = {
        serializedName: "GalleryApplicationList",
        type: {
            name: "Composite",
            className: "GalleryApplicationList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryApplication"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryApplicationVersionList = {
        serializedName: "GalleryApplicationVersionList",
        type: {
            name: "Composite",
            className: "GalleryApplicationVersionList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryApplicationVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedGalleryList = {
        serializedName: "SharedGalleryList",
        type: {
            name: "Composite",
            className: "SharedGalleryList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedGallery"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedGalleryImageList = {
        serializedName: "SharedGalleryImageList",
        type: {
            name: "Composite",
            className: "SharedGalleryImageList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedGalleryImage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedGalleryImageVersionList = {
        serializedName: "SharedGalleryImageVersionList",
        type: {
            name: "Composite",
            className: "SharedGalleryImageVersionList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedGalleryImageVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleInstanceListResult = {
        serializedName: "RoleInstanceListResult",
        type: {
            name: "Composite",
            className: "RoleInstanceListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleInstance"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceRoleListResult = {
        serializedName: "CloudServiceRoleListResult",
        type: {
            name: "Composite",
            className: "CloudServiceRoleListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudServiceRole"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceListResult = {
        serializedName: "CloudServiceListResult",
        type: {
            name: "Composite",
            className: "CloudServiceListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudService"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateDomainListResult = {
        serializedName: "UpdateDomainListResult",
        type: {
            name: "Composite",
            className: "UpdateDomainListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateDomain"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSVersionListResult = {
        serializedName: "OSVersionListResult",
        type: {
            name: "Composite",
            className: "OSVersionListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OSVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSFamilyListResult = {
        serializedName: "OSFamilyListResult",
        type: {
            name: "Composite",
            className: "OSFamilyListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OSFamily"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        ApiEntityReference: ApiEntityReference,
        HardwareProfile: HardwareProfile,
        SubResource: SubResource,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        ManagedDiskParameters: ManagedDiskParameters,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        AdditionalUnattendContent: AdditionalUnattendContent,
        PatchSettings: PatchSettings,
        WinRMListener: WinRMListener,
        WinRMConfiguration: WinRMConfiguration,
        WindowsConfiguration: WindowsConfiguration,
        SshPublicKey: SshPublicKey,
        SshConfiguration: SshConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LinuxConfiguration: LinuxConfiguration,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        OSProfile: OSProfile,
        BootDiagnostics: BootDiagnostics,
        DiagnosticsProfile: DiagnosticsProfile,
        UefiSettings: UefiSettings,
        SecurityProfile: SecurityProfile,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        ProxyResource: ProxyResource,
        RestorePoint: RestorePoint,
        Resource: Resource,
        RestorePointCollection: RestorePointCollection,
        UpdateResource: UpdateResource,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        ComputeOperationValue: ComputeOperationValue,
        DisallowedConfiguration: DisallowedConfiguration,
        RetrieveBootDiagnosticsDataResult: RetrieveBootDiagnosticsDataResult,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        SubResourceReadOnly: SubResourceReadOnly,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHost: DedicatedHost,
        DedicatedHostUpdate: DedicatedHostUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CapacityReservation: CapacityReservation,
        CapacityReservationUpdate: CapacityReservationUpdate,
        SshPublicKeyGenerateKeyPairResult: SshPublicKeyGenerateKeyPairResult,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        ExtendedLocation: ExtendedLocation,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineExtensionsListResult: VirtualMachineExtensionsListResult,
        VirtualMachineScaleSetVMExtensionsListResult: VirtualMachineScaleSetVMExtensionsListResult,
        VirtualMachineSoftwarePatchProperties: VirtualMachineSoftwarePatchProperties,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        ApiError: ApiError,
        VirtualMachineAssessPatchesResult: VirtualMachineAssessPatchesResult,
        WindowsParameters: WindowsParameters,
        LinuxParameters: LinuxParameters,
        VirtualMachineInstallPatchesParameters: VirtualMachineInstallPatchesParameters,
        PatchInstallationDetail: PatchInstallationDetail,
        VirtualMachineInstallPatchesResult: VirtualMachineInstallPatchesResult,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImage: VirtualMachineImage,
        UsageName: UsageName,
        Usage: Usage,
        VirtualMachineReimageParameters: VirtualMachineReimageParameters,
        VirtualMachineCaptureParameters: VirtualMachineCaptureParameters,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        Plan: Plan,
        ImageReference: ImageReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        OSDisk: OSDisk,
        DataDisk: DataDisk,
        CapacityReservationProfile: CapacityReservationProfile,
        StorageProfile: StorageProfile,
        AdditionalCapabilities: AdditionalCapabilities,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        PublicIPAddressSku: PublicIPAddressSku,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        NetworkProfile: NetworkProfile,
        BillingProfile: BillingProfile,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineIdentity: VirtualMachineIdentity,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        AvailablePatchSummary: AvailablePatchSummary,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        TerminateNotificationProfile: TerminateNotificationProfile,
        ScheduledEventsProfile: ScheduledEventsProfile,
        VirtualMachine: VirtualMachine,
        VirtualMachineUpdate: VirtualMachineUpdate,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        UpgradePolicy: UpgradePolicy,
        ScaleInPolicy: ScaleInPolicy,
        SpotRestorePolicy: SpotRestorePolicy,
        ImageDisk: ImageDisk,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageStorageProfile: ImageStorageProfile,
        Image: Image,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetVMReimageParameters: VirtualMachineScaleSetVMReimageParameters,
        VirtualMachineScaleSetReimageParameters: VirtualMachineScaleSetReimageParameters,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetVMInstanceIDs: VirtualMachineScaleSetVMInstanceIDs,
        VirtualMachineScaleSetVMInstanceRequiredIDs: VirtualMachineScaleSetVMInstanceRequiredIDs,
        VirtualMachineStatusCodeCount: VirtualMachineStatusCodeCount,
        VirtualMachineScaleSetInstanceViewStatusesSummary: VirtualMachineScaleSetInstanceViewStatusesSummary,
        VirtualMachineScaleSetVMExtensionsSummary: VirtualMachineScaleSetVMExtensionsSummary,
        OrchestrationServiceSummary: OrchestrationServiceSummary,
        VirtualMachineScaleSetInstanceView: VirtualMachineScaleSetInstanceView,
        VirtualMachineScaleSetSkuCapacity: VirtualMachineScaleSetSkuCapacity,
        VirtualMachineScaleSetSku: VirtualMachineScaleSetSku,
        RollbackStatusInfo: RollbackStatusInfo,
        UpgradeOperationHistoryStatus: UpgradeOperationHistoryStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        UpgradeOperationHistoricalStatusInfoProperties: UpgradeOperationHistoricalStatusInfoProperties,
        UpgradeOperationHistoricalStatusInfo: UpgradeOperationHistoricalStatusInfo,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RecoveryWalkResponse: RecoveryWalkResponse,
        LogAnalyticsInputBase: LogAnalyticsInputBase,
        RequestRateByIntervalInput: RequestRateByIntervalInput,
        ThrottledRequestsInput: ThrottledRequestsInput,
        LogAnalyticsOutput: LogAnalyticsOutput,
        LogAnalyticsOperationResult: LogAnalyticsOperationResult,
        VMScaleSetConvertToSinglePlacementGroupInput: VMScaleSetConvertToSinglePlacementGroupInput,
        OrchestrationServiceStateInput: OrchestrationServiceStateInput,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandInput: RunCommandInput,
        RunCommandParameterDefinition: RunCommandParameterDefinition,
        RunCommandDocumentBase: RunCommandDocumentBase,
        RunCommandDocument: RunCommandDocument,
        RunCommandResult: RunCommandResult,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuZoneDetails: ResourceSkuZoneDetails,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSku: ResourceSku,
        ProxyOnlyResource: ProxyOnlyResource,
        DiskSku: DiskSku,
        ImageDiskReference: ImageDiskReference,
        CreationData: CreationData,
        SourceVault: SourceVault,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        EncryptionSettingsElement: EncryptionSettingsElement,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        Encryption: Encryption,
        ShareInfoElement: ShareInfoElement,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        DiskSecurityProfile: DiskSecurityProfile,
        Disk: Disk,
        DiskUpdate: DiskUpdate,
        SnapshotSku: SnapshotSku,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        GrantAccessData: GrantAccessData,
        AccessUri: AccessUri,
        Snapshot: Snapshot,
        SnapshotUpdate: SnapshotUpdate,
        EncryptionSetIdentity: EncryptionSetIdentity,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetUpdate: DiskEncryptionSetUpdate,
        PrivateEndpoint: PrivateEndpoint,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PrivateEndpointConnection: PrivateEndpointConnection,
        DiskAccess: DiskAccess,
        DiskAccessUpdate: DiskAccessUpdate,
        PrivateLinkResource: PrivateLinkResource,
        DiskRestorePoint: DiskRestorePoint,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult,
        GalleryIdentifier: GalleryIdentifier,
        SharingProfileGroup: SharingProfileGroup,
        SharingProfile: SharingProfile,
        Gallery: Gallery,
        UpdateResourceDefinition: UpdateResourceDefinition,
        GalleryUpdate: GalleryUpdate,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        UserArtifactSource: UserArtifactSource,
        UserArtifactManage: UserArtifactManage,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryImageIdentifier: GalleryImageIdentifier,
        ResourceRange: ResourceRange,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImage: GalleryImage,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDiskImage: GalleryDiskImage,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        DiskImageEncryption: DiskImageEncryption,
        OSDiskImageEncryption: OSDiskImageEncryption,
        DataDiskImageEncryption: DataDiskImageEncryption,
        EncryptionImages: EncryptionImages,
        TargetRegion: TargetRegion,
        ManagedArtifact: ManagedArtifact,
        GalleryArtifactSource: GalleryArtifactSource,
        SharingUpdate: SharingUpdate,
        PirResource: PirResource,
        PirSharedGalleryResource: PirSharedGalleryResource,
        SharedGallery: SharedGallery,
        SharedGalleryImage: SharedGalleryImage,
        SharedGalleryImageVersion: SharedGalleryImageVersion,
        InstanceSku: InstanceSku,
        RoleInstanceNetworkProfile: RoleInstanceNetworkProfile,
        ResourceInstanceViewStatus: ResourceInstanceViewStatus,
        RoleInstanceInstanceView: RoleInstanceInstanceView,
        RoleInstanceProperties: RoleInstanceProperties,
        RoleInstance: RoleInstance,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceRoleProperties: CloudServiceRoleProperties,
        CloudServiceRole: CloudServiceRole,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CloudServiceOsProfile: CloudServiceOsProfile,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        Extension: Extension,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudService: CloudService,
        CloudServiceUpdate: CloudServiceUpdate,
        StatusCodeCount: StatusCodeCount,
        InstanceViewStatusesSummary: InstanceViewStatusesSummary,
        CloudServiceInstanceView: CloudServiceInstanceView,
        RoleInstances: RoleInstances,
        UpdateDomain: UpdateDomain,
        OSVersionProperties: OSVersionProperties,
        OSVersion: OSVersion,
        OSVersionPropertiesBase: OSVersionPropertiesBase,
        OSFamilyProperties: OSFamilyProperties,
        OSFamily: OSFamily,
        ComputeOperationListResult: ComputeOperationListResult,
        AvailabilitySetListResult: AvailabilitySetListResult,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        ProximityPlacementGroupListResult: ProximityPlacementGroupListResult,
        DedicatedHostGroupListResult: DedicatedHostGroupListResult,
        DedicatedHostListResult: DedicatedHostListResult,
        SshPublicKeysGroupListResult: SshPublicKeysGroupListResult,
        ListUsagesResult: ListUsagesResult,
        VirtualMachineListResult: VirtualMachineListResult,
        VirtualMachineScaleSetListResult: VirtualMachineScaleSetListResult,
        VirtualMachineScaleSetListWithLinkResult: VirtualMachineScaleSetListWithLinkResult,
        VirtualMachineScaleSetListSkusResult: VirtualMachineScaleSetListSkusResult,
        VirtualMachineScaleSetListOSUpgradeHistory: VirtualMachineScaleSetListOSUpgradeHistory,
        ImageListResult: ImageListResult,
        RestorePointCollectionListResult: RestorePointCollectionListResult,
        CapacityReservationGroupListResult: CapacityReservationGroupListResult,
        CapacityReservationListResult: CapacityReservationListResult,
        VirtualMachineScaleSetExtensionListResult: VirtualMachineScaleSetExtensionListResult,
        VirtualMachineScaleSetVMListResult: VirtualMachineScaleSetVMListResult,
        RunCommandListResult: RunCommandListResult,
        VirtualMachineRunCommandsListResult: VirtualMachineRunCommandsListResult,
        ResourceSkusResult: ResourceSkusResult,
        DiskList: DiskList,
        SnapshotList: SnapshotList,
        DiskEncryptionSetList: DiskEncryptionSetList,
        ResourceUriList: ResourceUriList,
        DiskAccessList: DiskAccessList,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        DiskRestorePointList: DiskRestorePointList,
        GalleryList: GalleryList,
        GalleryImageList: GalleryImageList,
        GalleryImageVersionList: GalleryImageVersionList,
        GalleryApplicationList: GalleryApplicationList,
        GalleryApplicationVersionList: GalleryApplicationVersionList,
        SharedGalleryList: SharedGalleryList,
        SharedGalleryImageList: SharedGalleryImageList,
        SharedGalleryImageVersionList: SharedGalleryImageVersionList,
        RoleInstanceListResult: RoleInstanceListResult,
        CloudServiceRoleListResult: CloudServiceRoleListResult,
        CloudServiceListResult: CloudServiceListResult,
        UpdateDomainListResult: UpdateDomainListResult,
        OSVersionListResult: OSVersionListResult,
        OSFamilyListResult: OSFamilyListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ComputeOperationListResult: ComputeOperationListResult,
        ComputeOperationValue: ComputeOperationValue
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2021-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2019-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2020-12-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2020-09-30',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion4 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2021-03-01',
            type: {
                name: "String"
            }
        }
    };
    var availabilitySetName = {
        parameterPath: "availabilitySetName",
        mapper: {
            required: true,
            serializedName: "availabilitySetName",
            type: {
                name: "String"
            }
        }
    };
    var capacityReservationGroupName = {
        parameterPath: "capacityReservationGroupName",
        mapper: {
            required: true,
            serializedName: "capacityReservationGroupName",
            type: {
                name: "String"
            }
        }
    };
    var capacityReservationName = {
        parameterPath: "capacityReservationName",
        mapper: {
            required: true,
            serializedName: "capacityReservationName",
            type: {
                name: "String"
            }
        }
    };
    var cloudServiceName = {
        parameterPath: "cloudServiceName",
        mapper: {
            required: true,
            serializedName: "cloudServiceName",
            type: {
                name: "String"
            }
        }
    };
    var commandId = {
        parameterPath: "commandId",
        mapper: {
            required: true,
            serializedName: "commandId",
            type: {
                name: "String"
            }
        }
    };
    var diskAccessName = {
        parameterPath: "diskAccessName",
        mapper: {
            required: true,
            serializedName: "diskAccessName",
            type: {
                name: "String"
            }
        }
    };
    var diskEncryptionSetName = {
        parameterPath: "diskEncryptionSetName",
        mapper: {
            required: true,
            serializedName: "diskEncryptionSetName",
            type: {
                name: "String"
            }
        }
    };
    var diskName = {
        parameterPath: "diskName",
        mapper: {
            required: true,
            serializedName: "diskName",
            type: {
                name: "String"
            }
        }
    };
    var diskRestorePointName = {
        parameterPath: "diskRestorePointName",
        mapper: {
            required: true,
            serializedName: "diskRestorePointName",
            type: {
                name: "String"
            }
        }
    };
    var edgeZone = {
        parameterPath: "edgeZone",
        mapper: {
            required: true,
            serializedName: "edgeZone",
            type: {
                name: "String"
            }
        }
    };
    var expand0 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand1 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "instanceView",
                    "userData"
                ]
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var forceDeletion = {
        parameterPath: [
            "options",
            "forceDeletion"
        ],
        mapper: {
            serializedName: "forceDeletion",
            type: {
                name: "Boolean"
            }
        }
    };
    var galleryApplicationName = {
        parameterPath: "galleryApplicationName",
        mapper: {
            required: true,
            serializedName: "galleryApplicationName",
            type: {
                name: "String"
            }
        }
    };
    var galleryApplicationVersionName = {
        parameterPath: "galleryApplicationVersionName",
        mapper: {
            required: true,
            serializedName: "galleryApplicationVersionName",
            type: {
                name: "String"
            }
        }
    };
    var galleryImageName = {
        parameterPath: "galleryImageName",
        mapper: {
            required: true,
            serializedName: "galleryImageName",
            type: {
                name: "String"
            }
        }
    };
    var galleryImageVersionName = {
        parameterPath: "galleryImageVersionName",
        mapper: {
            required: true,
            serializedName: "galleryImageVersionName",
            type: {
                name: "String"
            }
        }
    };
    var galleryName = {
        parameterPath: "galleryName",
        mapper: {
            required: true,
            serializedName: "galleryName",
            type: {
                name: "String"
            }
        }
    };
    var galleryUniqueName = {
        parameterPath: "galleryUniqueName",
        mapper: {
            required: true,
            serializedName: "galleryUniqueName",
            type: {
                name: "String"
            }
        }
    };
    var hostGroupName = {
        parameterPath: "hostGroupName",
        mapper: {
            required: true,
            serializedName: "hostGroupName",
            type: {
                name: "String"
            }
        }
    };
    var hostName = {
        parameterPath: "hostName",
        mapper: {
            required: true,
            serializedName: "hostName",
            type: {
                name: "String"
            }
        }
    };
    var imageName = {
        parameterPath: "imageName",
        mapper: {
            required: true,
            serializedName: "imageName",
            type: {
                name: "String"
            }
        }
    };
    var includeColocationStatus = {
        parameterPath: [
            "options",
            "includeColocationStatus"
        ],
        mapper: {
            serializedName: "includeColocationStatus",
            type: {
                name: "String"
            }
        }
    };
    var instanceId = {
        parameterPath: "instanceId",
        mapper: {
            required: true,
            serializedName: "instanceId",
            type: {
                name: "String"
            }
        }
    };
    var location0 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var location1 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            constraints: {
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var offer = {
        parameterPath: "offer",
        mapper: {
            required: true,
            serializedName: "offer",
            type: {
                name: "String"
            }
        }
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var osFamilyName = {
        parameterPath: "osFamilyName",
        mapper: {
            required: true,
            serializedName: "osFamilyName",
            type: {
                name: "String"
            }
        }
    };
    var osVersionName = {
        parameterPath: "osVersionName",
        mapper: {
            required: true,
            serializedName: "osVersionName",
            type: {
                name: "String"
            }
        }
    };
    var platformUpdateDomain = {
        parameterPath: "platformUpdateDomain",
        mapper: {
            required: true,
            serializedName: "platformUpdateDomain",
            type: {
                name: "Number"
            }
        }
    };
    var privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
            required: true,
            serializedName: "privateEndpointConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var proximityPlacementGroupName = {
        parameterPath: "proximityPlacementGroupName",
        mapper: {
            required: true,
            serializedName: "proximityPlacementGroupName",
            type: {
                name: "String"
            }
        }
    };
    var publisherName = {
        parameterPath: "publisherName",
        mapper: {
            required: true,
            serializedName: "publisherName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var restorePointCollectionName = {
        parameterPath: "restorePointCollectionName",
        mapper: {
            required: true,
            serializedName: "restorePointCollectionName",
            type: {
                name: "String"
            }
        }
    };
    var restorePointName = {
        parameterPath: "restorePointName",
        mapper: {
            required: true,
            serializedName: "restorePointName",
            type: {
                name: "String"
            }
        }
    };
    var roleInstanceName = {
        parameterPath: "roleInstanceName",
        mapper: {
            required: true,
            serializedName: "roleInstanceName",
            type: {
                name: "String"
            }
        }
    };
    var roleName = {
        parameterPath: "roleName",
        mapper: {
            required: true,
            serializedName: "roleName",
            type: {
                name: "String"
            }
        }
    };
    var runCommandName = {
        parameterPath: "runCommandName",
        mapper: {
            required: true,
            serializedName: "runCommandName",
            type: {
                name: "String"
            }
        }
    };
    var sasUriExpirationTimeInMinutes = {
        parameterPath: [
            "options",
            "sasUriExpirationTimeInMinutes"
        ],
        mapper: {
            serializedName: "sasUriExpirationTimeInMinutes",
            type: {
                name: "Number"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var sharedTo = {
        parameterPath: [
            "options",
            "sharedTo"
        ],
        mapper: {
            serializedName: "sharedTo",
            type: {
                name: "String"
            }
        }
    };
    var skipShutdown = {
        parameterPath: [
            "options",
            "skipShutdown"
        ],
        mapper: {
            serializedName: "skipShutdown",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var skus = {
        parameterPath: "skus",
        mapper: {
            required: true,
            serializedName: "skus",
            type: {
                name: "String"
            }
        }
    };
    var snapshotName = {
        parameterPath: "snapshotName",
        mapper: {
            required: true,
            serializedName: "snapshotName",
            type: {
                name: "String"
            }
        }
    };
    var sshPublicKeyName = {
        parameterPath: "sshPublicKeyName",
        mapper: {
            required: true,
            serializedName: "sshPublicKeyName",
            type: {
                name: "String"
            }
        }
    };
    var statusOnly = {
        parameterPath: [
            "options",
            "statusOnly"
        ],
        mapper: {
            serializedName: "statusOnly",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var type = {
        parameterPath: "type",
        mapper: {
            required: true,
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var updateDomain = {
        parameterPath: "updateDomain",
        mapper: {
            required: true,
            serializedName: "updateDomain",
            type: {
                name: "Number"
            }
        }
    };
    var version = {
        parameterPath: "version",
        mapper: {
            required: true,
            serializedName: "version",
            type: {
                name: "String"
            }
        }
    };
    var virtualMachineScaleSetName = {
        parameterPath: "virtualMachineScaleSetName",
        mapper: {
            required: true,
            serializedName: "virtualMachineScaleSetName",
            type: {
                name: "String"
            }
        }
    };
    var vmExtensionName = {
        parameterPath: "vmExtensionName",
        mapper: {
            required: true,
            serializedName: "vmExtensionName",
            type: {
                name: "String"
            }
        }
    };
    var vmName = {
        parameterPath: "vmName",
        mapper: {
            required: true,
            serializedName: "vmName",
            type: {
                name: "String"
            }
        }
    };
    var vmRestorePointName = {
        parameterPath: "vmRestorePointName",
        mapper: {
            required: true,
            serializedName: "vmRestorePointName",
            type: {
                name: "String"
            }
        }
    };
    var vmScaleSetName = {
        parameterPath: "vmScaleSetName",
        mapper: {
            required: true,
            serializedName: "vmScaleSetName",
            type: {
                name: "String"
            }
        }
    };
    var vmssExtensionName = {
        parameterPath: "vmssExtensionName",
        mapper: {
            required: true,
            serializedName: "vmssExtensionName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Compute/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputeOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetListResult: AvailabilitySetListResult,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailabilitySets. */
    var AvailabilitySets = /** @class */ (function () {
        /**
         * Create a AvailabilitySets.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function AvailabilitySets(client) {
            this.client = client;
        }
        AvailabilitySets.prototype.createOrUpdate = function (resourceGroupName, availabilitySetName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                availabilitySetName: availabilitySetName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        AvailabilitySets.prototype.update = function (resourceGroupName, availabilitySetName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                availabilitySetName: availabilitySetName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        AvailabilitySets.prototype.deleteMethod = function (resourceGroupName, availabilitySetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                availabilitySetName: availabilitySetName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AvailabilitySets.prototype.get = function (resourceGroupName, availabilitySetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                availabilitySetName: availabilitySetName,
                options: options
            }, getOperationSpec, callback);
        };
        AvailabilitySets.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        AvailabilitySets.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$1, callback);
        };
        AvailabilitySets.prototype.listAvailableSizes = function (resourceGroupName, availabilitySetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                availabilitySetName: availabilitySetName,
                options: options
            }, listAvailableSizesOperationSpec, callback);
        };
        AvailabilitySets.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        AvailabilitySets.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return AvailabilitySets;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AvailabilitySet), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AvailabilitySetUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/availabilitySets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAvailableSizesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}/vmSizes",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupListResult: ProximityPlacementGroupListResult,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProximityPlacementGroups. */
    var ProximityPlacementGroups = /** @class */ (function () {
        /**
         * Create a ProximityPlacementGroups.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function ProximityPlacementGroups(client) {
            this.client = client;
        }
        ProximityPlacementGroups.prototype.createOrUpdate = function (resourceGroupName, proximityPlacementGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                proximityPlacementGroupName: proximityPlacementGroupName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.update = function (resourceGroupName, proximityPlacementGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                proximityPlacementGroupName: proximityPlacementGroupName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.deleteMethod = function (resourceGroupName, proximityPlacementGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                proximityPlacementGroupName: proximityPlacementGroupName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.get = function (resourceGroupName, proximityPlacementGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                proximityPlacementGroupName: proximityPlacementGroupName,
                options: options
            }, getOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        ProximityPlacementGroups.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        ProximityPlacementGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return ProximityPlacementGroups;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
        urlParameters: [
            resourceGroupName,
            proximityPlacementGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProximityPlacementGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroup
            },
            201: {
                bodyMapper: ProximityPlacementGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
        urlParameters: [
            resourceGroupName,
            proximityPlacementGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProximityPlacementGroupUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
        urlParameters: [
            resourceGroupName,
            proximityPlacementGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
        urlParameters: [
            resourceGroupName,
            proximityPlacementGroupName,
            subscriptionId
        ],
        queryParameters: [
            includeColocationStatus,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/proximityPlacementGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProximityPlacementGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupListResult: DedicatedHostGroupListResult,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DedicatedHostGroups. */
    var DedicatedHostGroups = /** @class */ (function () {
        /**
         * Create a DedicatedHostGroups.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function DedicatedHostGroups(client) {
            this.client = client;
        }
        DedicatedHostGroups.prototype.createOrUpdate = function (resourceGroupName, hostGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        DedicatedHostGroups.prototype.update = function (resourceGroupName, hostGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        DedicatedHostGroups.prototype.deleteMethod = function (resourceGroupName, hostGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        DedicatedHostGroups.prototype.get = function (resourceGroupName, hostGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                options: options
            }, getOperationSpec$2, callback);
        };
        DedicatedHostGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        DedicatedHostGroups.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$2, callback);
        };
        DedicatedHostGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        DedicatedHostGroups.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec$2, callback);
        };
        return DedicatedHostGroups;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DedicatedHostGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DedicatedHostGroup
            },
            201: {
                bodyMapper: DedicatedHostGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DedicatedHostGroupUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DedicatedHostGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            subscriptionId
        ],
        queryParameters: [
            expand1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/hostGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostListResult: DedicatedHostListResult,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DedicatedHosts. */
    var DedicatedHosts = /** @class */ (function () {
        /**
         * Create a DedicatedHosts.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function DedicatedHosts(client) {
            this.client = client;
        }
        /**
         * Create or update a dedicated host .
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host .
         * @param parameters Parameters supplied to the Create Dedicated Host.
         * @param [options] The optional parameters
         * @returns Promise<Models.DedicatedHostsCreateOrUpdateResponse>
         */
        DedicatedHosts.prototype.createOrUpdate = function (resourceGroupName, hostGroupName, hostName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, hostGroupName, hostName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update an dedicated host .
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host .
         * @param parameters Parameters supplied to the Update Dedicated Host operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DedicatedHostsUpdateResponse>
         */
        DedicatedHosts.prototype.update = function (resourceGroupName, hostGroupName, hostName, parameters, options) {
            return this.beginUpdate(resourceGroupName, hostGroupName, hostName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete a dedicated host.
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DedicatedHosts.prototype.deleteMethod = function (resourceGroupName, hostGroupName, hostName, options) {
            return this.beginDeleteMethod(resourceGroupName, hostGroupName, hostName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DedicatedHosts.prototype.get = function (resourceGroupName, hostGroupName, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                hostName: hostName,
                options: options
            }, getOperationSpec$3, callback);
        };
        DedicatedHosts.prototype.listByHostGroup = function (resourceGroupName, hostGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                options: options
            }, listByHostGroupOperationSpec, callback);
        };
        /**
         * Create or update a dedicated host .
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host .
         * @param parameters Parameters supplied to the Create Dedicated Host.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DedicatedHosts.prototype.beginCreateOrUpdate = function (resourceGroupName, hostGroupName, hostName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                hostName: hostName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Update an dedicated host .
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host .
         * @param parameters Parameters supplied to the Update Dedicated Host operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DedicatedHosts.prototype.beginUpdate = function (resourceGroupName, hostGroupName, hostName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                hostName: hostName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Delete a dedicated host.
         * @param resourceGroupName The name of the resource group.
         * @param hostGroupName The name of the dedicated host group.
         * @param hostName The name of the dedicated host.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DedicatedHosts.prototype.beginDeleteMethod = function (resourceGroupName, hostGroupName, hostName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                hostGroupName: hostGroupName,
                hostName: hostName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        DedicatedHosts.prototype.listByHostGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByHostGroupNextOperationSpec, callback);
        };
        return DedicatedHosts;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            hostName,
            subscriptionId
        ],
        queryParameters: [
            expand1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHost
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByHostGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            hostName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DedicatedHost), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DedicatedHost
            },
            201: {
                bodyMapper: DedicatedHost
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            hostName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DedicatedHostUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DedicatedHost
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
        urlParameters: [
            resourceGroupName,
            hostGroupName,
            hostName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByHostGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DedicatedHostListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyGenerateKeyPairResult: SshPublicKeyGenerateKeyPairResult,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeysGroupListResult: SshPublicKeysGroupListResult,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SshPublicKeys. */
    var SshPublicKeys = /** @class */ (function () {
        /**
         * Create a SshPublicKeys.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function SshPublicKeys(client) {
            this.client = client;
        }
        SshPublicKeys.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$3, callback);
        };
        SshPublicKeys.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        SshPublicKeys.prototype.create = function (resourceGroupName, sshPublicKeyName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sshPublicKeyName: sshPublicKeyName,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        SshPublicKeys.prototype.update = function (resourceGroupName, sshPublicKeyName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sshPublicKeyName: sshPublicKeyName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$3, callback);
        };
        SshPublicKeys.prototype.deleteMethod = function (resourceGroupName, sshPublicKeyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sshPublicKeyName: sshPublicKeyName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        SshPublicKeys.prototype.get = function (resourceGroupName, sshPublicKeyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sshPublicKeyName: sshPublicKeyName,
                options: options
            }, getOperationSpec$4, callback);
        };
        SshPublicKeys.prototype.generateKeyPair = function (resourceGroupName, sshPublicKeyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sshPublicKeyName: sshPublicKeyName,
                options: options
            }, generateKeyPairOperationSpec, callback);
        };
        SshPublicKeys.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec$3, callback);
        };
        SshPublicKeys.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        return SshPublicKeys;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listBySubscriptionOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/sshPublicKeys",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeysGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeysGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
        urlParameters: [
            resourceGroupName,
            sshPublicKeyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SshPublicKeyResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SshPublicKeyResource
            },
            201: {
                bodyMapper: SshPublicKeyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
        urlParameters: [
            resourceGroupName,
            sshPublicKeyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SshPublicKeyUpdateResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SshPublicKeyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
        urlParameters: [
            resourceGroupName,
            sshPublicKeyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}",
        urlParameters: [
            resourceGroupName,
            sshPublicKeyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var generateKeyPairOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}/generateKeyPair",
        urlParameters: [
            resourceGroupName,
            sshPublicKeyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeyGenerateKeyPairResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listBySubscriptionNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeysGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SshPublicKeysGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineExtensionImages. */
    var VirtualMachineExtensionImages = /** @class */ (function () {
        /**
         * Create a VirtualMachineExtensionImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineExtensionImages(client) {
            this.client = client;
        }
        VirtualMachineExtensionImages.prototype.get = function (location, publisherName, type, version, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                type: type,
                version: version,
                options: options
            }, getOperationSpec$5, callback);
        };
        VirtualMachineExtensionImages.prototype.listTypes = function (location, publisherName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                options: options
            }, listTypesOperationSpec, callback);
        };
        VirtualMachineExtensionImages.prototype.listVersions = function (location, publisherName, type, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                type: type,
                options: options
            }, listVersionsOperationSpec, callback);
        };
        return VirtualMachineExtensionImages;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}",
        urlParameters: [
            location0,
            publisherName,
            type,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtensionImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listTypesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types",
        urlParameters: [
            location0,
            publisherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionImage"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listVersionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions",
        urlParameters: [
            location0,
            publisherName,
            type,
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            orderby,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionImage"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionsListResult: VirtualMachineExtensionsListResult,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineExtensions. */
    var VirtualMachineExtensions = /** @class */ (function () {
        /**
         * Create a VirtualMachineExtensions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineExtensions(client) {
            this.client = client;
        }
        /**
         * The operation to create or update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be created or updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineExtensionsCreateOrUpdateResponse>
         */
        VirtualMachineExtensions.prototype.createOrUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmName, vmExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineExtensionsUpdateResponse>
         */
        VirtualMachineExtensions.prototype.update = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
            return this.beginUpdate(resourceGroupName, vmName, vmExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be deleted.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineExtensions.prototype.deleteMethod = function (resourceGroupName, vmName, vmExtensionName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmName, vmExtensionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineExtensions.prototype.get = function (resourceGroupName, vmName, vmExtensionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                vmExtensionName: vmExtensionName,
                options: options
            }, getOperationSpec$6, callback);
        };
        VirtualMachineExtensions.prototype.list = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * The operation to create or update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be created or updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                vmExtensionName: vmExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * The operation to update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                vmExtensionName: vmExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be deleted.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginDeleteMethod = function (resourceGroupName, vmName, vmExtensionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                vmExtensionName: vmExtensionName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        return VirtualMachineExtensions;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtensionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineExtension), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            201: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineExtensionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineImages. */
    var VirtualMachineImages = /** @class */ (function () {
        /**
         * Create a VirtualMachineImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineImages(client) {
            this.client = client;
        }
        VirtualMachineImages.prototype.get = function (location, publisherName, offer, skus, version, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                offer: offer,
                skus: skus,
                version: version,
                options: options
            }, getOperationSpec$7, callback);
        };
        VirtualMachineImages.prototype.list = function (location, publisherName, offer, skus, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                offer: offer,
                skus: skus,
                options: options
            }, listOperationSpec$3, callback);
        };
        VirtualMachineImages.prototype.listOffers = function (location, publisherName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                options: options
            }, listOffersOperationSpec, callback);
        };
        VirtualMachineImages.prototype.listPublishers = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listPublishersOperationSpec, callback);
        };
        VirtualMachineImages.prototype.listSkus = function (location, publisherName, offer, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName,
                offer: offer,
                options: options
            }, listSkusOperationSpec, callback);
        };
        return VirtualMachineImages;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
        urlParameters: [
            location0,
            publisherName,
            offer,
            skus,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
        urlParameters: [
            location0,
            publisherName,
            offer,
            skus,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            top,
            orderby,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listOffersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers",
        urlParameters: [
            location0,
            publisherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listPublishersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
        urlParameters: [
            location0,
            publisherName,
            offer,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineImagesEdgeZone. */
    var VirtualMachineImagesEdgeZone = /** @class */ (function () {
        /**
         * Create a VirtualMachineImagesEdgeZone.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineImagesEdgeZone(client) {
            this.client = client;
        }
        VirtualMachineImagesEdgeZone.prototype.get = function (location, edgeZone, publisherName, offer, skus, version, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                edgeZone: edgeZone,
                publisherName: publisherName,
                offer: offer,
                skus: skus,
                version: version,
                options: options
            }, getOperationSpec$8, callback);
        };
        VirtualMachineImagesEdgeZone.prototype.list = function (location, edgeZone, publisherName, offer, skus, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                edgeZone: edgeZone,
                publisherName: publisherName,
                offer: offer,
                skus: skus,
                options: options
            }, listOperationSpec$4, callback);
        };
        VirtualMachineImagesEdgeZone.prototype.listOffers = function (location, edgeZone, publisherName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                edgeZone: edgeZone,
                publisherName: publisherName,
                options: options
            }, listOffersOperationSpec$1, callback);
        };
        VirtualMachineImagesEdgeZone.prototype.listPublishers = function (location, edgeZone, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                edgeZone: edgeZone,
                options: options
            }, listPublishersOperationSpec$1, callback);
        };
        VirtualMachineImagesEdgeZone.prototype.listSkus = function (location, edgeZone, publisherName, offer, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                edgeZone: edgeZone,
                publisherName: publisherName,
                offer: offer,
                options: options
            }, listSkusOperationSpec$1, callback);
        };
        return VirtualMachineImagesEdgeZone;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/edgeZones/{edgeZone}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
        urlParameters: [
            location0,
            edgeZone,
            publisherName,
            offer,
            skus,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/edgeZones/{edgeZone}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
        urlParameters: [
            location0,
            edgeZone,
            publisherName,
            offer,
            skus,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            top,
            orderby,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listOffersOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/edgeZones/{edgeZone}/publishers/{publisherName}/artifacttypes/vmimage/offers",
        urlParameters: [
            location0,
            edgeZone,
            publisherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listPublishersOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/edgeZones/{edgeZone}/publishers",
        urlParameters: [
            location0,
            edgeZone,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listSkusOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/edgeZones/{edgeZone}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
        urlParameters: [
            location0,
            edgeZone,
            publisherName,
            offer,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ListUsagesResult: ListUsagesResult,
        Usage: Usage,
        UsageName: UsageName
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UsageOperations. */
    var UsageOperations = /** @class */ (function () {
        /**
         * Create a UsageOperations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function UsageOperations(client) {
            this.client = client;
        }
        UsageOperations.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$5, callback);
        };
        UsageOperations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return UsageOperations;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/usages",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxParameters: LinuxParameters,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchInstallationDetail: PatchInstallationDetail,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RetrieveBootDiagnosticsDataResult: RetrieveBootDiagnosticsDataResult,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInput: RunCommandInput,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandResult: RunCommandResult,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineAssessPatchesResult: VirtualMachineAssessPatchesResult,
        VirtualMachineCaptureParameters: VirtualMachineCaptureParameters,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstallPatchesParameters: VirtualMachineInstallPatchesParameters,
        VirtualMachineInstallPatchesResult: VirtualMachineInstallPatchesResult,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineListResult: VirtualMachineListResult,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineReimageParameters: VirtualMachineReimageParameters,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetReimageParameters: VirtualMachineScaleSetReimageParameters,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineScaleSetVMReimageParameters: VirtualMachineScaleSetVMReimageParameters,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        VirtualMachineSoftwarePatchProperties: VirtualMachineSoftwarePatchProperties,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WindowsParameters: WindowsParameters,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachines. */
    var VirtualMachines = /** @class */ (function () {
        /**
         * Create a VirtualMachines.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachines(client) {
            this.client = client;
        }
        VirtualMachines.prototype.listByLocation = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        /**
         * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
         * to create similar VMs.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Capture Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesCaptureResponse>
         */
        VirtualMachines.prototype.capture = function (resourceGroupName, vmName, parameters, options) {
            return this.beginCapture(resourceGroupName, vmName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to create or update a virtual machine. Please note some properties can be set only
         * during virtual machine creation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Create Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
         */
        VirtualMachines.prototype.createOrUpdate = function (resourceGroupName, vmName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesUpdateResponse>
         */
        VirtualMachines.prototype.update = function (resourceGroupName, vmName, parameters, options) {
            return this.beginUpdate(resourceGroupName, vmName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.deleteMethod = function (resourceGroupName, vmName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.get = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, getOperationSpec$9, callback);
        };
        VirtualMachines.prototype.instanceView = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, instanceViewOperationSpec, callback);
        };
        /**
         * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
         * stop-deallocated before invoking this operation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.convertToManagedDisks = function (resourceGroupName, vmName, options) {
            return this.beginConvertToManagedDisks(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Shuts down the virtual machine and releases the compute resources. You are not billed for the
         * compute resources that this virtual machine uses.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.deallocate = function (resourceGroupName, vmName, options) {
            return this.beginDeallocate(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.generalize = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, generalizeOperationSpec, callback);
        };
        VirtualMachines.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$6, callback);
        };
        VirtualMachines.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec, callback);
        };
        VirtualMachines.prototype.listAvailableSizes = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, listAvailableSizesOperationSpec$1, callback);
        };
        /**
         * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
         * the same provisioned resources. You are still charged for this virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.powerOff = function (resourceGroupName, vmName, options) {
            return this.beginPowerOff(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to reapply a virtual machine's state.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.reapply = function (resourceGroupName, vmName, options) {
            return this.beginReapply(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to restart a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.restart = function (resourceGroupName, vmName, options) {
            return this.beginRestart(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.start = function (resourceGroupName, vmName, options) {
            return this.beginStart(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Shuts down the virtual machine, moves it to a new node, and powers it back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.redeploy = function (resourceGroupName, vmName, options) {
            return this.beginRedeploy(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.reimage = function (resourceGroupName, vmName, options) {
            return this.beginReimage(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.retrieveBootDiagnosticsData = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, retrieveBootDiagnosticsDataOperationSpec, callback);
        };
        /**
         * The operation to perform maintenance on a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.performMaintenance = function (resourceGroupName, vmName, options) {
            return this.beginPerformMaintenance(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.simulateEviction = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, simulateEvictionOperationSpec, callback);
        };
        /**
         * Assess patches on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesAssessPatchesResponse>
         */
        VirtualMachines.prototype.assessPatches = function (resourceGroupName, vmName, options) {
            return this.beginAssessPatches(resourceGroupName, vmName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Installs patches on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param installPatchesInput Input for InstallPatches as directly received by the API
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesInstallPatchesResponse>
         */
        VirtualMachines.prototype.installPatches = function (resourceGroupName, vmName, installPatchesInput, options) {
            return this.beginInstallPatches(resourceGroupName, vmName, installPatchesInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Run command on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesRunCommandResponse>
         */
        VirtualMachines.prototype.runCommand = function (resourceGroupName, vmName, parameters, options) {
            return this.beginRunCommand(resourceGroupName, vmName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
         * to create similar VMs.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Capture Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginCapture = function (resourceGroupName, vmName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                parameters: parameters,
                options: options
            }, beginCaptureOperationSpec, options);
        };
        /**
         * The operation to create or update a virtual machine. Please note some properties can be set only
         * during virtual machine creation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Create Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName, vmName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * The operation to update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginUpdate = function (resourceGroupName, vmName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        /**
         * The operation to delete a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
         * stop-deallocated before invoking this operation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginConvertToManagedDisks = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginConvertToManagedDisksOperationSpec, options);
        };
        /**
         * Shuts down the virtual machine and releases the compute resources. You are not billed for the
         * compute resources that this virtual machine uses.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDeallocate = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginDeallocateOperationSpec, options);
        };
        /**
         * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
         * the same provisioned resources. You are still charged for this virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginPowerOff = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginPowerOffOperationSpec, options);
        };
        /**
         * The operation to reapply a virtual machine's state.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginReapply = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginReapplyOperationSpec, options);
        };
        /**
         * The operation to restart a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRestart = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginRestartOperationSpec, options);
        };
        /**
         * The operation to start a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginStart = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Shuts down the virtual machine, moves it to a new node, and powers it back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRedeploy = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginRedeployOperationSpec, options);
        };
        /**
         * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginReimage = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginReimageOperationSpec, options);
        };
        /**
         * The operation to perform maintenance on a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginPerformMaintenance = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginPerformMaintenanceOperationSpec, options);
        };
        /**
         * Assess patches on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginAssessPatches = function (resourceGroupName, vmName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, beginAssessPatchesOperationSpec, options);
        };
        /**
         * Installs patches on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param installPatchesInput Input for InstallPatches as directly received by the API
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginInstallPatches = function (resourceGroupName, vmName, installPatchesInput, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                installPatchesInput: installPatchesInput,
                options: options
            }, beginInstallPatchesOperationSpec, options);
        };
        /**
         * Run command on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRunCommand = function (resourceGroupName, vmName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                parameters: parameters,
                options: options
            }, beginRunCommandOperationSpec, options);
        };
        VirtualMachines.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec, callback);
        };
        VirtualMachines.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        VirtualMachines.prototype.listAllNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAllNextOperationSpec, callback);
        };
        return VirtualMachines;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachines",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            expand1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var instanceViewOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var generalizeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listAllOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            statusOnly
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listAvailableSizesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var retrieveBootDiagnosticsDataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/retrieveBootDiagnosticsData",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            sasUriExpirationTimeInMinutes,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RetrieveBootDiagnosticsDataResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var simulateEvictionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/simulateEviction",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginCaptureOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachineCaptureParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineCaptureResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachine), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            201: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachineUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            forceDeletion,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginConvertToManagedDisksOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginDeallocateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginPowerOffOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            skipShutdown,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginReapplyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reapply",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginRedeployOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginReimageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reimage",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: VirtualMachineReimageParameters
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginPerformMaintenanceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginAssessPatchesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/assessPatches",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineAssessPatchesResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginInstallPatchesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/installPatches",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "installPatchesInput",
            mapper: __assign(__assign({}, VirtualMachineInstallPatchesParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineInstallPatchesResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginRunCommandOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RunCommandInput), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RunCommandResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listAllNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0,
            statusOnly
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OrchestrationServiceStateInput: OrchestrationServiceStateInput,
        OrchestrationServiceSummary: OrchestrationServiceSummary,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RecoveryWalkResponse: RecoveryWalkResponse,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollbackStatusInfo: RollbackStatusInfo,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradeOperationHistoricalStatusInfo: UpgradeOperationHistoricalStatusInfo,
        UpgradeOperationHistoricalStatusInfoProperties: UpgradeOperationHistoricalStatusInfoProperties,
        UpgradeOperationHistoryStatus: UpgradeOperationHistoryStatus,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineReimageParameters: VirtualMachineReimageParameters,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetInstanceView: VirtualMachineScaleSetInstanceView,
        VirtualMachineScaleSetInstanceViewStatusesSummary: VirtualMachineScaleSetInstanceViewStatusesSummary,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetListOSUpgradeHistory: VirtualMachineScaleSetListOSUpgradeHistory,
        VirtualMachineScaleSetListResult: VirtualMachineScaleSetListResult,
        VirtualMachineScaleSetListSkusResult: VirtualMachineScaleSetListSkusResult,
        VirtualMachineScaleSetListWithLinkResult: VirtualMachineScaleSetListWithLinkResult,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetReimageParameters: VirtualMachineScaleSetReimageParameters,
        VirtualMachineScaleSetSku: VirtualMachineScaleSetSku,
        VirtualMachineScaleSetSkuCapacity: VirtualMachineScaleSetSkuCapacity,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionsSummary: VirtualMachineScaleSetVMExtensionsSummary,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceIDs: VirtualMachineScaleSetVMInstanceIDs,
        VirtualMachineScaleSetVMInstanceRequiredIDs: VirtualMachineScaleSetVMInstanceRequiredIDs,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineScaleSetVMReimageParameters: VirtualMachineScaleSetVMReimageParameters,
        VirtualMachineStatusCodeCount: VirtualMachineStatusCodeCount,
        VirtualMachineUpdate: VirtualMachineUpdate,
        VMScaleSetConvertToSinglePlacementGroupInput: VMScaleSetConvertToSinglePlacementGroupInput,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSets. */
    var VirtualMachineScaleSets = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSets.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSets(client) {
            this.client = client;
        }
        VirtualMachineScaleSets.prototype.listByLocation = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listByLocationOperationSpec$1, callback);
        };
        /**
         * Create or update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSets.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetsUpdateResponse>
         */
        VirtualMachineScaleSets.prototype.update = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.beginUpdate(resourceGroupName, vmScaleSetName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.get = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
         * releases the compute resources. You are not billed for the compute resources that this virtual
         * machine scale set deallocates.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deallocate = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginDeallocate(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deleteInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
            return this.beginDeleteInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.getInstanceView = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, getInstanceViewOperationSpec, callback);
        };
        VirtualMachineScaleSets.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$7, callback);
        };
        VirtualMachineScaleSets.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.listSkus = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, listSkusOperationSpec$2, callback);
        };
        VirtualMachineScaleSets.prototype.getOSUpgradeHistory = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, getOSUpgradeHistoryOperationSpec, callback);
        };
        /**
         * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
         * attached and you are getting charged for the resources. Instead, use deallocate to release
         * resources and avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.powerOff = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginPowerOff(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.restart = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginRestart(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.start = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginStart(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node,
         * and powers them back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.redeploy = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginRedeploy(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
         * which are not eligible for perform maintenance will be failed. Please refer to best practices
         * for more details:
         * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.performMaintenance = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginPerformMaintenance(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.updateInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
            return this.beginUpdateInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which
         * don't have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual
         * machine is reset to initial state.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.reimage = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginReimage(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
         * operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.reimageAll = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginReimageAll(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.forceRecoveryServiceFabricPlatformUpdateDomainWalk = function (resourceGroupName, vmScaleSetName, platformUpdateDomain, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                platformUpdateDomain: platformUpdateDomain,
                options: options
            }, forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec, callback);
        };
        VirtualMachineScaleSets.prototype.convertToSinglePlacementGroup = function (resourceGroupName, vmScaleSetName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                parameters: parameters,
                options: options
            }, convertToSinglePlacementGroupOperationSpec, callback);
        };
        /**
         * Changes ServiceState property for a given service
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the virtual machine scale set to create or update.
         * @param parameters The input object for SetOrchestrationServiceState API.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.setOrchestrationServiceState = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.beginSetOrchestrationServiceState(resourceGroupName, vmScaleSetName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        /**
         * Deletes a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
         * releases the compute resources. You are not billed for the compute resources that this virtual
         * machine scale set deallocates.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeallocate = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginDeallocateOperationSpec$1, options);
        };
        /**
         * Deletes virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeleteInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmInstanceIDs: vmInstanceIDs,
                options: options
            }, beginDeleteInstancesOperationSpec, options);
        };
        /**
         * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
         * attached and you are getting charged for the resources. Instead, use deallocate to release
         * resources and avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginPowerOff = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginPowerOffOperationSpec$1, options);
        };
        /**
         * Restarts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginRestart = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginRestartOperationSpec$1, options);
        };
        /**
         * Starts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginStart = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginStartOperationSpec$1, options);
        };
        /**
         * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node,
         * and powers them back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginRedeploy = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginRedeployOperationSpec$1, options);
        };
        /**
         * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
         * which are not eligible for perform maintenance will be failed. Please refer to best practices
         * for more details:
         * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginPerformMaintenance = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginPerformMaintenanceOperationSpec$1, options);
        };
        /**
         * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginUpdateInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmInstanceIDs: vmInstanceIDs,
                options: options
            }, beginUpdateInstancesOperationSpec, options);
        };
        /**
         * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which
         * don't have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual
         * machine is reset to initial state.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginReimage = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginReimageOperationSpec$1, options);
        };
        /**
         * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
         * operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginReimageAll = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginReimageAllOperationSpec, options);
        };
        /**
         * Changes ServiceState property for a given service
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the virtual machine scale set to create or update.
         * @param parameters The input object for SetOrchestrationServiceState API.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginSetOrchestrationServiceState = function (resourceGroupName, vmScaleSetName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                parameters: parameters,
                options: options
            }, beginSetOrchestrationServiceStateOperationSpec, options);
        };
        VirtualMachineScaleSets.prototype.listByLocationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByLocationNextOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        VirtualMachineScaleSets.prototype.listAllNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAllNextOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.listSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSkusNextOperationSpec, callback);
        };
        VirtualMachineScaleSets.prototype.getOSUpgradeHistoryNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, getOSUpgradeHistoryNextOperationSpec, callback);
        };
        return VirtualMachineScaleSets;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByLocationOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachineScaleSets",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getInstanceViewOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listAllOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListWithLinkResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listSkusOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOSUpgradeHistoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osUpgradeHistory",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListOSUpgradeHistory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/forceRecoveryServiceFabricPlatformUpdateDomainWalk",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            platformUpdateDomain
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryWalkResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var convertToSinglePlacementGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/convertToSinglePlacementGroup",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VMScaleSetConvertToSinglePlacementGroupInput), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSet), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            201: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            forceDeletion,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeallocateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeleteInstancesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            forceDeletion,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vmInstanceIDs",
            mapper: __assign(__assign({}, VirtualMachineScaleSetVMInstanceRequiredIDs), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginPowerOffOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            skipShutdown,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginRestartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginStartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginRedeployOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginPerformMaintenanceOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginUpdateInstancesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vmInstanceIDs",
            mapper: __assign(__assign({}, VirtualMachineScaleSetVMInstanceRequiredIDs), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginReimageOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmScaleSetReimageInput"
            ],
            mapper: VirtualMachineScaleSetReimageParameters
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginReimageAllOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimageall",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginSetOrchestrationServiceStateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/setOrchestrationServiceState",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OrchestrationServiceStateInput), { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByLocationNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listAllNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListWithLinkResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOSUpgradeHistoryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListOSUpgradeHistory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineSizes. */
    var VirtualMachineSizes = /** @class */ (function () {
        /**
         * Create a VirtualMachineSizes.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineSizes(client) {
            this.client = client;
        }
        VirtualMachineSizes.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$8, callback);
        };
        return VirtualMachineSizes;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/vmSizes",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageListResult: ImageListResult,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Images. */
    var Images = /** @class */ (function () {
        /**
         * Create a Images.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Images(client) {
            this.client = client;
        }
        /**
         * Create or update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Create Image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ImagesCreateOrUpdateResponse>
         */
        Images.prototype.createOrUpdate = function (resourceGroupName, imageName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, imageName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Update Image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ImagesUpdateResponse>
         */
        Images.prototype.update = function (resourceGroupName, imageName, parameters, options) {
            return this.beginUpdate(resourceGroupName, imageName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an Image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Images.prototype.deleteMethod = function (resourceGroupName, imageName, options) {
            return this.beginDeleteMethod(resourceGroupName, imageName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Images.prototype.get = function (resourceGroupName, imageName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                imageName: imageName,
                options: options
            }, getOperationSpec$b, callback);
        };
        Images.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        Images.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$9, callback);
        };
        /**
         * Create or update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Create Image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginCreateOrUpdate = function (resourceGroupName, imageName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                imageName: imageName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Update Image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginUpdate = function (resourceGroupName, imageName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                imageName: imageName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        /**
         * Deletes an Image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginDeleteMethod = function (resourceGroupName, imageName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                imageName: imageName,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        Images.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        Images.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Images;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/images",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Image), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Image
            },
            201: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ImageUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Image
            },
            201: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionListResult: RestorePointCollectionListResult,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorePointCollections. */
    var RestorePointCollections = /** @class */ (function () {
        /**
         * Create a RestorePointCollections.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function RestorePointCollections(client) {
            this.client = client;
        }
        RestorePointCollections.prototype.createOrUpdate = function (resourceGroupName, restorePointCollectionName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        RestorePointCollections.prototype.update = function (resourceGroupName, restorePointCollectionName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$4, callback);
        };
        /**
         * The operation to delete the restore point collection. This operation will also delete all the
         * contained restore points.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the Restore Point Collection.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RestorePointCollections.prototype.deleteMethod = function (resourceGroupName, restorePointCollectionName, options) {
            return this.beginDeleteMethod(resourceGroupName, restorePointCollectionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RestorePointCollections.prototype.get = function (resourceGroupName, restorePointCollectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                options: options
            }, getOperationSpec$c, callback);
        };
        RestorePointCollections.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$a, callback);
        };
        RestorePointCollections.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$2, callback);
        };
        /**
         * The operation to delete the restore point collection. This operation will also delete all the
         * contained restore points.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the Restore Point Collection.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RestorePointCollections.prototype.beginDeleteMethod = function (resourceGroupName, restorePointCollectionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        RestorePointCollections.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        RestorePointCollections.prototype.listAllNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAllNextOperationSpec$2, callback);
        };
        return RestorePointCollections;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RestorePointCollection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestorePointCollection
            },
            201: {
                bodyMapper: RestorePointCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RestorePointCollectionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestorePointCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listAllOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/restorePointCollections",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listAllNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorePoints. */
    var RestorePoints = /** @class */ (function () {
        /**
         * Create a RestorePoints.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function RestorePoints(client) {
            this.client = client;
        }
        /**
         * The operation to create the restore point. Updating properties of an existing restore point is
         * not allowed
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection.
         * @param restorePointName The name of the restore point.
         * @param parameters Parameters supplied to the Create restore point operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RestorePointsCreateResponse>
         */
        RestorePoints.prototype.create = function (resourceGroupName, restorePointCollectionName, restorePointName, parameters, options) {
            return this.beginCreate(resourceGroupName, restorePointCollectionName, restorePointName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the restore point.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the Restore Point Collection.
         * @param restorePointName The name of the restore point.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RestorePoints.prototype.deleteMethod = function (resourceGroupName, restorePointCollectionName, restorePointName, options) {
            return this.beginDeleteMethod(resourceGroupName, restorePointCollectionName, restorePointName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RestorePoints.prototype.get = function (resourceGroupName, restorePointCollectionName, restorePointName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                restorePointName: restorePointName,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * The operation to create the restore point. Updating properties of an existing restore point is
         * not allowed
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection.
         * @param restorePointName The name of the restore point.
         * @param parameters Parameters supplied to the Create restore point operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RestorePoints.prototype.beginCreate = function (resourceGroupName, restorePointCollectionName, restorePointName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                restorePointName: restorePointName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * The operation to delete the restore point.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the Restore Point Collection.
         * @param restorePointName The name of the restore point.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RestorePoints.prototype.beginDeleteMethod = function (resourceGroupName, restorePointCollectionName, restorePointName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                restorePointName: restorePointName,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        return RestorePoints;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{restorePointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            restorePointName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{restorePointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            restorePointName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RestorePoint), { required: true })
        },
        responses: {
            201: {
                bodyMapper: RestorePoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{restorePointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            restorePointName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupListResult: CapacityReservationGroupListResult,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CapacityReservationGroups. */
    var CapacityReservationGroups = /** @class */ (function () {
        /**
         * Create a CapacityReservationGroups.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CapacityReservationGroups(client) {
            this.client = client;
        }
        CapacityReservationGroups.prototype.createOrUpdate = function (resourceGroupName, capacityReservationGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        CapacityReservationGroups.prototype.update = function (resourceGroupName, capacityReservationGroupName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                parameters: parameters,
                options: options
            }, updateOperationSpec$5, callback);
        };
        CapacityReservationGroups.prototype.deleteMethod = function (resourceGroupName, capacityReservationGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        CapacityReservationGroups.prototype.get = function (resourceGroupName, capacityReservationGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                options: options
            }, getOperationSpec$e, callback);
        };
        CapacityReservationGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        CapacityReservationGroups.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$4, callback);
        };
        CapacityReservationGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$4, callback);
        };
        CapacityReservationGroups.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec$4, callback);
        };
        return CapacityReservationGroups;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CapacityReservationGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CapacityReservationGroup
            },
            201: {
                bodyMapper: CapacityReservationGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CapacityReservationGroupUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CapacityReservationGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listBySubscriptionOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/capacityReservationGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listBySubscriptionNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0,
            expand0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationListResult: CapacityReservationListResult,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CapacityReservations. */
    var CapacityReservations = /** @class */ (function () {
        /**
         * Create a CapacityReservations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CapacityReservations(client) {
            this.client = client;
        }
        /**
         * The operation to create or update a capacity reservation. Please note some properties can be set
         * only during capacity reservation creation. Please refer to https://aka.ms/CapacityReservation
         * for more details.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param parameters Parameters supplied to the Create capacity reservation.
         * @param [options] The optional parameters
         * @returns Promise<Models.CapacityReservationsCreateOrUpdateResponse>
         */
        CapacityReservations.prototype.createOrUpdate = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a capacity reservation.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param parameters Parameters supplied to the Update capacity reservation operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.CapacityReservationsUpdateResponse>
         */
        CapacityReservations.prototype.update = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options) {
            return this.beginUpdate(resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a capacity reservation. This operation is allowed only when all the
         * associated resources are disassociated from the capacity reservation. Please refer to
         * https://aka.ms/CapacityReservation for more details.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CapacityReservations.prototype.deleteMethod = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, options) {
            return this.beginDeleteMethod(resourceGroupName, capacityReservationGroupName, capacityReservationName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CapacityReservations.prototype.get = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                capacityReservationName: capacityReservationName,
                options: options
            }, getOperationSpec$f, callback);
        };
        CapacityReservations.prototype.listByCapacityReservationGroup = function (resourceGroupName, capacityReservationGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                options: options
            }, listByCapacityReservationGroupOperationSpec, callback);
        };
        /**
         * The operation to create or update a capacity reservation. Please note some properties can be set
         * only during capacity reservation creation. Please refer to https://aka.ms/CapacityReservation
         * for more details.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param parameters Parameters supplied to the Create capacity reservation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CapacityReservations.prototype.beginCreateOrUpdate = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                capacityReservationName: capacityReservationName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * The operation to update a capacity reservation.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param parameters Parameters supplied to the Update capacity reservation operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CapacityReservations.prototype.beginUpdate = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                capacityReservationName: capacityReservationName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$5, options);
        };
        /**
         * The operation to delete a capacity reservation. This operation is allowed only when all the
         * associated resources are disassociated from the capacity reservation. Please refer to
         * https://aka.ms/CapacityReservation for more details.
         * @param resourceGroupName The name of the resource group.
         * @param capacityReservationGroupName The name of the capacity reservation group.
         * @param capacityReservationName The name of the capacity reservation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CapacityReservations.prototype.beginDeleteMethod = function (resourceGroupName, capacityReservationGroupName, capacityReservationName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                capacityReservationGroupName: capacityReservationGroupName,
                capacityReservationName: capacityReservationName,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        CapacityReservations.prototype.listByCapacityReservationGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByCapacityReservationGroupNextOperationSpec, callback);
        };
        return CapacityReservations;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            capacityReservationName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByCapacityReservationGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            capacityReservationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CapacityReservation), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CapacityReservation
            },
            201: {
                bodyMapper: CapacityReservation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginUpdateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            capacityReservationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CapacityReservationUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CapacityReservation
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}",
        urlParameters: [
            resourceGroupName,
            capacityReservationGroupName,
            capacityReservationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByCapacityReservationGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapacityReservationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionListResult: VirtualMachineScaleSetExtensionListResult,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetExtensions. */
    var VirtualMachineScaleSetExtensions = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetExtensions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetExtensions(client) {
            this.client = client;
        }
        /**
         * The operation to create or update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetExtensionsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSetExtensions.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Update VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetExtensionsUpdateResponse>
         */
        VirtualMachineScaleSetExtensions.prototype.update = function (resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options) {
            return this.beginUpdate(resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetExtensions.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, vmssExtensionName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, vmssExtensionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetExtensions.prototype.get = function (resourceGroupName, vmScaleSetName, vmssExtensionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmssExtensionName: vmssExtensionName,
                options: options
            }, getOperationSpec$g, callback);
        };
        VirtualMachineScaleSetExtensions.prototype.list = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, listOperationSpec$b, callback);
        };
        /**
         * The operation to create or update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmssExtensionName: vmssExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * The operation to update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Update VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetExtensions.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, vmssExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmssExtensionName: vmssExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginUpdateOperationSpec$6, options);
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetExtensions.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, vmssExtensionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                vmssExtensionName: vmssExtensionName,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        VirtualMachineScaleSetExtensions.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return VirtualMachineScaleSetExtensions;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtensionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetExtension), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            201: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginUpdateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetExtensionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            201: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtensionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetRollingUpgrades. */
    var VirtualMachineScaleSetRollingUpgrades = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetRollingUpgrades.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetRollingUpgrades(client) {
            this.client = client;
        }
        /**
         * Cancels the current virtual machine scale set rolling upgrade.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.cancel = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginCancel(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
         * Platform Image OS version. Instances which are already running the latest available OS version
         * are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.startOSUpgrade = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginStartOSUpgrade(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to
         * the latest available extension version. Instances which are already running the latest extension
         * versions are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.startExtensionUpgrade = function (resourceGroupName, vmScaleSetName, options) {
            return this.beginStartExtensionUpgrade(resourceGroupName, vmScaleSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetRollingUpgrades.prototype.getLatest = function (resourceGroupName, vmScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, getLatestOperationSpec, callback);
        };
        /**
         * Cancels the current virtual machine scale set rolling upgrade.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginCancel = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginCancelOperationSpec, options);
        };
        /**
         * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
         * Platform Image OS version. Instances which are already running the latest available OS version
         * are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginStartOSUpgrade = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginStartOSUpgradeOperationSpec, options);
        };
        /**
         * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to
         * the latest available extension version. Instances which are already running the latest extension
         * versions are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginStartExtensionUpgrade = function (resourceGroupName, vmScaleSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                options: options
            }, beginStartExtensionUpgradeOperationSpec, options);
        };
        return VirtualMachineScaleSetRollingUpgrades;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var getLatestOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/latest",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RollingUpgradeStatusInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/cancel",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginStartOSUpgradeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osRollingUpgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginStartExtensionUpgradeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensionRollingUpgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionsListResult: VirtualMachineScaleSetVMExtensionsListResult,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetVMExtensions. */
    var VirtualMachineScaleSetVMExtensions = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetVMExtensions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetVMExtensions(client) {
            this.client = client;
        }
        /**
         * The operation to create or update the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSetVMExtensions.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsUpdateResponse>
         */
        VirtualMachineScaleSetVMExtensions.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
            return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMExtensions.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMExtensions.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                vmExtensionName: vmExtensionName,
                options: options
            }, getOperationSpec$h, callback);
        };
        VirtualMachineScaleSetVMExtensions.prototype.list = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, listOperationSpec$c, callback);
        };
        /**
         * The operation to create or update the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                vmExtensionName: vmExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * The operation to update the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMExtensions.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                vmExtensionName: vmExtensionName,
                extensionParameters: extensionParameters,
                options: options
            }, beginUpdateOperationSpec$7, options);
        };
        /**
         * The operation to delete the VMSS VM extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMExtensions.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                vmExtensionName: vmExtensionName,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        return VirtualMachineScaleSetVMExtensions;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMExtensionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetVMExtension), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMExtension
            },
            201: {
                bodyMapper: VirtualMachineScaleSetVMExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginUpdateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetVMExtensionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RetrieveBootDiagnosticsDataResult: RetrieveBootDiagnosticsDataResult,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInput: RunCommandInput,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandResult: RunCommandResult,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineReimageParameters: VirtualMachineReimageParameters,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetReimageParameters: VirtualMachineScaleSetReimageParameters,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMListResult: VirtualMachineScaleSetVMListResult,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineScaleSetVMReimageParameters: VirtualMachineScaleSetVMReimageParameters,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetVMs. */
    var VirtualMachineScaleSetVMs = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetVMs.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetVMs(client) {
            this.client = client;
        }
        /**
         * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.reimage = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginReimage(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
         * This operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.reimageAll = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginReimageAll(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
         * releases the compute resources it uses. You are not billed for the compute resources of this
         * virtual machine once it is deallocated.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.deallocate = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginDeallocate(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual machine of a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMsUpdateResponse>
         */
        VirtualMachineScaleSetVMs.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
            return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a virtual machine from a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMs.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, getOperationSpec$i, callback);
        };
        VirtualMachineScaleSetVMs.prototype.getInstanceView = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, getInstanceViewOperationSpec$1, callback);
        };
        VirtualMachineScaleSetVMs.prototype.list = function (resourceGroupName, virtualMachineScaleSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                virtualMachineScaleSetName: virtualMachineScaleSetName,
                options: options
            }, listOperationSpec$d, callback);
        };
        /**
         * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
         * you are getting charged for the resources. Instead, use deallocate to release resources and
         * avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.powerOff = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginPowerOff(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.restart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginRestart(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.start = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginStart(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and
         * powers it back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.redeploy = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginRedeploy(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMs.prototype.retrieveBootDiagnosticsData = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, retrieveBootDiagnosticsDataOperationSpec$1, callback);
        };
        /**
         * Performs maintenance on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.performMaintenance = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.beginPerformMaintenance(resourceGroupName, vmScaleSetName, instanceId, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMs.prototype.simulateEviction = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, simulateEvictionOperationSpec$1, callback);
        };
        /**
         * Run command on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMsRunCommandResponse>
         */
        VirtualMachineScaleSetVMs.prototype.runCommand = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
            return this.beginRunCommand(resourceGroupName, vmScaleSetName, instanceId, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginReimage = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginReimageOperationSpec$2, options);
        };
        /**
         * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
         * This operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginReimageAll = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginReimageAllOperationSpec$1, options);
        };
        /**
         * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
         * releases the compute resources it uses. You are not billed for the compute resources of this
         * virtual machine once it is deallocated.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginDeallocate = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginDeallocateOperationSpec$2, options);
        };
        /**
         * Updates a virtual machine of a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$8, options);
        };
        /**
         * Deletes a virtual machine from a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        /**
         * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
         * you are getting charged for the resources. Instead, use deallocate to release resources and
         * avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginPowerOff = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginPowerOffOperationSpec$2, options);
        };
        /**
         * Restarts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRestart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginRestartOperationSpec$2, options);
        };
        /**
         * Starts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginStart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginStartOperationSpec$2, options);
        };
        /**
         * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and
         * powers it back on.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRedeploy = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginRedeployOperationSpec$2, options);
        };
        /**
         * Performs maintenance on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginPerformMaintenance = function (resourceGroupName, vmScaleSetName, instanceId, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, beginPerformMaintenanceOperationSpec$2, options);
        };
        /**
         * Run command on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRunCommand = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                parameters: parameters,
                options: options
            }, beginRunCommandOperationSpec$1, options);
        };
        VirtualMachineScaleSetVMs.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return VirtualMachineScaleSetVMs;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            expand1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var getInstanceViewOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            select,
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var retrieveBootDiagnosticsDataOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/retrieveBootDiagnosticsData",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            sasUriExpirationTimeInMinutes,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RetrieveBootDiagnosticsDataResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var simulateEvictionOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/simulateEviction",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginReimageOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmScaleSetVMReimageInput"
            ],
            mapper: VirtualMachineScaleSetVMReimageParameters
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginReimageAllOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginDeallocateOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, VirtualMachineScaleSetVM), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            202: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            forceDeletion,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginPowerOffOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            skipShutdown,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginRestartOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginStartOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginRedeployOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginPerformMaintenanceOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginRunCommandOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RunCommandInput), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RunCommandResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            select,
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        LogAnalyticsInputBase: LogAnalyticsInputBase,
        LogAnalyticsOperationResult: LogAnalyticsOperationResult,
        LogAnalyticsOutput: LogAnalyticsOutput,
        RequestRateByIntervalInput: RequestRateByIntervalInput,
        ThrottledRequestsInput: ThrottledRequestsInput
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LogAnalytics. */
    var LogAnalytics = /** @class */ (function () {
        /**
         * Create a LogAnalytics.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function LogAnalytics(client) {
            this.client = client;
        }
        /**
         * Export logs that show Api requests made by this subscription in the given time window to show
         * throttling activities.
         * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<Models.LogAnalyticsExportRequestRateByIntervalResponse>
         */
        LogAnalytics.prototype.exportRequestRateByInterval = function (parameters, location, options) {
            return this.beginExportRequestRateByInterval(parameters, location, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Export logs that show total throttled Api requests for this subscription in the given time
         * window.
         * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<Models.LogAnalyticsExportThrottledRequestsResponse>
         */
        LogAnalytics.prototype.exportThrottledRequests = function (parameters, location, options) {
            return this.beginExportThrottledRequests(parameters, location, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Export logs that show Api requests made by this subscription in the given time window to show
         * throttling activities.
         * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LogAnalytics.prototype.beginExportRequestRateByInterval = function (parameters, location, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                location: location,
                options: options
            }, beginExportRequestRateByIntervalOperationSpec, options);
        };
        /**
         * Export logs that show total throttled Api requests for this subscription in the given time
         * window.
         * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LogAnalytics.prototype.beginExportThrottledRequests = function (parameters, location, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                location: location,
                options: options
            }, beginExportThrottledRequestsOperationSpec, options);
        };
        return LogAnalytics;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$n);
    var beginExportRequestRateByIntervalOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getRequestRateByInterval",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RequestRateByIntervalInput), { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogAnalyticsOperationResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };
    var beginExportThrottledRequestsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getThrottledRequests",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ThrottledRequestsInput), { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogAnalyticsOperationResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandDocument: RunCommandDocument,
        RunCommandDocumentBase: RunCommandDocumentBase,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandListResult: RunCommandListResult,
        RunCommandParameterDefinition: RunCommandParameterDefinition,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandsListResult: VirtualMachineRunCommandsListResult,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineRunCommands. */
    var VirtualMachineRunCommands = /** @class */ (function () {
        /**
         * Create a VirtualMachineRunCommands.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineRunCommands(client) {
            this.client = client;
        }
        VirtualMachineRunCommands.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$e, callback);
        };
        VirtualMachineRunCommands.prototype.get = function (location, commandId, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                commandId: commandId,
                options: options
            }, getOperationSpec$j, callback);
        };
        /**
         * The operation to create or update the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be created or
         * updated.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineRunCommandsCreateOrUpdateResponse>
         */
        VirtualMachineRunCommands.prototype.createOrUpdate = function (resourceGroupName, vmName, runCommandName, runCommand, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmName, runCommandName, runCommand, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be updated.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineRunCommandsUpdateResponse>
         */
        VirtualMachineRunCommands.prototype.update = function (resourceGroupName, vmName, runCommandName, runCommand, options) {
            return this.beginUpdate(resourceGroupName, vmName, runCommandName, runCommand, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be deleted.
         * @param runCommandName The name of the virtual machine run command.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineRunCommands.prototype.deleteMethod = function (resourceGroupName, vmName, runCommandName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmName, runCommandName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineRunCommands.prototype.getByVirtualMachine = function (resourceGroupName, vmName, runCommandName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                runCommandName: runCommandName,
                options: options
            }, getByVirtualMachineOperationSpec, callback);
        };
        VirtualMachineRunCommands.prototype.listByVirtualMachine = function (resourceGroupName, vmName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                options: options
            }, listByVirtualMachineOperationSpec, callback);
        };
        /**
         * The operation to create or update the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be created or
         * updated.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineRunCommands.prototype.beginCreateOrUpdate = function (resourceGroupName, vmName, runCommandName, runCommand, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                runCommandName: runCommandName,
                runCommand: runCommand,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * The operation to update the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be updated.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineRunCommands.prototype.beginUpdate = function (resourceGroupName, vmName, runCommandName, runCommand, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                runCommandName: runCommandName,
                runCommand: runCommand,
                options: options
            }, beginUpdateOperationSpec$9, options);
        };
        /**
         * The operation to delete the run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the run command should be deleted.
         * @param runCommandName The name of the virtual machine run command.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineRunCommands.prototype.beginDeleteMethod = function (resourceGroupName, vmName, runCommandName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmName: vmName,
                runCommandName: runCommandName,
                options: options
            }, beginDeleteMethodOperationSpec$b, options);
        };
        VirtualMachineRunCommands.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        VirtualMachineRunCommands.prototype.listByVirtualMachineNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByVirtualMachineNextOperationSpec, callback);
        };
        return VirtualMachineRunCommands;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$o);
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands/{commandId}",
        urlParameters: [
            location1,
            commandId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandDocument
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var getByVirtualMachineOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listByVirtualMachineOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommandsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runCommand",
            mapper: __assign(__assign({}, VirtualMachineRunCommand), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            201: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginUpdateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runCommand",
            mapper: __assign(__assign({}, VirtualMachineRunCommandUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginDeleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listByVirtualMachineNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommandsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationGroupUpdate: CapacityReservationGroupUpdate,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUpdate: CapacityReservationUpdate,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostGroupUpdate: DedicatedHostGroupUpdate,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DedicatedHostUpdate: DedicatedHostUpdate,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        ImageUpdate: ImageUpdate,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProximityPlacementGroupUpdate: ProximityPlacementGroupUpdate,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointCollectionUpdate: RestorePointCollectionUpdate,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        SshPublicKeyUpdateResource: SshPublicKeyUpdateResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResource: UpdateResource,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineRunCommandsListResult: VirtualMachineRunCommandsListResult,
        VirtualMachineRunCommandUpdate: VirtualMachineRunCommandUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        VirtualMachineUpdate: VirtualMachineUpdate,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetVMRunCommands. */
    var VirtualMachineScaleSetVMRunCommands = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetVMRunCommands.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetVMRunCommands(client) {
            this.client = client;
        }
        /**
         * The operation to create or update the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
            return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMRunCommandsUpdateResponse>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
            return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options) {
            return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, runCommandName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMRunCommands.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                runCommandName: runCommandName,
                options: options
            }, getOperationSpec$k, callback);
        };
        VirtualMachineScaleSetVMRunCommands.prototype.list = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                options: options
            }, listOperationSpec$f, callback);
        };
        /**
         * The operation to create or update the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                runCommandName: runCommandName,
                runCommand: runCommand,
                options: options
            }, beginCreateOrUpdateOperationSpec$9, options);
        };
        /**
         * The operation to update the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                runCommandName: runCommandName,
                runCommand: runCommand,
                options: options
            }, beginUpdateOperationSpec$a, options);
        };
        /**
         * The operation to delete the VMSS VM run command.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param runCommandName The name of the virtual machine run command.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMRunCommands.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                vmScaleSetName: vmScaleSetName,
                instanceId: instanceId,
                runCommandName: runCommandName,
                options: options
            }, beginDeleteMethodOperationSpec$c, options);
        };
        VirtualMachineScaleSetVMRunCommands.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        return VirtualMachineScaleSetVMRunCommands;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$p);
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommandsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginCreateOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runCommand",
            mapper: __assign(__assign({}, VirtualMachineRunCommand), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            201: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginUpdateOperationSpec$a = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runCommand",
            mapper: __assign(__assign({}, VirtualMachineRunCommandUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommand
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginDeleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            runCommandName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineRunCommandsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ResourceSku: ResourceSku,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkusResult: ResourceSkusResult,
        ResourceSkuZoneDetails: ResourceSkuZoneDetails
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceSkus. */
    var ResourceSkus = /** @class */ (function () {
        /**
         * Create a ResourceSkus.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function ResourceSkus(client) {
            this.client = client;
        }
        ResourceSkus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$g, callback);
        };
        ResourceSkus.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return ResourceSkus;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$q);
    var listOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion1,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccessUri: AccessUri,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskList: DiskList,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        DiskUpdate: DiskUpdate,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        GrantAccessData: GrantAccessData,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Disks. */
    var Disks = /** @class */ (function () {
        /**
         * Create a Disks.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Disks(client) {
            this.client = client;
        }
        /**
         * Creates or updates a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksCreateOrUpdateResponse>
         */
        Disks.prototype.createOrUpdate = function (resourceGroupName, diskName, disk, options) {
            return this.beginCreateOrUpdate(resourceGroupName, diskName, disk, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Patch disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksUpdateResponse>
         */
        Disks.prototype.update = function (resourceGroupName, diskName, disk, options) {
            return this.beginUpdate(resourceGroupName, diskName, disk, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Disks.prototype.get = function (resourceGroupName, diskName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                options: options
            }, getOperationSpec$l, callback);
        };
        /**
         * Deletes a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.deleteMethod = function (resourceGroupName, diskName, options) {
            return this.beginDeleteMethod(resourceGroupName, diskName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Disks.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$5, callback);
        };
        Disks.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$h, callback);
        };
        /**
         * Grants access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksGrantAccessResponse>
         */
        Disks.prototype.grantAccess = function (resourceGroupName, diskName, grantAccessData, options) {
            return this.beginGrantAccess(resourceGroupName, diskName, grantAccessData, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revokes access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.revokeAccess = function (resourceGroupName, diskName, options) {
            return this.beginRevokeAccess(resourceGroupName, diskName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginCreateOrUpdate = function (resourceGroupName, diskName, disk, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                disk: disk,
                options: options
            }, beginCreateOrUpdateOperationSpec$a, options);
        };
        /**
         * Updates (patches) a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Patch disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginUpdate = function (resourceGroupName, diskName, disk, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                disk: disk,
                options: options
            }, beginUpdateOperationSpec$b, options);
        };
        /**
         * Deletes a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginDeleteMethod = function (resourceGroupName, diskName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                options: options
            }, beginDeleteMethodOperationSpec$d, options);
        };
        /**
         * Grants access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginGrantAccess = function (resourceGroupName, diskName, grantAccessData, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                grantAccessData: grantAccessData,
                options: options
            }, beginGrantAccessOperationSpec, options);
        };
        /**
         * Revokes access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginRevokeAccess = function (resourceGroupName, diskName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskName: diskName,
                options: options
            }, beginRevokeAccessOperationSpec, options);
        };
        Disks.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$5, callback);
        };
        Disks.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return Disks;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$r);
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listByResourceGroupOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/disks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginCreateOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disk",
            mapper: __assign(__assign({}, Disk), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Disk
            },
            202: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginUpdateOperationSpec$b = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disk",
            mapper: __assign(__assign({}, DiskUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Disk
            },
            202: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginDeleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginGrantAccessOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/beginGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "grantAccessData",
            mapper: __assign(__assign({}, GrantAccessData), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessUri
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var beginRevokeAccessOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/endGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listByResourceGroupNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccessUri: AccessUri,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        GrantAccessData: GrantAccessData,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotList: SnapshotList,
        SnapshotSku: SnapshotSku,
        SnapshotUpdate: SnapshotUpdate,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Snapshots. */
    var Snapshots = /** @class */ (function () {
        /**
         * Create a Snapshots.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Snapshots(client) {
            this.client = client;
        }
        /**
         * Creates or updates a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsCreateOrUpdateResponse>
         */
        Snapshots.prototype.createOrUpdate = function (resourceGroupName, snapshotName, snapshot, options) {
            return this.beginCreateOrUpdate(resourceGroupName, snapshotName, snapshot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsUpdateResponse>
         */
        Snapshots.prototype.update = function (resourceGroupName, snapshotName, snapshot, options) {
            return this.beginUpdate(resourceGroupName, snapshotName, snapshot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Snapshots.prototype.get = function (resourceGroupName, snapshotName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                options: options
            }, getOperationSpec$m, callback);
        };
        /**
         * Deletes a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Snapshots.prototype.deleteMethod = function (resourceGroupName, snapshotName, options) {
            return this.beginDeleteMethod(resourceGroupName, snapshotName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Snapshots.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$6, callback);
        };
        Snapshots.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$i, callback);
        };
        /**
         * Grants access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get snapshot access
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsGrantAccessResponse>
         */
        Snapshots.prototype.grantAccess = function (resourceGroupName, snapshotName, grantAccessData, options) {
            return this.beginGrantAccess(resourceGroupName, snapshotName, grantAccessData, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revokes access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Snapshots.prototype.revokeAccess = function (resourceGroupName, snapshotName, options) {
            return this.beginRevokeAccess(resourceGroupName, snapshotName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginCreateOrUpdate = function (resourceGroupName, snapshotName, snapshot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                snapshot: snapshot,
                options: options
            }, beginCreateOrUpdateOperationSpec$b, options);
        };
        /**
         * Updates (patches) a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginUpdate = function (resourceGroupName, snapshotName, snapshot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                snapshot: snapshot,
                options: options
            }, beginUpdateOperationSpec$c, options);
        };
        /**
         * Deletes a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginDeleteMethod = function (resourceGroupName, snapshotName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                options: options
            }, beginDeleteMethodOperationSpec$e, options);
        };
        /**
         * Grants access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get snapshot access
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginGrantAccess = function (resourceGroupName, snapshotName, grantAccessData, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                grantAccessData: grantAccessData,
                options: options
            }, beginGrantAccessOperationSpec$1, options);
        };
        /**
         * Revokes access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginRevokeAccess = function (resourceGroupName, snapshotName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                snapshotName: snapshotName,
                options: options
            }, beginRevokeAccessOperationSpec$1, options);
        };
        Snapshots.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$6, callback);
        };
        Snapshots.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        return Snapshots;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$s);
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listByResourceGroupOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/snapshots",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginCreateOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "snapshot",
            mapper: __assign(__assign({}, Snapshot), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            202: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginUpdateOperationSpec$c = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "snapshot",
            mapper: __assign(__assign({}, SnapshotUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            202: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginDeleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginGrantAccessOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/beginGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "grantAccessData",
            mapper: __assign(__assign({}, GrantAccessData), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessUri
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginRevokeAccessOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/endGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listByResourceGroupNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetList: DiskEncryptionSetList,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskEncryptionSetUpdate: DiskEncryptionSetUpdate,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        ResourceUriList: ResourceUriList,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DiskEncryptionSets. */
    var DiskEncryptionSets = /** @class */ (function () {
        /**
         * Create a DiskEncryptionSets.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function DiskEncryptionSets(client) {
            this.client = client;
        }
        /**
         * Creates or updates a disk encryption set
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk
         * encryption set operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskEncryptionSetsCreateOrUpdateResponse>
         */
        DiskEncryptionSets.prototype.createOrUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
            return this.beginCreateOrUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a disk encryption set.
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
         * encryption set operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskEncryptionSetsUpdateResponse>
         */
        DiskEncryptionSets.prototype.update = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
            return this.beginUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskEncryptionSets.prototype.get = function (resourceGroupName, diskEncryptionSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskEncryptionSetName: diskEncryptionSetName,
                options: options
            }, getOperationSpec$n, callback);
        };
        /**
         * Deletes a disk encryption set.
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DiskEncryptionSets.prototype.deleteMethod = function (resourceGroupName, diskEncryptionSetName, options) {
            return this.beginDeleteMethod(resourceGroupName, diskEncryptionSetName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskEncryptionSets.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$7, callback);
        };
        DiskEncryptionSets.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$j, callback);
        };
        DiskEncryptionSets.prototype.listAssociatedResources = function (resourceGroupName, diskEncryptionSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskEncryptionSetName: diskEncryptionSetName,
                options: options
            }, listAssociatedResourcesOperationSpec, callback);
        };
        /**
         * Creates or updates a disk encryption set
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk
         * encryption set operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskEncryptionSets.prototype.beginCreateOrUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskEncryptionSetName: diskEncryptionSetName,
                diskEncryptionSet: diskEncryptionSet,
                options: options
            }, beginCreateOrUpdateOperationSpec$c, options);
        };
        /**
         * Updates (patches) a disk encryption set.
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
         * encryption set operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskEncryptionSets.prototype.beginUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskEncryptionSetName: diskEncryptionSetName,
                diskEncryptionSet: diskEncryptionSet,
                options: options
            }, beginUpdateOperationSpec$d, options);
        };
        /**
         * Deletes a disk encryption set.
         * @param resourceGroupName The name of the resource group.
         * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
         * can't be changed after the disk encryption set is created. Supported characters for the name are
         * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskEncryptionSets.prototype.beginDeleteMethod = function (resourceGroupName, diskEncryptionSetName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskEncryptionSetName: diskEncryptionSetName,
                options: options
            }, beginDeleteMethodOperationSpec$f, options);
        };
        DiskEncryptionSets.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$7, callback);
        };
        DiskEncryptionSets.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$d, callback);
        };
        DiskEncryptionSets.prototype.listAssociatedResourcesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAssociatedResourcesNextOperationSpec, callback);
        };
        return DiskEncryptionSets;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$t);
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskEncryptionSetName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskEncryptionSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByResourceGroupOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskEncryptionSetList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskEncryptionSets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskEncryptionSetList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listAssociatedResourcesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}/associatedResources",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskEncryptionSetName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUriList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginCreateOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskEncryptionSetName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "diskEncryptionSet",
            mapper: __assign(__assign({}, DiskEncryptionSet), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiskEncryptionSet
            },
            202: {
                bodyMapper: DiskEncryptionSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginUpdateOperationSpec$d = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskEncryptionSetName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "diskEncryptionSet",
            mapper: __assign(__assign({}, DiskEncryptionSetUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiskEncryptionSet
            },
            202: {
                bodyMapper: DiskEncryptionSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginDeleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskEncryptionSetName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByResourceGroupNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskEncryptionSetList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskEncryptionSetList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listAssociatedResourcesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUriList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskAccessList: DiskAccessList,
        DiskAccessUpdate: DiskAccessUpdate,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
        PrivateLinkResource: PrivateLinkResource,
        PrivateLinkResourceListResult: PrivateLinkResourceListResult,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DiskAccesses. */
    var DiskAccesses = /** @class */ (function () {
        /**
         * Create a DiskAccesses.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function DiskAccesses(client) {
            this.client = client;
        }
        /**
         * Creates or updates a disk access resource
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskAccess disk access object supplied in the body of the Put disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskAccessesCreateOrUpdateResponse>
         */
        DiskAccesses.prototype.createOrUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
            return this.beginCreateOrUpdate(resourceGroupName, diskAccessName, diskAccess, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskAccessesUpdateResponse>
         */
        DiskAccesses.prototype.update = function (resourceGroupName, diskAccessName, diskAccess, options) {
            return this.beginUpdate(resourceGroupName, diskAccessName, diskAccess, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskAccesses.prototype.get = function (resourceGroupName, diskAccessName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                options: options
            }, getOperationSpec$o, callback);
        };
        /**
         * Deletes a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DiskAccesses.prototype.deleteMethod = function (resourceGroupName, diskAccessName, options) {
            return this.beginDeleteMethod(resourceGroupName, diskAccessName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskAccesses.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$8, callback);
        };
        DiskAccesses.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$k, callback);
        };
        DiskAccesses.prototype.getPrivateLinkResources = function (resourceGroupName, diskAccessName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                options: options
            }, getPrivateLinkResourcesOperationSpec, callback);
        };
        /**
         * Approve or reject a private endpoint connection under disk access resource, this can't be used
         * to create a new private endpoint connection.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param privateEndpointConnection private endpoint connection object supplied in the body of the
         * Put private endpoint connection operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskAccessesUpdateAPrivateEndpointConnectionResponse>
         */
        DiskAccesses.prototype.updateAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options) {
            return this.beginUpdateAPrivateEndpointConnection(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskAccesses.prototype.getAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, getAPrivateEndpointConnectionOperationSpec, callback);
        };
        /**
         * Deletes a private endpoint connection under a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DiskAccesses.prototype.deleteAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options) {
            return this.beginDeleteAPrivateEndpointConnection(resourceGroupName, diskAccessName, privateEndpointConnectionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DiskAccesses.prototype.listPrivateEndpointConnections = function (resourceGroupName, diskAccessName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                options: options
            }, listPrivateEndpointConnectionsOperationSpec, callback);
        };
        /**
         * Creates or updates a disk access resource
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskAccess disk access object supplied in the body of the Put disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskAccesses.prototype.beginCreateOrUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                diskAccess: diskAccess,
                options: options
            }, beginCreateOrUpdateOperationSpec$d, options);
        };
        /**
         * Updates (patches) a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskAccesses.prototype.beginUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                diskAccess: diskAccess,
                options: options
            }, beginUpdateOperationSpec$e, options);
        };
        /**
         * Deletes a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskAccesses.prototype.beginDeleteMethod = function (resourceGroupName, diskAccessName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                options: options
            }, beginDeleteMethodOperationSpec$g, options);
        };
        /**
         * Approve or reject a private endpoint connection under disk access resource, this can't be used
         * to create a new private endpoint connection.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param privateEndpointConnection private endpoint connection object supplied in the body of the
         * Put private endpoint connection operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskAccesses.prototype.beginUpdateAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                privateEndpointConnection: privateEndpointConnection,
                options: options
            }, beginUpdateAPrivateEndpointConnectionOperationSpec, options);
        };
        /**
         * Deletes a private endpoint connection under a disk access resource.
         * @param resourceGroupName The name of the resource group.
         * @param diskAccessName The name of the disk access resource that is being created. The name can't
         * be changed after the disk encryption set is created. Supported characters for the name are a-z,
         * A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskAccesses.prototype.beginDeleteAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                diskAccessName: diskAccessName,
                privateEndpointConnectionName: privateEndpointConnectionName,
                options: options
            }, beginDeleteAPrivateEndpointConnectionOperationSpec, options);
        };
        DiskAccesses.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$8, callback);
        };
        DiskAccesses.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$e, callback);
        };
        DiskAccesses.prototype.listPrivateEndpointConnectionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listPrivateEndpointConnectionsNextOperationSpec, callback);
        };
        return DiskAccesses;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$u);
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskAccess
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listByResourceGroupOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskAccessList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskAccesses",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskAccessList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var getPrivateLinkResourcesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateLinkResources",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateLinkResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var getAPrivateEndpointConnectionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listPrivateEndpointConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginCreateOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "diskAccess",
            mapper: __assign(__assign({}, DiskAccess), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiskAccess
            },
            202: {
                bodyMapper: DiskAccess
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginUpdateOperationSpec$e = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "diskAccess",
            mapper: __assign(__assign({}, DiskAccessUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiskAccess
            },
            202: {
                bodyMapper: DiskAccess
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginDeleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginUpdateAPrivateEndpointConnectionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "privateEndpointConnection",
            mapper: __assign(__assign({}, PrivateEndpointConnection), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            202: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginDeleteAPrivateEndpointConnectionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskAccessName,
            privateEndpointConnectionName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listByResourceGroupNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskAccessList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskAccessList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listPrivateEndpointConnectionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccessUri: AccessUri,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        DiskRestorePoint: DiskRestorePoint,
        DiskRestorePointList: DiskRestorePointList,
        Encryption: Encryption,
        GrantAccessData: GrantAccessData,
        InnerError: InnerError,
        ProxyOnlyResource: ProxyOnlyResource,
        PurchasePlan: PurchasePlan
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DiskRestorePointOperations. */
    var DiskRestorePointOperations = /** @class */ (function () {
        /**
         * Create a DiskRestorePointOperations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function DiskRestorePointOperations(client) {
            this.client = client;
        }
        DiskRestorePointOperations.prototype.get = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                vmRestorePointName: vmRestorePointName,
                diskRestorePointName: diskRestorePointName,
                options: options
            }, getOperationSpec$p, callback);
        };
        DiskRestorePointOperations.prototype.listByRestorePoint = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                vmRestorePointName: vmRestorePointName,
                options: options
            }, listByRestorePointOperationSpec, callback);
        };
        /**
         * Grants access to a diskRestorePoint.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection that the disk restore
         * point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name
         * length is 80 characters.
         * @param vmRestorePointName The name of the vm restore point that the disk disk restore point
         * belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is
         * 80 characters.
         * @param diskRestorePointName The name of the disk restore point created. Supported characters for
         * the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DiskRestorePointGrantAccessResponse>
         */
        DiskRestorePointOperations.prototype.grantAccess = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options) {
            return this.beginGrantAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revokes access to a diskRestorePoint.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection that the disk restore
         * point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name
         * length is 80 characters.
         * @param vmRestorePointName The name of the vm restore point that the disk disk restore point
         * belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is
         * 80 characters.
         * @param diskRestorePointName The name of the disk restore point created. Supported characters for
         * the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DiskRestorePointOperations.prototype.revokeAccess = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options) {
            return this.beginRevokeAccess(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Grants access to a diskRestorePoint.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection that the disk restore
         * point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name
         * length is 80 characters.
         * @param vmRestorePointName The name of the vm restore point that the disk disk restore point
         * belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is
         * 80 characters.
         * @param diskRestorePointName The name of the disk restore point created. Supported characters for
         * the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskRestorePointOperations.prototype.beginGrantAccess = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, grantAccessData, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                vmRestorePointName: vmRestorePointName,
                diskRestorePointName: diskRestorePointName,
                grantAccessData: grantAccessData,
                options: options
            }, beginGrantAccessOperationSpec$2, options);
        };
        /**
         * Revokes access to a diskRestorePoint.
         * @param resourceGroupName The name of the resource group.
         * @param restorePointCollectionName The name of the restore point collection that the disk restore
         * point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name
         * length is 80 characters.
         * @param vmRestorePointName The name of the vm restore point that the disk disk restore point
         * belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is
         * 80 characters.
         * @param diskRestorePointName The name of the disk restore point created. Supported characters for
         * the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DiskRestorePointOperations.prototype.beginRevokeAccess = function (resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                restorePointCollectionName: restorePointCollectionName,
                vmRestorePointName: vmRestorePointName,
                diskRestorePointName: diskRestorePointName,
                options: options
            }, beginRevokeAccessOperationSpec$2, options);
        };
        DiskRestorePointOperations.prototype.listByRestorePointNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByRestorePointNextOperationSpec, callback);
        };
        return DiskRestorePointOperations;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$v);
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            diskRestorePointName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskRestorePoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listByRestorePointOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskRestorePointList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginGrantAccessOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/beginGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            diskRestorePointName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "grantAccessData",
            mapper: __assign(__assign({}, GrantAccessData), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessUri
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginRevokeAccessOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/restorePointCollections/{restorePointCollectionName}/restorePoints/{vmRestorePointName}/diskRestorePoints/{diskRestorePointName}/endGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            restorePointCollectionName,
            vmRestorePointName,
            diskRestorePointName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listByRestorePointNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskRestorePointList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryList: GalleryList,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Galleries. */
    var Galleries = /** @class */ (function () {
        /**
         * Create a Galleries.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Galleries(client) {
            this.client = client;
        }
        /**
         * Create or update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleriesCreateOrUpdateResponse>
         */
        Galleries.prototype.createOrUpdate = function (resourceGroupName, galleryName, gallery, options) {
            return this.beginCreateOrUpdate(resourceGroupName, galleryName, gallery, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleriesUpdateResponse>
         */
        Galleries.prototype.update = function (resourceGroupName, galleryName, gallery, options) {
            return this.beginUpdate(resourceGroupName, galleryName, gallery, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Galleries.prototype.get = function (resourceGroupName, galleryName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                options: options
            }, getOperationSpec$q, callback);
        };
        /**
         * Delete a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Galleries.prototype.deleteMethod = function (resourceGroupName, galleryName, options) {
            return this.beginDeleteMethod(resourceGroupName, galleryName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Galleries.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$9, callback);
        };
        Galleries.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$l, callback);
        };
        /**
         * Create or update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Galleries.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, gallery, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                gallery: gallery,
                options: options
            }, beginCreateOrUpdateOperationSpec$e, options);
        };
        /**
         * Update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Galleries.prototype.beginUpdate = function (resourceGroupName, galleryName, gallery, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                gallery: gallery,
                options: options
            }, beginUpdateOperationSpec$f, options);
        };
        /**
         * Delete a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Galleries.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                options: options
            }, beginDeleteMethodOperationSpec$h, options);
        };
        Galleries.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$9, callback);
        };
        Galleries.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$f, callback);
        };
        return Galleries;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$w);
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3,
            select
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Gallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listByResourceGroupOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/galleries",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var beginCreateOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "gallery",
            mapper: __assign(__assign({}, Gallery), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Gallery
            },
            201: {
                bodyMapper: Gallery
            },
            202: {
                bodyMapper: Gallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var beginUpdateOperationSpec$f = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "gallery",
            mapper: __assign(__assign({}, GalleryUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Gallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var beginDeleteMethodOperationSpec$h = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listByResourceGroupNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageList: GalleryImageList,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryImages. */
    var GalleryImages = /** @class */ (function () {
        /**
         * Create a GalleryImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryImages(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery image definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * created.
         * @param galleryImageName The name of the gallery image definition to be created or updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the create or update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImagesCreateOrUpdateResponse>
         */
        GalleryImages.prototype.createOrUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImage, options) {
            return this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryImageName, galleryImage, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a gallery image definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * updated.
         * @param galleryImageName The name of the gallery image definition to be updated. The allowed
         * characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
         * maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImagesUpdateResponse>
         */
        GalleryImages.prototype.update = function (resourceGroupName, galleryName, galleryImageName, galleryImage, options) {
            return this.beginUpdate(resourceGroupName, galleryName, galleryImageName, galleryImage, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImages.prototype.get = function (resourceGroupName, galleryName, galleryImageName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                options: options
            }, getOperationSpec$r, callback);
        };
        /**
         * Delete a gallery image.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * deleted.
         * @param galleryImageName The name of the gallery image definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryImages.prototype.deleteMethod = function (resourceGroupName, galleryName, galleryImageName, options) {
            return this.beginDeleteMethod(resourceGroupName, galleryName, galleryImageName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImages.prototype.listByGallery = function (resourceGroupName, galleryName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                options: options
            }, listByGalleryOperationSpec, callback);
        };
        /**
         * Create or update a gallery image definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * created.
         * @param galleryImageName The name of the gallery image definition to be created or updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the create or update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImages.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImage, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImage: galleryImage,
                options: options
            }, beginCreateOrUpdateOperationSpec$f, options);
        };
        /**
         * Update a gallery image definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * updated.
         * @param galleryImageName The name of the gallery image definition to be updated. The allowed
         * characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
         * maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImages.prototype.beginUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImage, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImage: galleryImage,
                options: options
            }, beginUpdateOperationSpec$g, options);
        };
        /**
         * Delete a gallery image.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * deleted.
         * @param galleryImageName The name of the gallery image definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImages.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, galleryImageName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                options: options
            }, beginDeleteMethodOperationSpec$i, options);
        };
        GalleryImages.prototype.listByGalleryNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGalleryNextOperationSpec, callback);
        };
        return GalleryImages;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$x);
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByGalleryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginCreateOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImage",
            mapper: __assign(__assign({}, GalleryImage), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImage
            },
            201: {
                bodyMapper: GalleryImage
            },
            202: {
                bodyMapper: GalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginUpdateOperationSpec$g = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImage",
            mapper: __assign(__assign({}, GalleryImageUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginDeleteMethodOperationSpec$i = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByGalleryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionList: GalleryImageVersionList,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryImageVersions. */
    var GalleryImageVersions = /** @class */ (function () {
        /**
         * Create a GalleryImageVersions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryImageVersions(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version is
         * to be created.
         * @param galleryImageVersionName The name of the gallery image version to be created. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the create or update gallery image version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImageVersionsCreateOrUpdateResponse>
         */
        GalleryImageVersions.prototype.createOrUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options) {
            return this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version is
         * to be updated.
         * @param galleryImageVersionName The name of the gallery image version to be updated. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the update gallery image version operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImageVersionsUpdateResponse>
         */
        GalleryImageVersions.prototype.update = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options) {
            return this.beginUpdate(resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImageVersions.prototype.get = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImageVersionName: galleryImageVersionName,
                options: options
            }, getOperationSpec$s, callback);
        };
        /**
         * Delete a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version
         * resides.
         * @param galleryImageVersionName The name of the gallery image version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryImageVersions.prototype.deleteMethod = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, options) {
            return this.beginDeleteMethod(resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImageVersions.prototype.listByGalleryImage = function (resourceGroupName, galleryName, galleryImageName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                options: options
            }, listByGalleryImageOperationSpec, callback);
        };
        /**
         * Create or update a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version is
         * to be created.
         * @param galleryImageVersionName The name of the gallery image version to be created. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the create or update gallery image version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImageVersions.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImageVersionName: galleryImageVersionName,
                galleryImageVersion: galleryImageVersion,
                options: options
            }, beginCreateOrUpdateOperationSpec$g, options);
        };
        /**
         * Update a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version is
         * to be updated.
         * @param galleryImageVersionName The name of the gallery image version to be updated. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the update gallery image version operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImageVersions.prototype.beginUpdate = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, galleryImageVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImageVersionName: galleryImageVersionName,
                galleryImageVersion: galleryImageVersion,
                options: options
            }, beginUpdateOperationSpec$h, options);
        };
        /**
         * Delete a gallery image version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery image definition in which the Image Version
         * resides.
         * @param galleryImageVersionName The name of the gallery image version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImageVersions.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryImageName: galleryImageName,
                galleryImageVersionName: galleryImageVersionName,
                options: options
            }, beginDeleteMethodOperationSpec$j, options);
        };
        GalleryImageVersions.prototype.listByGalleryImageNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGalleryImageNextOperationSpec, callback);
        };
        return GalleryImageVersions;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$y);
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            expand0,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var listByGalleryImageOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var beginCreateOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImageVersion",
            mapper: __assign(__assign({}, GalleryImageVersion), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImageVersion
            },
            201: {
                bodyMapper: GalleryImageVersion
            },
            202: {
                bodyMapper: GalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var beginUpdateOperationSpec$h = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImageVersion",
            mapper: __assign(__assign({}, GalleryImageVersionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var beginDeleteMethodOperationSpec$j = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var listByGalleryImageNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationList: GalleryApplicationList,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryApplications. */
    var GalleryApplications = /** @class */ (function () {
        /**
         * Create a GalleryApplications.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryApplications(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery Application Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be created.
         * @param galleryApplicationName The name of the gallery Application Definition to be created or
         * updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed
         * in the middle. The maximum length is 80 characters.
         * @param galleryApplication Parameters supplied to the create or update gallery Application
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryApplicationsCreateOrUpdateResponse>
         */
        GalleryApplications.prototype.createOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
            return this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a gallery Application Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be updated.
         * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryApplication Parameters supplied to the update gallery Application operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryApplicationsUpdateResponse>
         */
        GalleryApplications.prototype.update = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
            return this.beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryApplications.prototype.get = function (resourceGroupName, galleryName, galleryApplicationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                options: options
            }, getOperationSpec$t, callback);
        };
        /**
         * Delete a gallery Application.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be deleted.
         * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryApplications.prototype.deleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, options) {
            return this.beginDeleteMethod(resourceGroupName, galleryName, galleryApplicationName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryApplications.prototype.listByGallery = function (resourceGroupName, galleryName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                options: options
            }, listByGalleryOperationSpec$1, callback);
        };
        /**
         * Create or update a gallery Application Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be created.
         * @param galleryApplicationName The name of the gallery Application Definition to be created or
         * updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed
         * in the middle. The maximum length is 80 characters.
         * @param galleryApplication Parameters supplied to the create or update gallery Application
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplications.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplication: galleryApplication,
                options: options
            }, beginCreateOrUpdateOperationSpec$h, options);
        };
        /**
         * Update a gallery Application Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be updated.
         * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryApplication Parameters supplied to the update gallery Application operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplications.prototype.beginUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplication: galleryApplication,
                options: options
            }, beginUpdateOperationSpec$i, options);
        };
        /**
         * Delete a gallery Application.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition is to be deleted.
         * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplications.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                options: options
            }, beginDeleteMethodOperationSpec$k, options);
        };
        GalleryApplications.prototype.listByGalleryNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGalleryNextOperationSpec$1, callback);
        };
        return GalleryApplications;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$z);
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var listByGalleryOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplicationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var beginCreateOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryApplication",
            mapper: __assign(__assign({}, GalleryApplication), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryApplication
            },
            201: {
                bodyMapper: GalleryApplication
            },
            202: {
                bodyMapper: GalleryApplication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var beginUpdateOperationSpec$i = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryApplication",
            mapper: __assign(__assign({}, GalleryApplicationUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryApplication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var beginDeleteMethodOperationSpec$k = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var listByGalleryNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplicationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionList: GalleryApplicationVersionList,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryApplicationVersions. */
    var GalleryApplicationVersions = /** @class */ (function () {
        /**
         * Create a GalleryApplicationVersions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryApplicationVersions(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version is to be created.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
         * Needs to follow semantic version name pattern: The allowed characters are digit and period.
         * Digits must be within the range of a 32-bit integer. Format:
         * <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
         * Version operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryApplicationVersionsCreateOrUpdateResponse>
         */
        GalleryApplicationVersions.prototype.createOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
            return this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version is to be updated.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
         * Needs to follow semantic version name pattern: The allowed characters are digit and period.
         * Digits must be within the range of a 32-bit integer. Format:
         * <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryApplicationVersionsUpdateResponse>
         */
        GalleryApplicationVersions.prototype.update = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
            return this.beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryApplicationVersions.prototype.get = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplicationVersionName: galleryApplicationVersionName,
                options: options
            }, getOperationSpec$u, callback);
        };
        /**
         * Delete a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version resides.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryApplicationVersions.prototype.deleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options) {
            return this.beginDeleteMethod(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryApplicationVersions.prototype.listByGalleryApplication = function (resourceGroupName, galleryName, galleryApplicationName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                options: options
            }, listByGalleryApplicationOperationSpec, callback);
        };
        /**
         * Create or update a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version is to be created.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be created.
         * Needs to follow semantic version name pattern: The allowed characters are digit and period.
         * Digits must be within the range of a 32-bit integer. Format:
         * <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryApplicationVersion Parameters supplied to the create or update gallery Application
         * Version operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplicationVersions.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplicationVersionName: galleryApplicationVersionName,
                galleryApplicationVersion: galleryApplicationVersion,
                options: options
            }, beginCreateOrUpdateOperationSpec$i, options);
        };
        /**
         * Update a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version is to be updated.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be updated.
         * Needs to follow semantic version name pattern: The allowed characters are digit and period.
         * Digits must be within the range of a 32-bit integer. Format:
         * <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryApplicationVersion Parameters supplied to the update gallery Application Version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplicationVersions.prototype.beginUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, galleryApplicationVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplicationVersionName: galleryApplicationVersionName,
                galleryApplicationVersion: galleryApplicationVersion,
                options: options
            }, beginUpdateOperationSpec$j, options);
        };
        /**
         * Delete a gallery Application Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Application Gallery in which the Application
         * Definition resides.
         * @param galleryApplicationName The name of the gallery Application Definition in which the
         * Application Version resides.
         * @param galleryApplicationVersionName The name of the gallery Application Version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryApplicationVersions.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                galleryApplicationName: galleryApplicationName,
                galleryApplicationVersionName: galleryApplicationVersionName,
                options: options
            }, beginDeleteMethodOperationSpec$l, options);
        };
        GalleryApplicationVersions.prototype.listByGalleryApplicationNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGalleryApplicationNextOperationSpec, callback);
        };
        return GalleryApplicationVersions;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$A);
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            galleryApplicationVersionName
        ],
        queryParameters: [
            expand0,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplicationVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var listByGalleryApplicationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplicationVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var beginCreateOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            galleryApplicationVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryApplicationVersion",
            mapper: __assign(__assign({}, GalleryApplicationVersion), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryApplicationVersion
            },
            201: {
                bodyMapper: GalleryApplicationVersion
            },
            202: {
                bodyMapper: GalleryApplicationVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var beginUpdateOperationSpec$j = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            galleryApplicationVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryApplicationVersion",
            mapper: __assign(__assign({}, GalleryApplicationVersionUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryApplicationVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var beginDeleteMethodOperationSpec$l = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryApplicationName,
            galleryApplicationVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var listByGalleryApplicationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryApplicationVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GallerySharingProfile. */
    var GallerySharingProfile = /** @class */ (function () {
        /**
         * Create a GallerySharingProfile.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GallerySharingProfile(client) {
            this.client = client;
        }
        /**
         * Update sharing profile of a gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery.
         * @param sharingUpdate Parameters supplied to the update gallery sharing profile.
         * @param [options] The optional parameters
         * @returns Promise<Models.GallerySharingProfileUpdateResponse>
         */
        GallerySharingProfile.prototype.update = function (resourceGroupName, galleryName, sharingUpdate, options) {
            return this.beginUpdate(resourceGroupName, galleryName, sharingUpdate, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update sharing profile of a gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery.
         * @param sharingUpdate Parameters supplied to the update gallery sharing profile.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GallerySharingProfile.prototype.beginUpdate = function (resourceGroupName, galleryName, sharingUpdate, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                galleryName: galleryName,
                sharingUpdate: sharingUpdate,
                options: options
            }, beginUpdateOperationSpec$k, options);
        };
        return GallerySharingProfile;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$B);
    var beginUpdateOperationSpec$k = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/share",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "sharingUpdate",
            mapper: __assign(__assign({}, SharingUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SharingUpdate
            },
            202: {
                bodyMapper: SharingUpdate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        Disallowed: Disallowed,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        ImagePurchasePlan: ImagePurchasePlan,
        InnerError: InnerError,
        PirResource: PirResource,
        PirSharedGalleryResource: PirSharedGalleryResource,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        SharedGallery: SharedGallery,
        SharedGalleryImage: SharedGalleryImage,
        SharedGalleryImageVersion: SharedGalleryImageVersion,
        SharedGalleryList: SharedGalleryList
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SharedGalleries. */
    var SharedGalleries = /** @class */ (function () {
        /**
         * Create a SharedGalleries.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function SharedGalleries(client) {
            this.client = client;
        }
        SharedGalleries.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$m, callback);
        };
        SharedGalleries.prototype.get = function (location, galleryUniqueName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                galleryUniqueName: galleryUniqueName,
                options: options
            }, getOperationSpec$v, callback);
        };
        SharedGalleries.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$g, callback);
        };
        return SharedGalleries;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$C);
    var listOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries",
        urlParameters: [
            subscriptionId,
            location0
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var getOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}",
        urlParameters: [
            subscriptionId,
            location0,
            galleryUniqueName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var listNextOperationSpec$g = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        Disallowed: Disallowed,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        ImagePurchasePlan: ImagePurchasePlan,
        InnerError: InnerError,
        PirResource: PirResource,
        PirSharedGalleryResource: PirSharedGalleryResource,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        SharedGallery: SharedGallery,
        SharedGalleryImage: SharedGalleryImage,
        SharedGalleryImageList: SharedGalleryImageList,
        SharedGalleryImageVersion: SharedGalleryImageVersion
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SharedGalleryImages. */
    var SharedGalleryImages = /** @class */ (function () {
        /**
         * Create a SharedGalleryImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function SharedGalleryImages(client) {
            this.client = client;
        }
        SharedGalleryImages.prototype.list = function (location, galleryUniqueName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                galleryUniqueName: galleryUniqueName,
                options: options
            }, listOperationSpec$n, callback);
        };
        SharedGalleryImages.prototype.get = function (location, galleryUniqueName, galleryImageName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                galleryUniqueName: galleryUniqueName,
                galleryImageName: galleryImageName,
                options: options
            }, getOperationSpec$w, callback);
        };
        SharedGalleryImages.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$h, callback);
        };
        return SharedGalleryImages;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$D);
    var listOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images",
        urlParameters: [
            subscriptionId,
            location0,
            galleryUniqueName
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var getOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            location0,
            galleryUniqueName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listNextOperationSpec$h = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        Disallowed: Disallowed,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        ImagePurchasePlan: ImagePurchasePlan,
        InnerError: InnerError,
        PirResource: PirResource,
        PirSharedGalleryResource: PirSharedGalleryResource,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        SharedGallery: SharedGallery,
        SharedGalleryImage: SharedGalleryImage,
        SharedGalleryImageVersion: SharedGalleryImageVersion,
        SharedGalleryImageVersionList: SharedGalleryImageVersionList
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SharedGalleryImageVersions. */
    var SharedGalleryImageVersions = /** @class */ (function () {
        /**
         * Create a SharedGalleryImageVersions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function SharedGalleryImageVersions(client) {
            this.client = client;
        }
        SharedGalleryImageVersions.prototype.list = function (location, galleryUniqueName, galleryImageName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                galleryUniqueName: galleryUniqueName,
                galleryImageName: galleryImageName,
                options: options
            }, listOperationSpec$o, callback);
        };
        SharedGalleryImageVersions.prototype.get = function (location, galleryUniqueName, galleryImageName, galleryImageVersionName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                galleryUniqueName: galleryUniqueName,
                galleryImageName: galleryImageName,
                galleryImageVersionName: galleryImageVersionName,
                options: options
            }, getOperationSpec$x, callback);
        };
        SharedGalleryImageVersions.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$i, callback);
        };
        return SharedGalleryImageVersions;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$E);
    var listOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images/{galleryImageName}/versions",
        urlParameters: [
            subscriptionId,
            location0,
            galleryUniqueName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var getOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/sharedGalleries/{galleryUniqueName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            location0,
            galleryUniqueName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var listNextOperationSpec$i = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion3,
            sharedTo
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedGalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$F = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceSku: InstanceSku,
        InstanceViewStatus: InstanceViewStatus,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceInstanceViewStatus: ResourceInstanceViewStatus,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RoleInstance: RoleInstance,
        RoleInstanceInstanceView: RoleInstanceInstanceView,
        RoleInstanceListResult: RoleInstanceListResult,
        RoleInstanceNetworkProfile: RoleInstanceNetworkProfile,
        RoleInstanceProperties: RoleInstanceProperties,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudServiceRoleInstances. */
    var CloudServiceRoleInstances = /** @class */ (function () {
        /**
         * Create a CloudServiceRoleInstances.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CloudServiceRoleInstances(client) {
            this.client = client;
        }
        /**
         * Deletes a role instance from a cloud service.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServiceRoleInstances.prototype.deleteMethod = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.beginDeleteMethod(roleInstanceName, resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudServiceRoleInstances.prototype.get = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getOperationSpec$y, callback);
        };
        CloudServiceRoleInstances.prototype.getInstanceView = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getInstanceViewOperationSpec$2, callback);
        };
        CloudServiceRoleInstances.prototype.list = function (resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, listOperationSpec$p, callback);
        };
        /**
         * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
         * cloud service.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServiceRoleInstances.prototype.restart = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.beginRestart(roleInstanceName, resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
         * web roles or worker roles.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServiceRoleInstances.prototype.reimage = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.beginReimage(roleInstanceName, resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
         * web roles or worker roles and initializes the storage resources that are used by them. If you do
         * not want to initialize storage resources, you can use Reimage Role Instance.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServiceRoleInstances.prototype.rebuild = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.beginRebuild(roleInstanceName, resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudServiceRoleInstances.prototype.getRemoteDesktopFile = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getRemoteDesktopFileOperationSpec, callback);
        };
        /**
         * Deletes a role instance from a cloud service.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServiceRoleInstances.prototype.beginDeleteMethod = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginDeleteMethodOperationSpec$m, options);
        };
        /**
         * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
         * cloud service.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServiceRoleInstances.prototype.beginRestart = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginRestartOperationSpec$3, options);
        };
        /**
         * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
         * web roles or worker roles.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServiceRoleInstances.prototype.beginReimage = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginReimageOperationSpec$3, options);
        };
        /**
         * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
         * web roles or worker roles and initializes the storage resources that are used by them. If you do
         * not want to initialize storage resources, you can use Reimage Role Instance.
         * @param roleInstanceName Name of the role instance.
         * @param resourceGroupName
         * @param cloudServiceName
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServiceRoleInstances.prototype.beginRebuild = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                roleInstanceName: roleInstanceName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginRebuildOperationSpec, options);
        };
        CloudServiceRoleInstances.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$j, callback);
        };
        return CloudServiceRoleInstances;
    }());
    // Operation Specifications
    var serializer$F = new msRest.Serializer(Mappers$F);
    var getOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4,
            expand1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleInstance
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var getInstanceViewOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/instanceView",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleInstanceInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4,
            expand1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var getRemoteDesktopFileOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/remoteDesktopFile",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginDeleteMethodOperationSpec$m = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginRestartOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/restart",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginReimageOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/reimage",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginRebuildOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/rebuild",
        urlParameters: [
            roleInstanceName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listNextOperationSpec$j = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4,
            expand1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$G = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        CloudServiceRole: CloudServiceRole,
        CloudServiceRoleListResult: CloudServiceRoleListResult,
        CloudServiceRoleProperties: CloudServiceRoleProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        InnerError: InnerError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudServiceRoles. */
    var CloudServiceRoles = /** @class */ (function () {
        /**
         * Create a CloudServiceRoles.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CloudServiceRoles(client) {
            this.client = client;
        }
        CloudServiceRoles.prototype.get = function (roleName, resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                roleName: roleName,
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getOperationSpec$z, callback);
        };
        CloudServiceRoles.prototype.list = function (resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, listOperationSpec$q, callback);
        };
        CloudServiceRoles.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$k, callback);
        };
        return CloudServiceRoles;
    }());
    // Operation Specifications
    var serializer$G = new msRest.Serializer(Mappers$G);
    var getOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roles/{roleName}",
        urlParameters: [
            roleName,
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceRole
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roles",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceRoleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listNextOperationSpec$k = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceRoleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$H = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        ApiEntityReference: ApiEntityReference,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        AutomaticRepairsPolicy: AutomaticRepairsPolicy,
        AvailabilitySet: AvailabilitySet,
        AvailablePatchSummary: AvailablePatchSummary,
        BaseResource: BaseResource,
        BillingProfile: BillingProfile,
        BootDiagnostics: BootDiagnostics,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        CapacityReservation: CapacityReservation,
        CapacityReservationGroup: CapacityReservationGroup,
        CapacityReservationGroupInstanceView: CapacityReservationGroupInstanceView,
        CapacityReservationInstanceView: CapacityReservationInstanceView,
        CapacityReservationInstanceViewWithName: CapacityReservationInstanceViewWithName,
        CapacityReservationProfile: CapacityReservationProfile,
        CapacityReservationUtilization: CapacityReservationUtilization,
        CloudError: CloudError,
        CloudService: CloudService,
        CloudServiceExtensionProfile: CloudServiceExtensionProfile,
        CloudServiceExtensionProperties: CloudServiceExtensionProperties,
        CloudServiceInstanceView: CloudServiceInstanceView,
        CloudServiceListResult: CloudServiceListResult,
        CloudServiceNetworkProfile: CloudServiceNetworkProfile,
        CloudServiceOsProfile: CloudServiceOsProfile,
        CloudServiceProperties: CloudServiceProperties,
        CloudServiceRoleProfile: CloudServiceRoleProfile,
        CloudServiceRoleProfileProperties: CloudServiceRoleProfileProperties,
        CloudServiceRoleSku: CloudServiceRoleSku,
        CloudServiceUpdate: CloudServiceUpdate,
        CloudServiceVaultAndSecretReference: CloudServiceVaultAndSecretReference,
        CloudServiceVaultCertificate: CloudServiceVaultCertificate,
        CloudServiceVaultSecretGroup: CloudServiceVaultSecretGroup,
        CreationData: CreationData,
        DataDisk: DataDisk,
        DataDiskImage: DataDiskImage,
        DataDiskImageEncryption: DataDiskImageEncryption,
        DedicatedHost: DedicatedHost,
        DedicatedHostAllocatableVM: DedicatedHostAllocatableVM,
        DedicatedHostAvailableCapacity: DedicatedHostAvailableCapacity,
        DedicatedHostGroup: DedicatedHostGroup,
        DedicatedHostGroupInstanceView: DedicatedHostGroupInstanceView,
        DedicatedHostInstanceView: DedicatedHostInstanceView,
        DedicatedHostInstanceViewWithName: DedicatedHostInstanceViewWithName,
        DiagnosticsProfile: DiagnosticsProfile,
        DiffDiskSettings: DiffDiskSettings,
        Disallowed: Disallowed,
        DisallowedConfiguration: DisallowedConfiguration,
        Disk: Disk,
        DiskAccess: DiskAccess,
        DiskEncryptionSet: DiskEncryptionSet,
        DiskEncryptionSetParameters: DiskEncryptionSetParameters,
        DiskEncryptionSettings: DiskEncryptionSettings,
        DiskImageEncryption: DiskImageEncryption,
        DiskInstanceView: DiskInstanceView,
        DiskSecurityProfile: DiskSecurityProfile,
        DiskSku: DiskSku,
        Encryption: Encryption,
        EncryptionImages: EncryptionImages,
        EncryptionSetIdentity: EncryptionSetIdentity,
        EncryptionSettingsCollection: EncryptionSettingsCollection,
        EncryptionSettingsElement: EncryptionSettingsElement,
        ExtendedLocation: ExtendedLocation,
        Extension: Extension,
        Gallery: Gallery,
        GalleryApplication: GalleryApplication,
        GalleryApplicationUpdate: GalleryApplicationUpdate,
        GalleryApplicationVersion: GalleryApplicationVersion,
        GalleryApplicationVersionPublishingProfile: GalleryApplicationVersionPublishingProfile,
        GalleryApplicationVersionUpdate: GalleryApplicationVersionUpdate,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryArtifactVersionSource: GalleryArtifactVersionSource,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageFeature: GalleryImageFeature,
        GalleryImageIdentifier: GalleryImageIdentifier,
        GalleryImageUpdate: GalleryImageUpdate,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryImageVersionUpdate: GalleryImageVersionUpdate,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryUpdate: GalleryUpdate,
        HardwareProfile: HardwareProfile,
        Image: Image,
        ImageDataDisk: ImageDataDisk,
        ImageDisk: ImageDisk,
        ImageDiskReference: ImageDiskReference,
        ImageOSDisk: ImageOSDisk,
        ImagePurchasePlan: ImagePurchasePlan,
        ImageReference: ImageReference,
        ImageStorageProfile: ImageStorageProfile,
        InnerError: InnerError,
        InstanceViewStatus: InstanceViewStatus,
        InstanceViewStatusesSummary: InstanceViewStatusesSummary,
        KeyForDiskEncryptionSet: KeyForDiskEncryptionSet,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        LastPatchInstallationSummary: LastPatchInstallationSummary,
        LinuxConfiguration: LinuxConfiguration,
        LinuxPatchSettings: LinuxPatchSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        LoadBalancerConfigurationProperties: LoadBalancerConfigurationProperties,
        LoadBalancerFrontendIPConfiguration: LoadBalancerFrontendIPConfiguration,
        LoadBalancerFrontendIPConfigurationProperties: LoadBalancerFrontendIPConfigurationProperties,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        OSDisk: OSDisk,
        OSDiskImage: OSDiskImage,
        OSDiskImageEncryption: OSDiskImageEncryption,
        OSProfile: OSProfile,
        PatchSettings: PatchSettings,
        Plan: Plan,
        PrivateEndpoint: PrivateEndpoint,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        PropertyUpdatesInProgress: PropertyUpdatesInProgress,
        ProximityPlacementGroup: ProximityPlacementGroup,
        ProxyResource: ProxyResource,
        PublicIPAddressSku: PublicIPAddressSku,
        PurchasePlan: PurchasePlan,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        Resource: Resource,
        ResourceInstanceViewStatus: ResourceInstanceViewStatus,
        ResourceRange: ResourceRange,
        RestorePoint: RestorePoint,
        RestorePointCollection: RestorePointCollection,
        RestorePointCollectionSourceProperties: RestorePointCollectionSourceProperties,
        RestorePointProvisioningDetails: RestorePointProvisioningDetails,
        RestorePointSourceMetadata: RestorePointSourceMetadata,
        RestorePointSourceVMDataDisk: RestorePointSourceVMDataDisk,
        RestorePointSourceVMOSDisk: RestorePointSourceVMOSDisk,
        RestorePointSourceVMStorageProfile: RestorePointSourceVMStorageProfile,
        RoleInstances: RoleInstances,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RunCommandInputParameter: RunCommandInputParameter,
        ScaleInPolicy: ScaleInPolicy,
        ScheduledEventsProfile: ScheduledEventsProfile,
        SecurityProfile: SecurityProfile,
        ShareInfoElement: ShareInfoElement,
        SharingProfile: SharingProfile,
        SharingProfileGroup: SharingProfileGroup,
        SharingUpdate: SharingUpdate,
        Sku: Sku,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        SourceVault: SourceVault,
        SpotRestorePolicy: SpotRestorePolicy,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        SshPublicKeyResource: SshPublicKeyResource,
        StatusCodeCount: StatusCodeCount,
        StorageProfile: StorageProfile,
        SubResource: SubResource,
        SubResourceReadOnly: SubResourceReadOnly,
        SubResourceWithColocationStatus: SubResourceWithColocationStatus,
        TargetRegion: TargetRegion,
        TerminateNotificationProfile: TerminateNotificationProfile,
        UefiSettings: UefiSettings,
        UpdateResourceDefinition: UpdateResourceDefinition,
        UpgradePolicy: UpgradePolicy,
        UserArtifactManage: UserArtifactManage,
        UserArtifactSource: UserArtifactSource,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachine: VirtualMachine,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageFeature: VirtualMachineImageFeature,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIpTag: VirtualMachineIpTag,
        VirtualMachineNetworkInterfaceConfiguration: VirtualMachineNetworkInterfaceConfiguration,
        VirtualMachineNetworkInterfaceDnsSettingsConfiguration: VirtualMachineNetworkInterfaceDnsSettingsConfiguration,
        VirtualMachineNetworkInterfaceIPConfiguration: VirtualMachineNetworkInterfaceIPConfiguration,
        VirtualMachinePatchStatus: VirtualMachinePatchStatus,
        VirtualMachinePublicIPAddressConfiguration: VirtualMachinePublicIPAddressConfiguration,
        VirtualMachinePublicIPAddressDnsSettingsConfiguration: VirtualMachinePublicIPAddressDnsSettingsConfiguration,
        VirtualMachineRunCommand: VirtualMachineRunCommand,
        VirtualMachineRunCommandInstanceView: VirtualMachineRunCommandInstanceView,
        VirtualMachineRunCommandScriptSource: VirtualMachineRunCommandScriptSource,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtensionUpdate: VirtualMachineScaleSetExtensionUpdate,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMExtension: VirtualMachineScaleSetVMExtension,
        VirtualMachineScaleSetVMExtensionUpdate: VirtualMachineScaleSetVMExtensionUpdate,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVMNetworkProfileConfiguration: VirtualMachineScaleSetVMNetworkProfileConfiguration,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetVMProtectionPolicy: VirtualMachineScaleSetVMProtectionPolicy,
        WindowsConfiguration: WindowsConfiguration,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudServices. */
    var CloudServices = /** @class */ (function () {
        /**
         * Create a CloudServices.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CloudServices(client) {
            this.client = client;
        }
        /**
         * Create or update a cloud service. Please note some properties can be set only during cloud
         * service creation.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudServicesCreateOrUpdateResponse>
         */
        CloudServices.prototype.createOrUpdate = function (resourceGroupName, cloudServiceName, options) {
            return this.beginCreateOrUpdate(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudServicesUpdateResponse>
         */
        CloudServices.prototype.update = function (resourceGroupName, cloudServiceName, options) {
            return this.beginUpdate(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.deleteMethod = function (resourceGroupName, cloudServiceName, options) {
            return this.beginDeleteMethod(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudServices.prototype.get = function (resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getOperationSpec$A, callback);
        };
        CloudServices.prototype.getInstanceView = function (resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, getInstanceViewOperationSpec$3, callback);
        };
        CloudServices.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$3, callback);
        };
        CloudServices.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$r, callback);
        };
        /**
         * Starts the cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.start = function (resourceGroupName, cloudServiceName, options) {
            return this.beginStart(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Power off the cloud service. Note that resources are still attached and you are getting charged
         * for the resources.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.powerOff = function (resourceGroupName, cloudServiceName, options) {
            return this.beginPowerOff(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts one or more role instances in a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.restart = function (resourceGroupName, cloudServiceName, options) {
            return this.beginRestart(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
         * worker roles.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.reimage = function (resourceGroupName, cloudServiceName, options) {
            return this.beginReimage(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
         * and initializes the storage resources that are used by them. If you do not want to initialize
         * storage resources, you can use Reimage Role Instances.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.rebuild = function (resourceGroupName, cloudServiceName, options) {
            return this.beginRebuild(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes role instances in a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServices.prototype.deleteInstances = function (resourceGroupName, cloudServiceName, options) {
            return this.beginDeleteInstances(resourceGroupName, cloudServiceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or update a cloud service. Please note some properties can be set only during cloud
         * service creation.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginCreateOrUpdate = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginCreateOrUpdateOperationSpec$j, options);
        };
        /**
         * Update a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginUpdate = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginUpdateOperationSpec$l, options);
        };
        /**
         * Deletes a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginDeleteMethod = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginDeleteMethodOperationSpec$n, options);
        };
        /**
         * Starts the cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginStart = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginStartOperationSpec$3, options);
        };
        /**
         * Power off the cloud service. Note that resources are still attached and you are getting charged
         * for the resources.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginPowerOff = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginPowerOffOperationSpec$3, options);
        };
        /**
         * Restarts one or more role instances in a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginRestart = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginRestartOperationSpec$4, options);
        };
        /**
         * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
         * worker roles.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginReimage = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginReimageOperationSpec$4, options);
        };
        /**
         * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
         * and initializes the storage resources that are used by them. If you do not want to initialize
         * storage resources, you can use Reimage Role Instances.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginRebuild = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginRebuildOperationSpec$1, options);
        };
        /**
         * Deletes role instances in a cloud service.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServices.prototype.beginDeleteInstances = function (resourceGroupName, cloudServiceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, beginDeleteInstancesOperationSpec$1, options);
        };
        CloudServices.prototype.listAllNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listAllNextOperationSpec$3, callback);
        };
        CloudServices.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$l, callback);
        };
        return CloudServices;
    }());
    // Operation Specifications
    var serializer$H = new msRest.Serializer(Mappers$H);
    var getOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var getInstanceViewOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/instanceView",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listAllOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/cloudServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginCreateOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: CloudService
        },
        responses: {
            200: {
                bodyMapper: CloudService
            },
            201: {
                bodyMapper: CloudService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginUpdateOperationSpec$l = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: CloudServiceUpdate
        },
        responses: {
            200: {
                bodyMapper: CloudService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginDeleteMethodOperationSpec$n = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginStartOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/start",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginPowerOffOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/poweroff",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginRestartOperationSpec$4 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/restart",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: RoleInstances
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginReimageOperationSpec$4 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/reimage",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: RoleInstances
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginRebuildOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/rebuild",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: RoleInstances
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var beginDeleteInstancesOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/delete",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: RoleInstances
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listAllNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listNextOperationSpec$l = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$I = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        InnerError: InnerError,
        UpdateDomain: UpdateDomain,
        UpdateDomainListResult: UpdateDomainListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudServicesUpdateDomain. */
    var CloudServicesUpdateDomain = /** @class */ (function () {
        /**
         * Create a CloudServicesUpdateDomain.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CloudServicesUpdateDomain(client) {
            this.client = client;
        }
        /**
         * Updates the role instances in the specified update domain.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param updateDomain Specifies an integer value that identifies the update domain. Update domains
         * are identified with a zero-based index: the first update domain has an ID of 0, the second has
         * an ID of 1, and so on.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudServicesUpdateDomain.prototype.walkUpdateDomain = function (resourceGroupName, cloudServiceName, updateDomain, options) {
            return this.beginWalkUpdateDomain(resourceGroupName, cloudServiceName, updateDomain, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudServicesUpdateDomain.prototype.getUpdateDomain = function (resourceGroupName, cloudServiceName, updateDomain, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                updateDomain: updateDomain,
                options: options
            }, getUpdateDomainOperationSpec, callback);
        };
        CloudServicesUpdateDomain.prototype.listUpdateDomains = function (resourceGroupName, cloudServiceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                options: options
            }, listUpdateDomainsOperationSpec, callback);
        };
        /**
         * Updates the role instances in the specified update domain.
         * @param resourceGroupName Name of the resource group.
         * @param cloudServiceName Name of the cloud service.
         * @param updateDomain Specifies an integer value that identifies the update domain. Update domains
         * are identified with a zero-based index: the first update domain has an ID of 0, the second has
         * an ID of 1, and so on.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudServicesUpdateDomain.prototype.beginWalkUpdateDomain = function (resourceGroupName, cloudServiceName, updateDomain, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                cloudServiceName: cloudServiceName,
                updateDomain: updateDomain,
                options: options
            }, beginWalkUpdateDomainOperationSpec, options);
        };
        CloudServicesUpdateDomain.prototype.listUpdateDomainsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listUpdateDomainsNextOperationSpec, callback);
        };
        return CloudServicesUpdateDomain;
    }());
    // Operation Specifications
    var serializer$I = new msRest.Serializer(Mappers$I);
    var getUpdateDomainOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            updateDomain,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateDomain
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listUpdateDomainsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateDomainListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var beginWalkUpdateDomainOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}",
        urlParameters: [
            resourceGroupName,
            cloudServiceName,
            updateDomain,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateDomain
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listUpdateDomainsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateDomainListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$J = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        CloudError: CloudError,
        InnerError: InnerError,
        OSFamily: OSFamily,
        OSFamilyListResult: OSFamilyListResult,
        OSFamilyProperties: OSFamilyProperties,
        OSVersion: OSVersion,
        OSVersionListResult: OSVersionListResult,
        OSVersionProperties: OSVersionProperties,
        OSVersionPropertiesBase: OSVersionPropertiesBase
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudServiceOperatingSystems. */
    var CloudServiceOperatingSystems = /** @class */ (function () {
        /**
         * Create a CloudServiceOperatingSystems.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function CloudServiceOperatingSystems(client) {
            this.client = client;
        }
        CloudServiceOperatingSystems.prototype.getOSVersion = function (location, osVersionName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                osVersionName: osVersionName,
                options: options
            }, getOSVersionOperationSpec, callback);
        };
        CloudServiceOperatingSystems.prototype.listOSVersions = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOSVersionsOperationSpec, callback);
        };
        CloudServiceOperatingSystems.prototype.getOSFamily = function (location, osFamilyName, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                osFamilyName: osFamilyName,
                options: options
            }, getOSFamilyOperationSpec, callback);
        };
        CloudServiceOperatingSystems.prototype.listOSFamilies = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOSFamiliesOperationSpec, callback);
        };
        CloudServiceOperatingSystems.prototype.listOSVersionsNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOSVersionsNextOperationSpec, callback);
        };
        CloudServiceOperatingSystems.prototype.listOSFamiliesNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listOSFamiliesNextOperationSpec, callback);
        };
        return CloudServiceOperatingSystems;
    }());
    // Operation Specifications
    var serializer$J = new msRest.Serializer(Mappers$J);
    var getOSVersionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions/{osVersionName}",
        urlParameters: [
            location0,
            osVersionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listOSVersionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var getOSFamilyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies/{osFamilyName}",
        urlParameters: [
            location0,
            osFamilyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSFamily
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listOSFamiliesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSFamilyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listOSVersionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listOSFamiliesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OSFamilyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-compute";
    var packageVersion = "16.3.0";
    var ComputeManagementClientContext = /** @class */ (function (_super) {
        __extends(ComputeManagementClientContext, _super);
        /**
         * Initializes a new instance of the ComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ComputeManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ComputeManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ComputeManagementClient = /** @class */ (function (_super) {
        __extends(ComputeManagementClient, _super);
        /**
         * Initializes a new instance of the ComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ComputeManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.availabilitySets = new AvailabilitySets(_this);
            _this.proximityPlacementGroups = new ProximityPlacementGroups(_this);
            _this.dedicatedHostGroups = new DedicatedHostGroups(_this);
            _this.dedicatedHosts = new DedicatedHosts(_this);
            _this.sshPublicKeys = new SshPublicKeys(_this);
            _this.virtualMachineExtensionImages = new VirtualMachineExtensionImages(_this);
            _this.virtualMachineExtensions = new VirtualMachineExtensions(_this);
            _this.virtualMachineImages = new VirtualMachineImages(_this);
            _this.virtualMachineImagesEdgeZone = new VirtualMachineImagesEdgeZone(_this);
            _this.usage = new UsageOperations(_this);
            _this.virtualMachines = new VirtualMachines(_this);
            _this.virtualMachineScaleSets = new VirtualMachineScaleSets(_this);
            _this.virtualMachineSizes = new VirtualMachineSizes(_this);
            _this.images = new Images(_this);
            _this.restorePointCollections = new RestorePointCollections(_this);
            _this.restorePoints = new RestorePoints(_this);
            _this.capacityReservationGroups = new CapacityReservationGroups(_this);
            _this.capacityReservations = new CapacityReservations(_this);
            _this.virtualMachineScaleSetExtensions = new VirtualMachineScaleSetExtensions(_this);
            _this.virtualMachineScaleSetRollingUpgrades = new VirtualMachineScaleSetRollingUpgrades(_this);
            _this.virtualMachineScaleSetVMExtensions = new VirtualMachineScaleSetVMExtensions(_this);
            _this.virtualMachineScaleSetVMs = new VirtualMachineScaleSetVMs(_this);
            _this.logAnalytics = new LogAnalytics(_this);
            _this.virtualMachineRunCommands = new VirtualMachineRunCommands(_this);
            _this.virtualMachineScaleSetVMRunCommands = new VirtualMachineScaleSetVMRunCommands(_this);
            _this.resourceSkus = new ResourceSkus(_this);
            _this.disks = new Disks(_this);
            _this.snapshots = new Snapshots(_this);
            _this.diskEncryptionSets = new DiskEncryptionSets(_this);
            _this.diskAccesses = new DiskAccesses(_this);
            _this.diskRestorePoint = new DiskRestorePointOperations(_this);
            _this.galleries = new Galleries(_this);
            _this.galleryImages = new GalleryImages(_this);
            _this.galleryImageVersions = new GalleryImageVersions(_this);
            _this.galleryApplications = new GalleryApplications(_this);
            _this.galleryApplicationVersions = new GalleryApplicationVersions(_this);
            _this.gallerySharingProfile = new GallerySharingProfile(_this);
            _this.sharedGalleries = new SharedGalleries(_this);
            _this.sharedGalleryImages = new SharedGalleryImages(_this);
            _this.sharedGalleryImageVersions = new SharedGalleryImageVersions(_this);
            _this.cloudServiceRoleInstances = new CloudServiceRoleInstances(_this);
            _this.cloudServiceRoles = new CloudServiceRoles(_this);
            _this.cloudServices = new CloudServices(_this);
            _this.cloudServicesUpdateDomain = new CloudServicesUpdateDomain(_this);
            _this.cloudServiceOperatingSystems = new CloudServiceOperatingSystems(_this);
            return _this;
        }
        return ComputeManagementClient;
    }(ComputeManagementClientContext));

    exports.AvailabilitySets = AvailabilitySets;
    exports.CapacityReservationGroups = CapacityReservationGroups;
    exports.CapacityReservations = CapacityReservations;
    exports.CloudServiceOperatingSystems = CloudServiceOperatingSystems;
    exports.CloudServiceRoleInstances = CloudServiceRoleInstances;
    exports.CloudServiceRoles = CloudServiceRoles;
    exports.CloudServices = CloudServices;
    exports.CloudServicesUpdateDomain = CloudServicesUpdateDomain;
    exports.ComputeManagementClient = ComputeManagementClient;
    exports.ComputeManagementClientContext = ComputeManagementClientContext;
    exports.ComputeManagementMappers = mappers;
    exports.ComputeManagementModels = index;
    exports.DedicatedHostGroups = DedicatedHostGroups;
    exports.DedicatedHosts = DedicatedHosts;
    exports.DiskAccesses = DiskAccesses;
    exports.DiskEncryptionSets = DiskEncryptionSets;
    exports.DiskRestorePointOperations = DiskRestorePointOperations;
    exports.Disks = Disks;
    exports.Galleries = Galleries;
    exports.GalleryApplicationVersions = GalleryApplicationVersions;
    exports.GalleryApplications = GalleryApplications;
    exports.GalleryImageVersions = GalleryImageVersions;
    exports.GalleryImages = GalleryImages;
    exports.GallerySharingProfile = GallerySharingProfile;
    exports.Images = Images;
    exports.LogAnalytics = LogAnalytics;
    exports.Operations = Operations;
    exports.ProximityPlacementGroups = ProximityPlacementGroups;
    exports.ResourceSkus = ResourceSkus;
    exports.RestorePointCollections = RestorePointCollections;
    exports.RestorePoints = RestorePoints;
    exports.SharedGalleries = SharedGalleries;
    exports.SharedGalleryImageVersions = SharedGalleryImageVersions;
    exports.SharedGalleryImages = SharedGalleryImages;
    exports.Snapshots = Snapshots;
    exports.SshPublicKeys = SshPublicKeys;
    exports.UsageOperations = UsageOperations;
    exports.VirtualMachineExtensionImages = VirtualMachineExtensionImages;
    exports.VirtualMachineExtensions = VirtualMachineExtensions;
    exports.VirtualMachineImages = VirtualMachineImages;
    exports.VirtualMachineImagesEdgeZone = VirtualMachineImagesEdgeZone;
    exports.VirtualMachineRunCommands = VirtualMachineRunCommands;
    exports.VirtualMachineScaleSetExtensions = VirtualMachineScaleSetExtensions;
    exports.VirtualMachineScaleSetRollingUpgrades = VirtualMachineScaleSetRollingUpgrades;
    exports.VirtualMachineScaleSetVMExtensions = VirtualMachineScaleSetVMExtensions;
    exports.VirtualMachineScaleSetVMRunCommands = VirtualMachineScaleSetVMRunCommands;
    exports.VirtualMachineScaleSetVMs = VirtualMachineScaleSetVMs;
    exports.VirtualMachineScaleSets = VirtualMachineScaleSets;
    exports.VirtualMachineSizes = VirtualMachineSizes;
    exports.VirtualMachines = VirtualMachines;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-compute.js.map
