import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { ComputeManagementClientContext } from "./computeManagementClientContext";
declare class ComputeManagementClient extends ComputeManagementClientContext {
    operations: operations.Operations;
    availabilitySets: operations.AvailabilitySets;
    proximityPlacementGroups: operations.ProximityPlacementGroups;
    dedicatedHostGroups: operations.DedicatedHostGroups;
    dedicatedHosts: operations.DedicatedHosts;
    sshPublicKeys: operations.SshPublicKeys;
    virtualMachineExtensionImages: operations.VirtualMachineExtensionImages;
    virtualMachineExtensions: operations.VirtualMachineExtensions;
    virtualMachineImages: operations.VirtualMachineImages;
    virtualMachineImagesEdgeZone: operations.VirtualMachineImagesEdgeZone;
    usage: operations.UsageOperations;
    virtualMachines: operations.VirtualMachines;
    virtualMachineScaleSets: operations.VirtualMachineScaleSets;
    virtualMachineSizes: operations.VirtualMachineSizes;
    images: operations.Images;
    restorePointCollections: operations.RestorePointCollections;
    restorePoints: operations.RestorePoints;
    capacityReservationGroups: operations.CapacityReservationGroups;
    capacityReservations: operations.CapacityReservations;
    virtualMachineScaleSetExtensions: operations.VirtualMachineScaleSetExtensions;
    virtualMachineScaleSetRollingUpgrades: operations.VirtualMachineScaleSetRollingUpgrades;
    virtualMachineScaleSetVMExtensions: operations.VirtualMachineScaleSetVMExtensions;
    virtualMachineScaleSetVMs: operations.VirtualMachineScaleSetVMs;
    logAnalytics: operations.LogAnalytics;
    virtualMachineRunCommands: operations.VirtualMachineRunCommands;
    virtualMachineScaleSetVMRunCommands: operations.VirtualMachineScaleSetVMRunCommands;
    resourceSkus: operations.ResourceSkus;
    disks: operations.Disks;
    snapshots: operations.Snapshots;
    diskEncryptionSets: operations.DiskEncryptionSets;
    diskAccesses: operations.DiskAccesses;
    diskRestorePoint: operations.DiskRestorePointOperations;
    galleries: operations.Galleries;
    galleryImages: operations.GalleryImages;
    galleryImageVersions: operations.GalleryImageVersions;
    galleryApplications: operations.GalleryApplications;
    galleryApplicationVersions: operations.GalleryApplicationVersions;
    gallerySharingProfile: operations.GallerySharingProfile;
    sharedGalleries: operations.SharedGalleries;
    sharedGalleryImages: operations.SharedGalleryImages;
    sharedGalleryImageVersions: operations.SharedGalleryImageVersions;
    cloudServiceRoleInstances: operations.CloudServiceRoleInstances;
    cloudServiceRoles: operations.CloudServiceRoles;
    cloudServices: operations.CloudServices;
    cloudServicesUpdateDomain: operations.CloudServicesUpdateDomain;
    cloudServiceOperatingSystems: operations.CloudServiceOperatingSystems;
    /**
     * Initializes a new instance of the ComputeManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure. Credentials
     * implementing the TokenCredential interface from the @azure/identity package are recommended. For
     * more information about these credentials, see
     * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
     * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
     * @azure/ms-rest-browserauth are also supported.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
     * subscription. The subscription ID forms part of the URI for every service call.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.ComputeManagementClientOptions);
}
export { ComputeManagementClient, ComputeManagementClientContext, Models as ComputeManagementModels, Mappers as ComputeManagementMappers };
export * from "./operations";
//# sourceMappingURL=computeManagementClient.d.ts.map