/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/virtualMachineScaleSetVMRunCommandsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachineScaleSetVMRunCommands. */
var VirtualMachineScaleSetVMRunCommands = /** @class */ (function () {
    /**
     * Create a VirtualMachineScaleSetVMRunCommands.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineScaleSetVMRunCommands(client) {
        this.client = client;
    }
    /**
     * The operation to create or update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMRunCommandsUpdateResponse>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
        return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to delete the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, runCommandName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSetVMRunCommands.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            runCommandName: runCommandName,
            options: options
        }, getOperationSpec, callback);
    };
    VirtualMachineScaleSetVMRunCommands.prototype.list = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * The operation to create or update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            runCommandName: runCommandName,
            runCommand: runCommand,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * The operation to update the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, runCommand, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            runCommandName: runCommandName,
            runCommand: runCommand,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * The operation to delete the VMSS VM run command.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param runCommandName The name of the virtual machine run command.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMRunCommands.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, runCommandName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            runCommandName: runCommandName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    VirtualMachineScaleSetVMRunCommands.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return VirtualMachineScaleSetVMRunCommands;
}());
export { VirtualMachineScaleSetVMRunCommands };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.runCommandName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineRunCommand
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineRunCommandsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.runCommandName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "runCommand",
        mapper: __assign(__assign({}, Mappers.VirtualMachineRunCommand), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineRunCommand
        },
        201: {
            bodyMapper: Mappers.VirtualMachineRunCommand
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.runCommandName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "runCommand",
        mapper: __assign(__assign({}, Mappers.VirtualMachineRunCommandUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineRunCommand
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/runCommands/{runCommandName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.runCommandName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineRunCommandsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachineScaleSetVMRunCommands.js.map