import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ComputeManagementClientContext } from "../computeManagementClientContext";
/** Class representing a Disks. */
export declare class Disks {
    private readonly client;
    /**
     * Create a Disks.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: ComputeManagementClientContext);
    /**
     * Creates or updates a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param disk Disk object supplied in the body of the Put disk operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, diskName: string, disk: Models.Disk, options?: msRest.RequestOptionsBase): Promise<Models.DisksCreateOrUpdateResponse>;
    /**
     * Updates (patches) a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param disk Disk object supplied in the body of the Patch disk operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksUpdateResponse>
     */
    update(resourceGroupName: string, diskName: string, disk: Models.DiskUpdate, options?: msRest.RequestOptionsBase): Promise<Models.DisksUpdateResponse>;
    /**
     * Gets information about a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksGetResponse>
     */
    get(resourceGroupName: string, diskName: string, options?: msRest.RequestOptionsBase): Promise<Models.DisksGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param callback The callback
     */
    get(resourceGroupName: string, diskName: string, callback: msRest.ServiceCallback<Models.Disk>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, diskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Disk>): void;
    /**
     * Deletes a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, diskName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Lists all the disks under a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DisksListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * Lists all the disks under a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.DisksListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * Grants access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksGrantAccessResponse>
     */
    grantAccess(resourceGroupName: string, diskName: string, grantAccessData: Models.GrantAccessData, options?: msRest.RequestOptionsBase): Promise<Models.DisksGrantAccessResponse>;
    /**
     * Revokes access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    revokeAccess(resourceGroupName: string, diskName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Creates or updates a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param disk Disk object supplied in the body of the Put disk operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, diskName: string, disk: Models.Disk, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Updates (patches) a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param disk Disk object supplied in the body of the Patch disk operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, diskName: string, disk: Models.DiskUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, diskName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Grants access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginGrantAccess(resourceGroupName: string, diskName: string, grantAccessData: Models.GrantAccessData, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Revokes access to a disk.
     * @param resourceGroupName The name of the resource group.
     * @param diskName The name of the managed disk that is being created. The name can't be changed
     * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
     * maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRevokeAccess(resourceGroupName: string, diskName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Lists all the disks under a resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DisksListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * Lists all the disks under a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DisksListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DisksListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskList>): void;
}
//# sourceMappingURL=disks.d.ts.map