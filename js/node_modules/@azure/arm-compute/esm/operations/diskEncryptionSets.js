/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/diskEncryptionSetsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DiskEncryptionSets. */
var DiskEncryptionSets = /** @class */ (function () {
    /**
     * Create a DiskEncryptionSets.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function DiskEncryptionSets(client) {
        this.client = client;
    }
    /**
     * Creates or updates a disk encryption set
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk
     * encryption set operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiskEncryptionSetsCreateOrUpdateResponse>
     */
    DiskEncryptionSets.prototype.createOrUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
        return this.beginCreateOrUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates (patches) a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
     * encryption set operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiskEncryptionSetsUpdateResponse>
     */
    DiskEncryptionSets.prototype.update = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
        return this.beginUpdate(resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskEncryptionSets.prototype.get = function (resourceGroupName, diskEncryptionSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskEncryptionSetName: diskEncryptionSetName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    DiskEncryptionSets.prototype.deleteMethod = function (resourceGroupName, diskEncryptionSetName, options) {
        return this.beginDeleteMethod(resourceGroupName, diskEncryptionSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskEncryptionSets.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    DiskEncryptionSets.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    DiskEncryptionSets.prototype.listAssociatedResources = function (resourceGroupName, diskEncryptionSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskEncryptionSetName: diskEncryptionSetName,
            options: options
        }, listAssociatedResourcesOperationSpec, callback);
    };
    /**
     * Creates or updates a disk encryption set
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Put disk
     * encryption set operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskEncryptionSets.prototype.beginCreateOrUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskEncryptionSetName: diskEncryptionSetName,
            diskEncryptionSet: diskEncryptionSet,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates (patches) a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskEncryptionSet disk encryption set object supplied in the body of the Patch disk
     * encryption set operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskEncryptionSets.prototype.beginUpdate = function (resourceGroupName, diskEncryptionSetName, diskEncryptionSet, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskEncryptionSetName: diskEncryptionSetName,
            diskEncryptionSet: diskEncryptionSet,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a disk encryption set.
     * @param resourceGroupName The name of the resource group.
     * @param diskEncryptionSetName The name of the disk encryption set that is being created. The name
     * can't be changed after the disk encryption set is created. Supported characters for the name are
     * a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskEncryptionSets.prototype.beginDeleteMethod = function (resourceGroupName, diskEncryptionSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskEncryptionSetName: diskEncryptionSetName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    DiskEncryptionSets.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    DiskEncryptionSets.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    DiskEncryptionSets.prototype.listAssociatedResourcesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAssociatedResourcesNextOperationSpec, callback);
    };
    return DiskEncryptionSets;
}());
export { DiskEncryptionSets };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskEncryptionSetName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSetList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskEncryptionSets",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSetList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAssociatedResourcesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}/associatedResources",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskEncryptionSetName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceUriList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskEncryptionSetName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "diskEncryptionSet",
        mapper: __assign(__assign({}, Mappers.DiskEncryptionSet), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSet
        },
        202: {
            bodyMapper: Mappers.DiskEncryptionSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskEncryptionSetName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "diskEncryptionSet",
        mapper: __assign(__assign({}, Mappers.DiskEncryptionSetUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSet
        },
        202: {
            bodyMapper: Mappers.DiskEncryptionSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskEncryptionSetName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSetList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskEncryptionSetList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAssociatedResourcesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceUriList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=diskEncryptionSets.js.map