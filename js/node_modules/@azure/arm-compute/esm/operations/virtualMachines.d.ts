import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ComputeManagementClientContext } from "../computeManagementClientContext";
/** Class representing a VirtualMachines. */
export declare class VirtualMachines {
    private readonly client;
    /**
     * Create a VirtualMachines.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: ComputeManagementClientContext);
    /**
     * Gets all the virtual machines under the specified subscription for the specified location.
     * @param location The location for which virtual machines under the subscription are queried.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListByLocationResponse>
     */
    listByLocation(location: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListByLocationResponse>;
    /**
     * @param location The location for which virtual machines under the subscription are queried.
     * @param callback The callback
     */
    listByLocation(location: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param location The location for which virtual machines under the subscription are queried.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByLocation(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Capture Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesCaptureResponse>
     */
    capture(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineCaptureParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCaptureResponse>;
    /**
     * The operation to create or update a virtual machine. Please note some properties can be set only
     * during virtual machine creation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Create Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCreateOrUpdateResponse>;
    /**
     * The operation to update a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesUpdateResponse>
     */
    update(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineUpdate, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesUpdateResponse>;
    /**
     * The operation to delete a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
    /**
     * Retrieves information about the model view or the instance view of a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesGetResponse>
     */
    get(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesGetOptionalParams): Promise<Models.VirtualMachinesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    get(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, vmName: string, options: Models.VirtualMachinesGetOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
    /**
     * Retrieves information about the run-time state of a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesInstanceViewResponse>
     */
    instanceView(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesInstanceViewResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    instanceView(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachineInstanceView>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    instanceView(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineInstanceView>): void;
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    convertToManagedDisks(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deallocate(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the
     * virtual machine before performing this operation. <br>For Windows, please refer to [Create a
     * managed image of a generalized VM in
     * Azure](https://docs.microsoft.com/azure/virtual-machines/windows/capture-image-resource).<br>For
     * Linux, please refer to [How to create an image of a virtual machine or
     * VHD](https://docs.microsoft.com/azure/virtual-machines/linux/capture-image).
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    generalize(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    generalize(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    generalize(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists all of the virtual machines in the specified resource group. Use the nextLink property in
     * the response to get the next page of virtual machines.
     * @param resourceGroupName The name of the resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListResponse>
     */
    list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param callback The callback
     */
    list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * Lists all of the virtual machines in the specified subscription. Use the nextLink property in
     * the response to get the next page of virtual machines.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListAllResponse>
     */
    listAll(options?: Models.VirtualMachinesListAllOptionalParams): Promise<Models.VirtualMachinesListAllResponse>;
    /**
     * @param callback The callback
     */
    listAll(callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAll(options: Models.VirtualMachinesListAllOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListAvailableSizesResponse>
     */
    listAvailableSizes(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListAvailableSizesResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    listAvailableSizes(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachineSizeListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAvailableSizes(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineSizeListResult>): void;
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    powerOff(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesPowerOffOptionalParams): Promise<msRest.RestResponse>;
    /**
     * The operation to reapply a virtual machine's state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    reapply(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The operation to restart a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The operation to start a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    start(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Shuts down the virtual machine, moves it to a new node, and powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    redeploy(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    reimage(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesReimageOptionalParams): Promise<msRest.RestResponse>;
    /**
     * The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesRetrieveBootDiagnosticsDataResponse>
     */
    retrieveBootDiagnosticsData(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesRetrieveBootDiagnosticsDataOptionalParams): Promise<Models.VirtualMachinesRetrieveBootDiagnosticsDataResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    retrieveBootDiagnosticsData(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.RetrieveBootDiagnosticsDataResult>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    retrieveBootDiagnosticsData(resourceGroupName: string, vmName: string, options: Models.VirtualMachinesRetrieveBootDiagnosticsDataOptionalParams, callback: msRest.ServiceCallback<Models.RetrieveBootDiagnosticsDataResult>): void;
    /**
     * The operation to perform maintenance on a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    performMaintenance(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The operation to simulate the eviction of spot virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    simulateEviction(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param callback The callback
     */
    simulateEviction(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param options The optional parameters
     * @param callback The callback
     */
    simulateEviction(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Assess patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesAssessPatchesResponse>
     */
    assessPatches(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesAssessPatchesResponse>;
    /**
     * Installs patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param installPatchesInput Input for InstallPatches as directly received by the API
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesInstallPatchesResponse>
     */
    installPatches(resourceGroupName: string, vmName: string, installPatchesInput: Models.VirtualMachineInstallPatchesParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesInstallPatchesResponse>;
    /**
     * Run command on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesRunCommandResponse>
     */
    runCommand(resourceGroupName: string, vmName: string, parameters: Models.RunCommandInput, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesRunCommandResponse>;
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Capture Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCapture(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineCaptureParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to create or update a virtual machine. Please note some properties can be set only
     * during virtual machine creation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Create Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to update a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to delete a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesBeginDeleteMethodOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginConvertToManagedDisks(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeallocate(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginPowerOff(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesBeginPowerOffOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to reapply a virtual machine's state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginReapply(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to restart a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to start a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Shuts down the virtual machine, moves it to a new node, and powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRedeploy(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginReimage(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesBeginReimageOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * The operation to perform maintenance on a virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginPerformMaintenance(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Assess patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginAssessPatches(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Installs patches on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param installPatchesInput Input for InstallPatches as directly received by the API
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginInstallPatches(resourceGroupName: string, vmName: string, installPatchesInput: Models.VirtualMachineInstallPatchesParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Run command on the VM.
     * @param resourceGroupName The name of the resource group.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRunCommand(resourceGroupName: string, vmName: string, parameters: Models.RunCommandInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets all the virtual machines under the specified subscription for the specified location.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListByLocationNextResponse>
     */
    listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListByLocationNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByLocationNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * Lists all of the virtual machines in the specified resource group. Use the nextLink property in
     * the response to get the next page of virtual machines.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * Lists all of the virtual machines in the specified subscription. Use the nextLink property in
     * the response to get the next page of virtual machines.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachinesListAllNextResponse>
     */
    listAllNext(nextPageLink: string, options?: Models.VirtualMachinesListAllNextOptionalParams): Promise<Models.VirtualMachinesListAllNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAllNext(nextPageLink: string, options: Models.VirtualMachinesListAllNextOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
}
//# sourceMappingURL=virtualMachines.d.ts.map