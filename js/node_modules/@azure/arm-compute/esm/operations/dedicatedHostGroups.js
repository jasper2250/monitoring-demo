/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/dedicatedHostGroupsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DedicatedHostGroups. */
var DedicatedHostGroups = /** @class */ (function () {
    /**
     * Create a DedicatedHostGroups.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function DedicatedHostGroups(client) {
        this.client = client;
    }
    DedicatedHostGroups.prototype.createOrUpdate = function (resourceGroupName, hostGroupName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hostGroupName: hostGroupName,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.update = function (resourceGroupName, hostGroupName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hostGroupName: hostGroupName,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.deleteMethod = function (resourceGroupName, hostGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hostGroupName: hostGroupName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.get = function (resourceGroupName, hostGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            hostGroupName: hostGroupName,
            options: options
        }, getOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.listBySubscription = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    DedicatedHostGroups.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySubscriptionNextOperationSpec, callback);
    };
    return DedicatedHostGroups;
}());
export { DedicatedHostGroups };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.hostGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DedicatedHostGroup), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroup
        },
        201: {
            bodyMapper: Mappers.DedicatedHostGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.hostGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DedicatedHostGroupUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.hostGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.hostGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand1,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroup
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/hostGroups",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DedicatedHostGroupListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=dedicatedHostGroups.js.map