/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/virtualMachineScaleSetVMsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachineScaleSetVMs. */
var VirtualMachineScaleSetVMs = /** @class */ (function () {
    /**
     * Create a VirtualMachineScaleSetVMs.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineScaleSetVMs(client) {
        this.client = client;
    }
    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.reimage = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginReimage(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
     * This operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.reimageAll = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginReimageAll(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
     * releases the compute resources it uses. You are not billed for the compute resources of this
     * virtual machine once it is deallocated.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.deallocate = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginDeallocate(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates a virtual machine of a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or
     * updated.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMsUpdateResponse>
     */
    VirtualMachineScaleSetVMs.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
        return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSetVMs.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, getOperationSpec, callback);
    };
    VirtualMachineScaleSetVMs.prototype.getInstanceView = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, getInstanceViewOperationSpec, callback);
    };
    VirtualMachineScaleSetVMs.prototype.list = function (resourceGroupName, virtualMachineScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            virtualMachineScaleSetName: virtualMachineScaleSetName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
     * you are getting charged for the resources. Instead, use deallocate to release resources and
     * avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.powerOff = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginPowerOff(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restarts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.restart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginRestart(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Starts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.start = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginStart(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and
     * powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.redeploy = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginRedeploy(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSetVMs.prototype.retrieveBootDiagnosticsData = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, retrieveBootDiagnosticsDataOperationSpec, callback);
    };
    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMs.prototype.performMaintenance = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.beginPerformMaintenance(resourceGroupName, vmScaleSetName, instanceId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSetVMs.prototype.simulateEviction = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, simulateEvictionOperationSpec, callback);
    };
    /**
     * Run command on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMsRunCommandResponse>
     */
    VirtualMachineScaleSetVMs.prototype.runCommand = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
        return this.beginRunCommand(resourceGroupName, vmScaleSetName, instanceId, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginReimage = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginReimageOperationSpec, options);
    };
    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
     * This operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginReimageAll = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginReimageAllOperationSpec, options);
    };
    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
     * releases the compute resources it uses. You are not billed for the compute resources of this
     * virtual machine once it is deallocated.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginDeallocate = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginDeallocateOperationSpec, options);
    };
    /**
     * Updates a virtual machine of a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set where the extension should be create or
     * updated.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a virtual machine from a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
     * you are getting charged for the resources. Instead, use deallocate to release resources and
     * avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginPowerOff = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginPowerOffOperationSpec, options);
    };
    /**
     * Restarts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginRestart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * Starts a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginStart = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and
     * powers it back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginRedeploy = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginRedeployOperationSpec, options);
    };
    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginPerformMaintenance = function (resourceGroupName, vmScaleSetName, instanceId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, beginPerformMaintenanceOperationSpec, options);
    };
    /**
     * Run command on a virtual machine in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param parameters Parameters supplied to the Run command operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMs.prototype.beginRunCommand = function (resourceGroupName, vmScaleSetName, instanceId, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            parameters: parameters,
            options: options
        }, beginRunCommandOperationSpec, options);
    };
    VirtualMachineScaleSetVMs.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return VirtualMachineScaleSetVMs;
}());
export { VirtualMachineScaleSetVMs };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand1,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVM
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.virtualMachineScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.select,
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var retrieveBootDiagnosticsDataOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/retrieveBootDiagnosticsData",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.sasUriExpirationTimeInMinutes,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RetrieveBootDiagnosticsDataResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var simulateEvictionOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/simulateEviction",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmScaleSetVMReimageInput"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMReimageParameters
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageAllOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeallocateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetVM), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVM
        },
        202: {
            bodyMapper: Mappers.VirtualMachineScaleSetVM
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.forceDeletion,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.skipShutdown,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRedeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPerformMaintenanceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRunCommandOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.RunCommandInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RunCommandResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.select,
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachineScaleSetVMs.js.map