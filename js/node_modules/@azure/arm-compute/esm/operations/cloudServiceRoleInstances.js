/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/cloudServiceRoleInstancesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a CloudServiceRoleInstances. */
var CloudServiceRoleInstances = /** @class */ (function () {
    /**
     * Create a CloudServiceRoleInstances.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function CloudServiceRoleInstances(client) {
        this.client = client;
    }
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServiceRoleInstances.prototype.deleteMethod = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.beginDeleteMethod(roleInstanceName, resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    CloudServiceRoleInstances.prototype.get = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, getOperationSpec, callback);
    };
    CloudServiceRoleInstances.prototype.getInstanceView = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, getInstanceViewOperationSpec, callback);
    };
    CloudServiceRoleInstances.prototype.list = function (resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
     * cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServiceRoleInstances.prototype.restart = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.beginRestart(roleInstanceName, resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServiceRoleInstances.prototype.reimage = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.beginReimage(roleInstanceName, resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles and initializes the storage resources that are used by them. If you do
     * not want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServiceRoleInstances.prototype.rebuild = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.beginRebuild(roleInstanceName, resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    CloudServiceRoleInstances.prototype.getRemoteDesktopFile = function (roleInstanceName, resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, getRemoteDesktopFileOperationSpec, callback);
    };
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServiceRoleInstances.prototype.beginDeleteMethod = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
     * cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServiceRoleInstances.prototype.beginRestart = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServiceRoleInstances.prototype.beginReimage = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginReimageOperationSpec, options);
    };
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles and initializes the storage resources that are used by them. If you do
     * not want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServiceRoleInstances.prototype.beginRebuild = function (roleInstanceName, resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            roleInstanceName: roleInstanceName,
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginRebuildOperationSpec, options);
    };
    CloudServiceRoleInstances.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return CloudServiceRoleInstances;
}());
export { CloudServiceRoleInstances };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4,
        Parameters.expand1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleInstance
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/instanceView",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleInstanceInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4,
        Parameters.expand1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleInstanceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getRemoteDesktopFileOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/remoteDesktopFile",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/restart",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/reimage",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRebuildOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/rebuild",
    urlParameters: [
        Parameters.roleInstanceName,
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion4,
        Parameters.expand1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RoleInstanceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=cloudServiceRoleInstances.js.map