import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ComputeManagementClientContext } from "../computeManagementClientContext";
/** Class representing a VirtualMachineExtensionImages. */
export declare class VirtualMachineExtensionImages {
    private readonly client;
    /**
     * Create a VirtualMachineExtensionImages.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: ComputeManagementClientContext);
    /**
     * Gets a virtual machine extension image.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param version
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineExtensionImagesGetResponse>
     */
    get(location: string, publisherName: string, type: string, version: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineExtensionImagesGetResponse>;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param version
     * @param callback The callback
     */
    get(location: string, publisherName: string, type: string, version: string, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage>): void;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param version
     * @param options The optional parameters
     * @param callback The callback
     */
    get(location: string, publisherName: string, type: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage>): void;
    /**
     * Gets a list of virtual machine extension image types.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineExtensionImagesListTypesResponse>
     */
    listTypes(location: string, publisherName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineExtensionImagesListTypesResponse>;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param callback The callback
     */
    listTypes(location: string, publisherName: string, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage[]>): void;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param options The optional parameters
     * @param callback The callback
     */
    listTypes(location: string, publisherName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage[]>): void;
    /**
     * Gets a list of virtual machine extension image versions.
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineExtensionImagesListVersionsResponse>
     */
    listVersions(location: string, publisherName: string, type: string, options?: Models.VirtualMachineExtensionImagesListVersionsOptionalParams): Promise<Models.VirtualMachineExtensionImagesListVersionsResponse>;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param callback The callback
     */
    listVersions(location: string, publisherName: string, type: string, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage[]>): void;
    /**
     * @param location The name of a supported Azure region.
     * @param publisherName
     * @param type
     * @param options The optional parameters
     * @param callback The callback
     */
    listVersions(location: string, publisherName: string, type: string, options: Models.VirtualMachineExtensionImagesListVersionsOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineExtensionImage[]>): void;
}
//# sourceMappingURL=virtualMachineExtensionImages.d.ts.map