/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/virtualMachineScaleSetsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachineScaleSets. */
var VirtualMachineScaleSets = /** @class */ (function () {
    /**
     * Create a VirtualMachineScaleSets.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineScaleSets(client) {
        this.client = client;
    }
    VirtualMachineScaleSets.prototype.listByLocation = function (location, options, callback) {
        return this.client.sendOperationRequest({
            location: location,
            options: options
        }, listByLocationOperationSpec, callback);
    };
    /**
     * Create or update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetsCreateOrUpdateResponse>
     */
    VirtualMachineScaleSets.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetsUpdateResponse>
     */
    VirtualMachineScaleSets.prototype.update = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.beginUpdate(resourceGroupName, vmScaleSetName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSets.prototype.get = function (resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.deallocate = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginDeallocate(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.deleteInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.beginDeleteInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSets.prototype.getInstanceView = function (resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, getInstanceViewOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.list = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.listAll = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAllOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.listSkus = function (resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, listSkusOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.getOSUpgradeHistory = function (resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, getOSUpgradeHistoryOperationSpec, callback);
    };
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release
     * resources and avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.powerOff = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginPowerOff(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restarts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.restart = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginRestart(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Starts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.start = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginStart(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node,
     * and powers them back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.redeploy = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginRedeploy(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
     * which are not eligible for perform maintenance will be failed. Please refer to best practices
     * for more details:
     * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.performMaintenance = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginPerformMaintenance(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.updateInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.beginUpdateInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which
     * don't have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual
     * machine is reset to initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.reimage = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginReimage(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.reimageAll = function (resourceGroupName, vmScaleSetName, options) {
        return this.beginReimageAll(resourceGroupName, vmScaleSetName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSets.prototype.forceRecoveryServiceFabricPlatformUpdateDomainWalk = function (resourceGroupName, vmScaleSetName, platformUpdateDomain, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            platformUpdateDomain: platformUpdateDomain,
            options: options
        }, forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.convertToSinglePlacementGroup = function (resourceGroupName, vmScaleSetName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            parameters: parameters,
            options: options
        }, convertToSinglePlacementGroupOperationSpec, callback);
    };
    /**
     * Changes ServiceState property for a given service
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the virtual machine scale set to create or update.
     * @param parameters The input object for SetOrchestrationServiceState API.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSets.prototype.setOrchestrationServiceState = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.beginSetOrchestrationServiceState(resourceGroupName, vmScaleSetName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Create or update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Update a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set to create or update.
     * @param parameters The scale set object.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginDeallocate = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginDeallocateOperationSpec, options);
    };
    /**
     * Deletes virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginDeleteInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            vmInstanceIDs: vmInstanceIDs,
            options: options
        }, beginDeleteInstancesOperationSpec, options);
    };
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release
     * resources and avoid charges.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginPowerOff = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginPowerOffOperationSpec, options);
    };
    /**
     * Restarts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginRestart = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * Starts one or more virtual machines in a VM scale set.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginStart = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Shuts down all the virtual machines in the virtual machine scale set, moves them to a new node,
     * and powers them back on.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginRedeploy = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginRedeployOperationSpec, options);
    };
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
     * which are not eligible for perform maintenance will be failed. Please refer to best practices
     * for more details:
     * https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginPerformMaintenance = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginPerformMaintenanceOperationSpec, options);
    };
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginUpdateInstances = function (resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            vmInstanceIDs: vmInstanceIDs,
            options: options
        }, beginUpdateInstancesOperationSpec, options);
    };
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set which
     * don't have a ephemeral OS disk, for virtual machines who have a ephemeral OS disk the virtual
     * machine is reset to initial state.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginReimage = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginReimageOperationSpec, options);
    };
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginReimageAll = function (resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            options: options
        }, beginReimageAllOperationSpec, options);
    };
    /**
     * Changes ServiceState property for a given service
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the virtual machine scale set to create or update.
     * @param parameters The input object for SetOrchestrationServiceState API.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSets.prototype.beginSetOrchestrationServiceState = function (resourceGroupName, vmScaleSetName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            parameters: parameters,
            options: options
        }, beginSetOrchestrationServiceStateOperationSpec, options);
    };
    VirtualMachineScaleSets.prototype.listByLocationNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByLocationNextOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.listAllNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAllNextOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.listSkusNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSkusNextOperationSpec, callback);
    };
    VirtualMachineScaleSets.prototype.getOSUpgradeHistoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getOSUpgradeHistoryNextOperationSpec, callback);
    };
    return VirtualMachineScaleSets;
}());
export { VirtualMachineScaleSets };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByLocationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachineScaleSets",
    urlParameters: [
        Parameters.location1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0,
        Parameters.expand0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListWithLinkResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListSkusResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOSUpgradeHistoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osUpgradeHistory",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListOSUpgradeHistory
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/forceRecoveryServiceFabricPlatformUpdateDomainWalk",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0,
        Parameters.platformUpdateDomain
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecoveryWalkResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var convertToSinglePlacementGroupOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/convertToSinglePlacementGroup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.VMScaleSetConvertToSinglePlacementGroupInput), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSet), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        201: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.forceDeletion,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeallocateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteInstancesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.forceDeletion,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "vmInstanceIDs",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetVMInstanceRequiredIDs), { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.skipShutdown,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRedeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/redeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPerformMaintenanceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/performMaintenance",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateInstancesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "vmInstanceIDs",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetVMInstanceRequiredIDs), { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmScaleSetReimageInput"
        ],
        mapper: Mappers.VirtualMachineScaleSetReimageParameters
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageAllOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimageall",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginSetOrchestrationServiceStateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/setOrchestrationServiceState",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.OrchestrationServiceStateInput), { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByLocationNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListWithLinkResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListSkusResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOSUpgradeHistoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListOSUpgradeHistory
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachineScaleSets.js.map