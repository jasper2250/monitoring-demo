/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/galleryApplicationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a GalleryApplications. */
var GalleryApplications = /** @class */ (function () {
    /**
     * Create a GalleryApplications.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function GalleryApplications(client) {
        this.client = client;
    }
    /**
     * Create or update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or
     * updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed
     * in the middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the create or update gallery Application
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GalleryApplicationsCreateOrUpdateResponse>
     */
    GalleryApplications.prototype.createOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
        return this.beginCreateOrUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
     * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
     * middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the update gallery Application operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GalleryApplicationsUpdateResponse>
     */
    GalleryApplications.prototype.update = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
        return this.beginUpdate(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    GalleryApplications.prototype.get = function (resourceGroupName, galleryName, galleryApplicationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            galleryName: galleryName,
            galleryApplicationName: galleryApplicationName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Delete a gallery Application.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    GalleryApplications.prototype.deleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, options) {
        return this.beginDeleteMethod(resourceGroupName, galleryName, galleryApplicationName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    GalleryApplications.prototype.listByGallery = function (resourceGroupName, galleryName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            galleryName: galleryName,
            options: options
        }, listByGalleryOperationSpec, callback);
    };
    /**
     * Create or update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or
     * updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed
     * in the middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the create or update gallery Application
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    GalleryApplications.prototype.beginCreateOrUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            galleryName: galleryName,
            galleryApplicationName: galleryApplicationName,
            galleryApplication: galleryApplication,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Update a gallery Application Definition.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The
     * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
     * middle. The maximum length is 80 characters.
     * @param galleryApplication Parameters supplied to the update gallery Application operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    GalleryApplications.prototype.beginUpdate = function (resourceGroupName, galleryName, galleryApplicationName, galleryApplication, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            galleryName: galleryName,
            galleryApplicationName: galleryApplicationName,
            galleryApplication: galleryApplication,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Delete a gallery Application.
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application
     * Definition is to be deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    GalleryApplications.prototype.beginDeleteMethod = function (resourceGroupName, galleryName, galleryApplicationName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            galleryName: galleryName,
            galleryApplicationName: galleryApplicationName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    GalleryApplications.prototype.listByGalleryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByGalleryNextOperationSpec, callback);
    };
    return GalleryApplications;
}());
export { GalleryApplications };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplication
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByGalleryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "galleryApplication",
        mapper: __assign(__assign({}, Mappers.GalleryApplication), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplication
        },
        201: {
            bodyMapper: Mappers.GalleryApplication
        },
        202: {
            bodyMapper: Mappers.GalleryApplication
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "galleryApplication",
        mapper: __assign(__assign({}, Mappers.GalleryApplicationUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplication
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.galleryName,
        Parameters.galleryApplicationName
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByGalleryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion3
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GalleryApplicationList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=galleryApplications.js.map