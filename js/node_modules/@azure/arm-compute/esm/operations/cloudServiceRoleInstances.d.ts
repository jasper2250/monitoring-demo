import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ComputeManagementClientContext } from "../computeManagementClientContext";
/** Class representing a CloudServiceRoleInstances. */
export declare class CloudServiceRoleInstances {
    private readonly client;
    /**
     * Create a CloudServiceRoleInstances.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: ComputeManagementClientContext);
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServiceRoleInstancesGetResponse>
     */
    get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesGetOptionalParams): Promise<Models.CloudServiceRoleInstancesGetResponse>;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param callback The callback
     */
    get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstance>): void;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param options The optional parameters
     * @param callback The callback
     */
    get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: Models.CloudServiceRoleInstancesGetOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstance>): void;
    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse>
     */
    getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse>;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param callback The callback
     */
    getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstanceInstanceView>): void;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleInstanceInstanceView>): void;
    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to
     * get the next page of role instances. Do this till nextLink is null to fetch all the role
     * instances.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServiceRoleInstancesListResponse>
     */
    list(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesListOptionalParams): Promise<Models.CloudServiceRoleInstancesListResponse>;
    /**
     * @param resourceGroupName
     * @param cloudServiceName
     * @param callback The callback
     */
    list(resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
    /**
     * @param resourceGroupName
     * @param cloudServiceName
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, cloudServiceName: string, options: Models.CloudServiceRoleInstancesListOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
     * cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restart(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    reimage(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles and initializes the storage resources that are used by them. If you do
     * not want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    rebuild(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse>
     */
    getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse>;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param callback The callback
     */
    getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param options The optional parameters
     * @param callback The callback
     */
    getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes a role instance from a cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
     * cloud service.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestart(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginReimage(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
     * web roles or worker roles and initializes the storage resources that are used by them. If you do
     * not want to initialize storage resources, you can use Reimage Role Instance.
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName
     * @param cloudServiceName
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRebuild(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to
     * get the next page of role instances. Do this till nextLink is null to fetch all the role
     * instances.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServiceRoleInstancesListNextResponse>
     */
    listNext(nextPageLink: string, options?: Models.CloudServiceRoleInstancesListNextOptionalParams): Promise<Models.CloudServiceRoleInstancesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: Models.CloudServiceRoleInstancesListNextOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
}
//# sourceMappingURL=cloudServiceRoleInstances.d.ts.map