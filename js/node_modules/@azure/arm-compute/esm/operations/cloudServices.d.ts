import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ComputeManagementClientContext } from "../computeManagementClientContext";
/** Class representing a CloudServices. */
export declare class CloudServices {
    private readonly client;
    /**
     * Create a CloudServices.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: ComputeManagementClientContext);
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud
     * service creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesCreateOrUpdateOptionalParams): Promise<Models.CloudServicesCreateOrUpdateResponse>;
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesUpdateResponse>
     */
    update(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesUpdateOptionalParams): Promise<Models.CloudServicesUpdateResponse>;
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Display information about a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesGetResponse>
     */
    get(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesGetResponse>;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param callback The callback
     */
    get(resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.CloudService>): void;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudService>): void;
    /**
     * Gets the status of a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesGetInstanceViewResponse>
     */
    getInstanceView(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesGetInstanceViewResponse>;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param callback The callback
     */
    getInstanceView(resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.CloudServiceInstanceView>): void;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceView(resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceInstanceView>): void;
    /**
     * Gets a list of all cloud services in the subscription, regardless of the associated resource
     * group. Use nextLink property in the response to get the next page of Cloud Services. Do this
     * till nextLink is null to fetch all the Cloud Services.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesListAllResponse>
     */
    listAll(options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesListAllResponse>;
    /**
     * @param callback The callback
     */
    listAll(callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * Gets a list of all cloud services under a resource group. Use nextLink property in the response
     * to get the next page of Cloud Services. Do this till nextLink is null to fetch all the Cloud
     * Services.
     * @param resourceGroupName Name of the resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesListResponse>
     */
    list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesListResponse>;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param callback The callback
     */
    list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * @param resourceGroupName Name of the resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    start(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged
     * for the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    powerOff(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restart(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesRestartOptionalParams): Promise<msRest.RestResponse>;
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
     * worker roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    reimage(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesReimageOptionalParams): Promise<msRest.RestResponse>;
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
     * and initializes the storage resources that are used by them. If you do not want to initialize
     * storage resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    rebuild(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesRebuildOptionalParams): Promise<msRest.RestResponse>;
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteInstances(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesDeleteInstancesOptionalParams): Promise<msRest.RestResponse>;
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud
     * service creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStart(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged
     * for the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginPowerOff(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestart(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginRestartOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
     * worker roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginReimage(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginReimageOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
     * and initializes the storage resources that are used by them. If you do not want to initialize
     * storage resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRebuild(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginRebuildOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteInstances(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServicesBeginDeleteInstancesOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Gets a list of all cloud services in the subscription, regardless of the associated resource
     * group. Use nextLink property in the response to get the next page of Cloud Services. Do this
     * till nextLink is null to fetch all the Cloud Services.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesListAllNextResponse>
     */
    listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesListAllNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * Gets a list of all cloud services under a resource group. Use nextLink property in the response
     * to get the next page of Cloud Services. Do this till nextLink is null to fetch all the Cloud
     * Services.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServicesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceListResult>): void;
}
//# sourceMappingURL=cloudServices.d.ts.map