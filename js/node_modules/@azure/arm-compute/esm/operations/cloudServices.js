/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/cloudServicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a CloudServices. */
var CloudServices = /** @class */ (function () {
    /**
     * Create a CloudServices.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function CloudServices(client) {
        this.client = client;
    }
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud
     * service creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesCreateOrUpdateResponse>
     */
    CloudServices.prototype.createOrUpdate = function (resourceGroupName, cloudServiceName, options) {
        return this.beginCreateOrUpdate(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CloudServicesUpdateResponse>
     */
    CloudServices.prototype.update = function (resourceGroupName, cloudServiceName, options) {
        return this.beginUpdate(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.deleteMethod = function (resourceGroupName, cloudServiceName, options) {
        return this.beginDeleteMethod(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    CloudServices.prototype.get = function (resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, getOperationSpec, callback);
    };
    CloudServices.prototype.getInstanceView = function (resourceGroupName, cloudServiceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, getInstanceViewOperationSpec, callback);
    };
    CloudServices.prototype.listAll = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAllOperationSpec, callback);
    };
    CloudServices.prototype.list = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.start = function (resourceGroupName, cloudServiceName, options) {
        return this.beginStart(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged
     * for the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.powerOff = function (resourceGroupName, cloudServiceName, options) {
        return this.beginPowerOff(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.restart = function (resourceGroupName, cloudServiceName, options) {
        return this.beginRestart(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
     * worker roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.reimage = function (resourceGroupName, cloudServiceName, options) {
        return this.beginReimage(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
     * and initializes the storage resources that are used by them. If you do not want to initialize
     * storage resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.rebuild = function (resourceGroupName, cloudServiceName, options) {
        return this.beginRebuild(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    CloudServices.prototype.deleteInstances = function (resourceGroupName, cloudServiceName, options) {
        return this.beginDeleteInstances(resourceGroupName, cloudServiceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Create or update a cloud service. Please note some properties can be set only during cloud
     * service creation.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginCreateOrUpdate = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Update a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginUpdate = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginDeleteMethod = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Starts the cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginStart = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * Power off the cloud service. Note that resources are still attached and you are getting charged
     * for the resources.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginPowerOff = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginPowerOffOperationSpec, options);
    };
    /**
     * Restarts one or more role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginRestart = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * Reimage asynchronous operation reinstalls the operating system on instances of web roles or
     * worker roles.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginReimage = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginReimageOperationSpec, options);
    };
    /**
     * Rebuild Role Instances reinstalls the operating system on instances of web roles or worker roles
     * and initializes the storage resources that are used by them. If you do not want to initialize
     * storage resources, you can use Reimage Role Instances.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginRebuild = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginRebuildOperationSpec, options);
    };
    /**
     * Deletes role instances in a cloud service.
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    CloudServices.prototype.beginDeleteInstances = function (resourceGroupName, cloudServiceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            cloudServiceName: cloudServiceName,
            options: options
        }, beginDeleteInstancesOperationSpec, options);
    };
    CloudServices.prototype.listAllNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAllNextOperationSpec, callback);
    };
    CloudServices.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return CloudServices;
}());
export { CloudServices };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudServiceInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/cloudServices",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.CloudService
    },
    responses: {
        200: {
            bodyMapper: Mappers.CloudService
        },
        201: {
            bodyMapper: Mappers.CloudService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.CloudServiceUpdate
    },
    responses: {
        200: {
            bodyMapper: Mappers.CloudService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/poweroff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.RoleInstances
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginReimageOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/reimage",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.RoleInstances
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRebuildOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/rebuild",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.RoleInstances
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteInstancesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/delete",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.cloudServiceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.RoleInstances
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion4
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CloudServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=cloudServices.js.map