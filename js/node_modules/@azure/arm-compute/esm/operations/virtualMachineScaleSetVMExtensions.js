/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/virtualMachineScaleSetVMExtensionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachineScaleSetVMExtensions. */
var VirtualMachineScaleSetVMExtensions = /** @class */ (function () {
    /**
     * Create a VirtualMachineScaleSetVMExtensions.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineScaleSetVMExtensions(client) {
        this.client = client;
    }
    /**
     * The operation to create or update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>
     */
    VirtualMachineScaleSetVMExtensions.prototype.createOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsUpdateResponse>
     */
    VirtualMachineScaleSetVMExtensions.prototype.update = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
        return this.beginUpdate(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to delete the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    VirtualMachineScaleSetVMExtensions.prototype.deleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineScaleSetVMExtensions.prototype.get = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            vmExtensionName: vmExtensionName,
            options: options
        }, getOperationSpec, callback);
    };
    VirtualMachineScaleSetVMExtensions.prototype.list = function (resourceGroupName, vmScaleSetName, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * The operation to create or update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            vmExtensionName: vmExtensionName,
            extensionParameters: extensionParameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * The operation to update the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMExtensions.prototype.beginUpdate = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, extensionParameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            vmExtensionName: vmExtensionName,
            extensionParameters: extensionParameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * The operation to delete the VMSS VM extension.
     * @param resourceGroupName The name of the resource group.
     * @param vmScaleSetName The name of the VM scale set.
     * @param instanceId The instance ID of the virtual machine.
     * @param vmExtensionName The name of the virtual machine extension.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    VirtualMachineScaleSetVMExtensions.prototype.beginDeleteMethod = function (resourceGroupName, vmScaleSetName, instanceId, vmExtensionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmScaleSetName: vmScaleSetName,
            instanceId: instanceId,
            vmExtensionName: vmExtensionName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    return VirtualMachineScaleSetVMExtensions;
}());
export { VirtualMachineScaleSetVMExtensions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMExtensionsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "extensionParameters",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetVMExtension), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
        },
        201: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "extensionParameters",
        mapper: __assign(__assign({}, Mappers.VirtualMachineScaleSetVMExtensionUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.instanceId,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachineScaleSetVMExtensions.js.map