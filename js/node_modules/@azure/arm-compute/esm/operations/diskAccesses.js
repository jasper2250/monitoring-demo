/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/diskAccessesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DiskAccesses. */
var DiskAccesses = /** @class */ (function () {
    /**
     * Create a DiskAccesses.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function DiskAccesses(client) {
        this.client = client;
    }
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiskAccessesCreateOrUpdateResponse>
     */
    DiskAccesses.prototype.createOrUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
        return this.beginCreateOrUpdate(resourceGroupName, diskAccessName, diskAccess, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiskAccessesUpdateResponse>
     */
    DiskAccesses.prototype.update = function (resourceGroupName, diskAccessName, diskAccess, options) {
        return this.beginUpdate(resourceGroupName, diskAccessName, diskAccess, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskAccesses.prototype.get = function (resourceGroupName, diskAccessName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    DiskAccesses.prototype.deleteMethod = function (resourceGroupName, diskAccessName, options) {
        return this.beginDeleteMethod(resourceGroupName, diskAccessName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskAccesses.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    DiskAccesses.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    DiskAccesses.prototype.getPrivateLinkResources = function (resourceGroupName, diskAccessName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            options: options
        }, getPrivateLinkResourcesOperationSpec, callback);
    };
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used
     * to create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the
     * Put private endpoint connection operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiskAccessesUpdateAPrivateEndpointConnectionResponse>
     */
    DiskAccesses.prototype.updateAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return this.beginUpdateAPrivateEndpointConnection(resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskAccesses.prototype.getAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            options: options
        }, getAPrivateEndpointConnectionOperationSpec, callback);
    };
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    DiskAccesses.prototype.deleteAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options) {
        return this.beginDeleteAPrivateEndpointConnection(resourceGroupName, diskAccessName, privateEndpointConnectionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DiskAccesses.prototype.listPrivateEndpointConnections = function (resourceGroupName, diskAccessName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            options: options
        }, listPrivateEndpointConnectionsOperationSpec, callback);
    };
    /**
     * Creates or updates a disk access resource
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Put disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskAccesses.prototype.beginCreateOrUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            diskAccess: diskAccess,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates (patches) a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskAccesses.prototype.beginUpdate = function (resourceGroupName, diskAccessName, diskAccess, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            diskAccess: diskAccess,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskAccesses.prototype.beginDeleteMethod = function (resourceGroupName, diskAccessName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Approve or reject a private endpoint connection under disk access resource, this can't be used
     * to create a new private endpoint connection.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection private endpoint connection object supplied in the body of the
     * Put private endpoint connection operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskAccesses.prototype.beginUpdateAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            privateEndpointConnection: privateEndpointConnection,
            options: options
        }, beginUpdateAPrivateEndpointConnectionOperationSpec, options);
    };
    /**
     * Deletes a private endpoint connection under a disk access resource.
     * @param resourceGroupName The name of the resource group.
     * @param diskAccessName The name of the disk access resource that is being created. The name can't
     * be changed after the disk encryption set is created. Supported characters for the name are a-z,
     * A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DiskAccesses.prototype.beginDeleteAPrivateEndpointConnection = function (resourceGroupName, diskAccessName, privateEndpointConnectionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            diskAccessName: diskAccessName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            options: options
        }, beginDeleteAPrivateEndpointConnectionOperationSpec, options);
    };
    DiskAccesses.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    DiskAccesses.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    DiskAccesses.prototype.listPrivateEndpointConnectionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPrivateEndpointConnectionsNextOperationSpec, callback);
    };
    return DiskAccesses;
}());
export { DiskAccesses };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccess
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccessList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskAccesses",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccessList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getPrivateLinkResourcesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateLinkResources",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getAPrivateEndpointConnectionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPrivateEndpointConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "diskAccess",
        mapper: __assign(__assign({}, Mappers.DiskAccess), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccess
        },
        202: {
            bodyMapper: Mappers.DiskAccess
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "diskAccess",
        mapper: __assign(__assign({}, Mappers.DiskAccessUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccess
        },
        202: {
            bodyMapper: Mappers.DiskAccess
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateAPrivateEndpointConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "privateEndpointConnection",
        mapper: __assign(__assign({}, Mappers.PrivateEndpointConnection), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        202: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteAPrivateEndpointConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.diskAccessName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccessList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiskAccessList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPrivateEndpointConnectionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=diskAccesses.js.map